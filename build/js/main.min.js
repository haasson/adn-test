"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! jQuery v3.2.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector | (c) JS Foundation and other contributors | jquery.org/license */
!function (a, b) {
  "use strict";

  "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
    if (!a.document) throw new Error("jQuery requires a window with a document");
    return b(a);
  } : b(a);
}("undefined" != typeof window ? window : void 0, function (a, b) {
  "use strict";

  var c = [],
      d = a.document,
      e = Object.getPrototypeOf,
      f = c.slice,
      g = c.concat,
      h = c.push,
      i = c.indexOf,
      j = {},
      k = j.toString,
      l = j.hasOwnProperty,
      m = l.toString,
      n = m.call(Object),
      o = {};

  function p(a, b) {
    b = b || d;
    var c = b.createElement("script");
    c.text = a, b.head.appendChild(c).parentNode.removeChild(c);
  }

  var q = "3.2.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",
      r = function r(a, b) {
    return new r.fn.init(a, b);
  },
      s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      t = /^-ms-/,
      u = /-([a-z])/g,
      v = function v(a, b) {
    return b.toUpperCase();
  };

  r.fn = r.prototype = {
    jquery: q,
    constructor: r,
    length: 0,
    toArray: function toArray() {
      return f.call(this);
    },
    get: function get(a) {
      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];
    },
    pushStack: function pushStack(a) {
      var b = r.merge(this.constructor(), a);
      return b.prevObject = this, b;
    },
    each: function each(a) {
      return r.each(this, a);
    },
    map: function map(a) {
      return this.pushStack(r.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    },
    slice: function slice() {
      return this.pushStack(f.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(a) {
      var b = this.length,
          c = +a + (a < 0 ? b : 0);
      return this.pushStack(c >= 0 && c < b ? [this[c]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    push: h,
    sort: c.sort,
    splice: c.splice
  }, r.extend = r.fn.extend = function () {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;

    for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == _typeof(g) || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) {
      if (null != (a = arguments[h])) for (b in a) {
        c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));
      }
    }

    return g;
  }, r.extend({
    expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""),
    isReady: !0,
    error: function error(a) {
      throw new Error(a);
    },
    noop: function noop() {},
    isFunction: function isFunction(a) {
      return "function" === r.type(a);
    },
    isWindow: function isWindow(a) {
      return null != a && a === a.window;
    },
    isNumeric: function isNumeric(a) {
      var b = r.type(a);
      return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
    },
    isPlainObject: function isPlainObject(a) {
      var b, c;
      return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n));
    },
    isEmptyObject: function isEmptyObject(a) {
      var b;

      for (b in a) {
        return !1;
      }

      return !0;
    },
    type: function type(a) {
      return null == a ? a + "" : "object" == _typeof(a) || "function" == typeof a ? j[k.call(a)] || "object" : _typeof(a);
    },
    globalEval: function globalEval(a) {
      p(a);
    },
    camelCase: function camelCase(a) {
      return a.replace(t, "ms-").replace(u, v);
    },
    each: function each(a, b) {
      var c,
          d = 0;

      if (w(a)) {
        for (c = a.length; d < c; d++) {
          if (b.call(a[d], d, a[d]) === !1) break;
        }
      } else for (d in a) {
        if (b.call(a[d], d, a[d]) === !1) break;
      }

      return a;
    },
    trim: function trim(a) {
      return null == a ? "" : (a + "").replace(s, "");
    },
    makeArray: function makeArray(a, b) {
      var c = b || [];
      return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c;
    },
    inArray: function inArray(a, b, c) {
      return null == b ? -1 : i.call(b, a, c);
    },
    merge: function merge(a, b) {
      for (var c = +b.length, d = 0, e = a.length; d < c; d++) {
        a[e++] = b[d];
      }

      return a.length = e, a;
    },
    grep: function grep(a, b, c) {
      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) {
        d = !b(a[f], f), d !== h && e.push(a[f]);
      }

      return e;
    },
    map: function map(a, b, c) {
      var d,
          e,
          f = 0,
          h = [];
      if (w(a)) for (d = a.length; f < d; f++) {
        e = b(a[f], f, c), null != e && h.push(e);
      } else for (f in a) {
        e = b(a[f], f, c), null != e && h.push(e);
      }
      return g.apply([], h);
    },
    guid: 1,
    proxy: function proxy(a, b) {
      var c, d, e;
      if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function e() {
        return a.apply(b || this, d.concat(f.call(arguments)));
      }, e.guid = a.guid = a.guid || r.guid++, e;
    },
    now: Date.now,
    support: o
  }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
    j["[object " + b + "]"] = b.toLowerCase();
  });

  function w(a) {
    var b = !!a && "length" in a && a.length,
        c = r.type(a);
    return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a);
  }

  var x = function (a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u = "sizzle" + 1 * new Date(),
        v = a.document,
        w = 0,
        x = 0,
        y = ha(),
        z = ha(),
        A = ha(),
        B = function B(a, b) {
      return a === b && (l = !0), 0;
    },
        C = {}.hasOwnProperty,
        D = [],
        E = D.pop,
        F = D.push,
        G = D.push,
        H = D.slice,
        I = function I(a, b) {
      for (var c = 0, d = a.length; c < d; c++) {
        if (a[c] === b) return c;
      }

      return -1;
    },
        J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        K = "[\\x20\\t\\r\\n\\f]",
        L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
        N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
        O = new RegExp(K + "+", "g"),
        P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
        Q = new RegExp("^" + K + "*," + K + "*"),
        R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
        S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
        T = new RegExp(N),
        U = new RegExp("^" + L + "$"),
        V = {
      ID: new RegExp("^#(" + L + ")"),
      CLASS: new RegExp("^\\.(" + L + ")"),
      TAG: new RegExp("^(" + L + "|[*])"),
      ATTR: new RegExp("^" + M),
      PSEUDO: new RegExp("^" + N),
      CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"),
      bool: new RegExp("^(?:" + J + ")$", "i"),
      needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i")
    },
        W = /^(?:input|select|textarea|button)$/i,
        X = /^h\d$/i,
        Y = /^[^{]+\{\s*\[native \w/,
        Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        $ = /[+~]/,
        _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
        aa = function aa(a, b, c) {
      var d = "0x" + b - 65536;
      return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
    },
        ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        ca = function ca(a, b) {
      return b ? "\0" === a ? "\uFFFD" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a;
    },
        da = function da() {
      m();
    },
        ea = ta(function (a) {
      return a.disabled === !0 && ("form" in a || "label" in a);
    }, {
      dir: "parentNode",
      next: "legend"
    });

    try {
      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;
    } catch (fa) {
      G = {
        apply: D.length ? function (a, b) {
          F.apply(a, H.call(b));
        } : function (a, b) {
          var c = a.length,
              d = 0;

          while (a[c++] = b[d++]) {
            ;
          }

          a.length = c - 1;
        }
      };
    }

    function ga(a, b, d, e) {
      var f,
          h,
          j,
          k,
          l,
          o,
          r,
          s = b && b.ownerDocument,
          w = b ? b.nodeType : 9;
      if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;

      if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {
          if (9 === w) {
            if (!(j = b.getElementById(f))) return d;
            if (j.id === f) return d.push(j), d;
          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;
        } else {
          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;
          if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;
        }

        if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
          if (1 !== w) s = b, r = a;else if ("object" !== b.nodeName.toLowerCase()) {
            (k = b.getAttribute("id")) ? k = k.replace(ba, ca) : b.setAttribute("id", k = u), o = g(a), h = o.length;

            while (h--) {
              o[h] = "#" + k + " " + sa(o[h]);
            }

            r = o.join(","), s = $.test(a) && qa(b.parentNode) || b;
          }
          if (r) try {
            return G.apply(d, s.querySelectorAll(r)), d;
          } catch (x) {} finally {
            k === u && b.removeAttribute("id");
          }
        }
      }

      return i(a.replace(P, "$1"), b, d, e);
    }

    function ha() {
      var a = [];

      function b(c, e) {
        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
      }

      return b;
    }

    function ia(a) {
      return a[u] = !0, a;
    }

    function ja(a) {
      var b = n.createElement("fieldset");

      try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), b = null;
      }
    }

    function ka(a, b) {
      var c = a.split("|"),
          e = c.length;

      while (e--) {
        d.attrHandle[c[e]] = b;
      }
    }

    function la(a, b) {
      var c = b && a,
          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;
      if (d) return d;
      if (c) while (c = c.nextSibling) {
        if (c === b) return -1;
      }
      return a ? 1 : -1;
    }

    function ma(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return "input" === c && b.type === a;
      };
    }

    function na(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return ("input" === c || "button" === c) && b.type === a;
      };
    }

    function oa(a) {
      return function (b) {
        return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a;
      };
    }

    function pa(a) {
      return ia(function (b) {
        return b = +b, ia(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;

          while (g--) {
            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
          }
        });
      });
    }

    function qa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }

    c = ga.support = {}, f = ga.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;
      return !!b && "HTML" !== b.nodeName;
    }, m = ga.setDocument = function (a) {
      var b,
          e,
          g = a ? a.ownerDocument || a : v;
      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function (a) {
        return a.className = "i", !a.getAttribute("className");
      }), c.getElementsByTagName = ja(function (a) {
        return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length;
      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {
        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;
      }), c.getById ? (d.filter.ID = function (a) {
        var b = a.replace(_, aa);
        return function (a) {
          return a.getAttribute("id") === b;
        };
      }, d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c = b.getElementById(a);
          return c ? [c] : [];
        }
      }) : (d.filter.ID = function (a) {
        var b = a.replace(_, aa);
        return function (a) {
          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
          return c && c.value === b;
        };
      }, d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c,
              d,
              e,
              f = b.getElementById(a);

          if (f) {
            if (c = f.getAttributeNode("id"), c && c.value === a) return [f];
            e = b.getElementsByName(a), d = 0;

            while (f = e[d++]) {
              if (c = f.getAttributeNode("id"), c && c.value === a) return [f];
            }
          }

          return [];
        }
      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
      } : function (a, b) {
        var c,
            d = [],
            e = 0,
            f = b.getElementsByTagName(a);

        if ("*" === a) {
          while (c = f[e++]) {
            1 === c.nodeType && d.push(c);
          }

          return d;
        }

        return f;
      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
        if ("undefined" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);
      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {
        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
      }), ja(function (a) {
        a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
        var b = n.createElement("input");
        b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
        c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N);
      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {
        var c = 9 === a.nodeType ? a.documentElement : a,
            d = b && b.parentNode;
        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
      } : function (a, b) {
        if (b) while (b = b.parentNode) {
          if (b === a) return !0;
        }
        return !1;
      }, B = b ? function (a, b) {
        if (a === b) return l = !0, 0;
        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);
      } : function (a, b) {
        if (a === b) return l = !0, 0;
        var c,
            d = 0,
            e = a.parentNode,
            f = b.parentNode,
            g = [a],
            h = [b];
        if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;
        if (e === f) return la(a, b);
        c = a;

        while (c = c.parentNode) {
          g.unshift(c);
        }

        c = b;

        while (c = c.parentNode) {
          h.unshift(c);
        }

        while (g[d] === h[d]) {
          d++;
        }

        return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;
      }, n) : n;
    }, ga.matches = function (a, b) {
      return ga(a, null, null, b);
    }, ga.matchesSelector = function (a, b) {
      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) try {
        var d = s.call(a, b);
        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
      } catch (e) {}
      return ga(b, n, null, [a]).length > 0;
    }, ga.contains = function (a, b) {
      return (a.ownerDocument || a) !== n && m(a), t(a, b);
    }, ga.attr = function (a, b) {
      (a.ownerDocument || a) !== n && m(a);
      var e = d.attrHandle[b.toLowerCase()],
          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
    }, ga.escape = function (a) {
      return (a + "").replace(ba, ca);
    }, ga.error = function (a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, ga.uniqueSort = function (a) {
      var b,
          d = [],
          e = 0,
          f = 0;

      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
        while (b = a[f++]) {
          b === a[f] && (e = d.push(f));
        }

        while (e--) {
          a.splice(d[e], 1);
        }
      }

      return k = null, a;
    }, e = ga.getText = function (a) {
      var b,
          c = "",
          d = 0,
          f = a.nodeType;

      if (f) {
        if (1 === f || 9 === f || 11 === f) {
          if ("string" == typeof a.textContent) return a.textContent;

          for (a = a.firstChild; a; a = a.nextSibling) {
            c += e(a);
          }
        } else if (3 === f || 4 === f) return a.nodeValue;
      } else while (b = a[d++]) {
        c += e(b);
      }

      return c;
    }, d = ga.selectors = {
      cacheLength: 50,
      createPseudo: ia,
      match: V,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: !0
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: !0
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function ATTR(a) {
          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        },
        CHILD: function CHILD(a) {
          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
        },
        PSEUDO: function PSEUDO(a) {
          var b,
              c = !a[6] && a[2];
          return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
        }
      },
      filter: {
        TAG: function TAG(a) {
          var b = a.replace(_, aa).toLowerCase();
          return "*" === a ? function () {
            return !0;
          } : function (a) {
            return a.nodeName && a.nodeName.toLowerCase() === b;
          };
        },
        CLASS: function CLASS(a) {
          var b = y[a + " "];
          return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function (a) {
            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
          });
        },
        ATTR: function ATTR(a, b, c) {
          return function (d) {
            var e = ga.attr(d, a);
            return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
          };
        },
        CHILD: function CHILD(a, b, c, d, e) {
          var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;
          return 1 === d && 0 === e ? function (a) {
            return !!a.parentNode;
          } : function (b, c, i) {
            var j,
                k,
                l,
                m,
                n,
                o,
                p = f !== g ? "nextSibling" : "previousSibling",
                q = b.parentNode,
                r = h && b.nodeName.toLowerCase(),
                s = !i && !h,
                t = !1;

            if (q) {
              if (f) {
                while (p) {
                  m = b;

                  while (m = m[p]) {
                    if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;
                  }

                  o = p = "only" === a && !o && "nextSibling";
                }

                return !0;
              }

              if (o = [g ? q.firstChild : q.lastChild], g && s) {
                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];

                while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                  if (1 === m.nodeType && ++t && m === b) {
                    k[a] = [w, n, t];
                    break;
                  }
                }
              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;
              }

              return t -= e, t === d || t % d === 0 && t / d >= 0;
            }
          };
        },
        PSEUDO: function PSEUDO(a, b) {
          var c,
              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);
          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
            var d,
                f = e(a, b),
                g = f.length;

            while (g--) {
              d = I(a, f[g]), a[d] = !(c[d] = f[g]);
            }
          }) : function (a) {
            return e(a, 0, c);
          }) : e;
        }
      },
      pseudos: {
        not: ia(function (a) {
          var b = [],
              c = [],
              d = h(a.replace(P, "$1"));
          return d[u] ? ia(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;

            while (h--) {
              (f = g[h]) && (a[h] = !(b[h] = f));
            }
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
          };
        }),
        has: ia(function (a) {
          return function (b) {
            return ga(a, b).length > 0;
          };
        }),
        contains: ia(function (a) {
          return a = a.replace(_, aa), function (b) {
            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
          };
        }),
        lang: ia(function (a) {
          return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(), function (b) {
            var c;

            do {
              if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
            } while ((b = b.parentNode) && 1 === b.nodeType);

            return !1;
          };
        }),
        target: function target(b) {
          var c = a.location && a.location.hash;
          return c && c.slice(1) === b.id;
        },
        root: function root(a) {
          return a === o;
        },
        focus: function focus(a) {
          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
        },
        enabled: oa(!1),
        disabled: oa(!0),
        checked: function checked(a) {
          var b = a.nodeName.toLowerCase();
          return "input" === b && !!a.checked || "option" === b && !!a.selected;
        },
        selected: function selected(a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        },
        empty: function empty(a) {
          for (a = a.firstChild; a; a = a.nextSibling) {
            if (a.nodeType < 6) return !1;
          }

          return !0;
        },
        parent: function parent(a) {
          return !d.pseudos.empty(a);
        },
        header: function header(a) {
          return X.test(a.nodeName);
        },
        input: function input(a) {
          return W.test(a.nodeName);
        },
        button: function button(a) {
          var b = a.nodeName.toLowerCase();
          return "input" === b && "button" === a.type || "button" === b;
        },
        text: function text(a) {
          var b;
          return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
        },
        first: pa(function () {
          return [0];
        }),
        last: pa(function (a, b) {
          return [b - 1];
        }),
        eq: pa(function (a, b, c) {
          return [c < 0 ? c + b : c];
        }),
        even: pa(function (a, b) {
          for (var c = 0; c < b; c += 2) {
            a.push(c);
          }

          return a;
        }),
        odd: pa(function (a, b) {
          for (var c = 1; c < b; c += 2) {
            a.push(c);
          }

          return a;
        }),
        lt: pa(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; --d >= 0;) {
            a.push(d);
          }

          return a;
        }),
        gt: pa(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; ++d < b;) {
            a.push(d);
          }

          return a;
        })
      }
    }, d.pseudos.nth = d.pseudos.eq;

    for (b in {
      radio: !0,
      checkbox: !0,
      file: !0,
      password: !0,
      image: !0
    }) {
      d.pseudos[b] = ma(b);
    }

    for (b in {
      submit: !0,
      reset: !0
    }) {
      d.pseudos[b] = na(b);
    }

    function ra() {}

    ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];
      if (k) return b ? 0 : k.slice(0);
      h = a, i = [], j = d.preFilter;

      while (h) {
        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({
          value: c,
          type: e[0].replace(P, " ")
        }), h = h.slice(c.length));

        for (g in d.filter) {
          !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
            value: c,
            type: g,
            matches: e
          }), h = h.slice(c.length));
        }

        if (!c) break;
      }

      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
    };

    function sa(a) {
      for (var b = 0, c = a.length, d = ""; b < c; b++) {
        d += a[b].value;
      }

      return d;
    }

    function ta(a, b, c) {
      var d = b.dir,
          e = b.next,
          f = e || d,
          g = c && "parentNode" === f,
          h = x++;
      return b.first ? function (b, c, e) {
        while (b = b[d]) {
          if (1 === b.nodeType || g) return a(b, c, e);
        }

        return !1;
      } : function (b, c, i) {
        var j,
            k,
            l,
            m = [w, h];

        if (i) {
          while (b = b[d]) {
            if ((1 === b.nodeType || g) && a(b, c, i)) return !0;
          }
        } else while (b = b[d]) {
          if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {
            if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];
            if (k[f] = m, m[2] = a(b, c, i)) return !0;
          }
        }

        return !1;
      };
    }

    function ua(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;

        while (e--) {
          if (!a[e](b, c, d)) return !1;
        }

        return !0;
      } : a[0];
    }

    function va(a, b, c) {
      for (var d = 0, e = b.length; d < e; d++) {
        ga(a, b[d], c);
      }

      return c;
    }

    function wa(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) {
        (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));
      }

      return g;
    }

    function xa(a, b, c, d, e, f) {
      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || va(b || "*", h.nodeType ? [h] : h, []),
            q = !a || !f && b ? p : wa(p, m, a, h, i),
            r = c ? e || (f ? a : o || d) ? [] : g : q;

        if (c && c(q, r, h, i), d) {
          j = wa(r, n), d(j, [], h, i), k = j.length;

          while (k--) {
            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
          }
        }

        if (f) {
          if (e || a) {
            if (e) {
              j = [], k = r.length;

              while (k--) {
                (l = r[k]) && j.push(q[k] = l);
              }

              e(null, r = [], j, i);
            }

            k = r.length;

            while (k--) {
              (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
            }
          }
        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);
      });
    }

    function ya(a) {
      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ta(function (a) {
        return a === b;
      }, h, !0), l = ta(function (a) {
        return I(b, a) > -1;
      }, h, !0), m = [function (a, c, d) {
        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
        return b = null, e;
      }]; i < f; i++) {
        if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {
          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
            for (e = ++i; e < f; e++) {
              if (d.relative[a[e].type]) break;
            }

            return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({
              value: " " === a[i - 2].type ? "*" : ""
            })).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));
          }

          m.push(c);
        }
      }

      return ua(m);
    }

    function za(a, b) {
      var c = b.length > 0,
          e = a.length > 0,
          f = function f(_f, g, h, i, k) {
        var l,
            o,
            q,
            r = 0,
            s = "0",
            t = _f && [],
            u = [],
            v = j,
            x = _f || e && d.find.TAG("*", k),
            y = w += null == v ? 1 : Math.random() || .1,
            z = x.length;

        for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
          if (e && l) {
            o = 0, g || l.ownerDocument === n || (m(l), h = !p);

            while (q = a[o++]) {
              if (q(l, g || n, h)) {
                i.push(l);
                break;
              }
            }

            k && (w = y);
          }

          c && ((l = !q && l) && r--, _f && t.push(l));
        }

        if (r += s, c && s !== r) {
          o = 0;

          while (q = b[o++]) {
            q(t, u, g, h);
          }

          if (_f) {
            if (r > 0) while (s--) {
              t[s] || u[s] || (u[s] = E.call(i));
            }
            u = wa(u);
          }

          G.apply(i, u), k && !_f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);
        }

        return k && (w = y, j = v), t;
      };

      return c ? ia(f) : f;
    }

    return h = ga.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = A[a + " "];

      if (!f) {
        b || (b = g(a)), c = b.length;

        while (c--) {
          f = ya(b[c]), f[u] ? d.push(f) : e.push(f);
        }

        f = A(a, za(e, d)), f.selector = a;
      }

      return f;
    }, i = ga.select = function (a, b, c, e) {
      var f,
          i,
          j,
          k,
          l,
          m = "function" == typeof a && a,
          n = !e && g(a = m.selector || a);

      if (c = c || [], 1 === n.length) {
        if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;
          m && (b = b.parentNode), a = a.slice(i.shift().value.length);
        }

        f = V.needsContext.test(a) ? 0 : i.length;

        while (f--) {
          if (j = i[f], d.relative[k = j.type]) break;

          if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;
            break;
          }
        }
      }

      return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;
    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
      return 1 & a.compareDocumentPosition(n.createElement("fieldset"));
    }), ja(function (a) {
      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
    }) || ka("type|href|height|width", function (a, b, c) {
      if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
    }), c.attributes && ja(function (a) {
      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
    }) || ka("value", function (a, b, c) {
      if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue;
    }), ja(function (a) {
      return null == a.getAttribute("disabled");
    }) || ka(J, function (a, b, c) {
      var d;
      if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
    }), ga;
  }(a);

  r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;

  var y = function y(a, b, c) {
    var d = [],
        e = void 0 !== c;

    while ((a = a[b]) && 9 !== a.nodeType) {
      if (1 === a.nodeType) {
        if (e && r(a).is(c)) break;
        d.push(a);
      }
    }

    return d;
  },
      z = function z(a, b) {
    for (var c = []; a; a = a.nextSibling) {
      1 === a.nodeType && a !== b && c.push(a);
    }

    return c;
  },
      A = r.expr.match.needsContext;

  function B(a, b) {
    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
  }

  var C = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
      D = /^.[^:#\[\.,]*$/;

  function E(a, b, c) {
    return r.isFunction(b) ? r.grep(a, function (a, d) {
      return !!b.call(a, d, a) !== c;
    }) : b.nodeType ? r.grep(a, function (a) {
      return a === b !== c;
    }) : "string" != typeof b ? r.grep(a, function (a) {
      return i.call(b, a) > -1 !== c;
    }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {
      return i.call(b, a) > -1 !== c && 1 === a.nodeType;
    }));
  }

  r.filter = function (a, b, c) {
    var d = b[0];
    return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {
      return 1 === a.nodeType;
    }));
  }, r.fn.extend({
    find: function find(a) {
      var b,
          c,
          d = this.length,
          e = this;
      if ("string" != typeof a) return this.pushStack(r(a).filter(function () {
        for (b = 0; b < d; b++) {
          if (r.contains(e[b], this)) return !0;
        }
      }));

      for (c = this.pushStack([]), b = 0; b < d; b++) {
        r.find(a, e[b], c);
      }

      return d > 1 ? r.uniqueSort(c) : c;
    },
    filter: function filter(a) {
      return this.pushStack(E(this, a || [], !1));
    },
    not: function not(a) {
      return this.pushStack(E(this, a || [], !0));
    },
    is: function is(a) {
      return !!E(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length;
    }
  });

  var F,
      G = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      H = r.fn.init = function (a, b, c) {
    var e, f;
    if (!a) return this;

    if (c = c || F, "string" == typeof a) {
      if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);

      if (e[1]) {
        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) for (e in b) {
          r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
        }
        return this;
      }

      return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;
    }

    return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);
  };

  H.prototype = r.fn, F = r(d);
  var I = /^(?:parents|prev(?:Until|All))/,
      J = {
    children: !0,
    contents: !0,
    next: !0,
    prev: !0
  };
  r.fn.extend({
    has: function has(a) {
      var b = r(a, this),
          c = b.length;
      return this.filter(function () {
        for (var a = 0; a < c; a++) {
          if (r.contains(this, b[a])) return !0;
        }
      });
    },
    closest: function closest(a, b) {
      var c,
          d = 0,
          e = this.length,
          f = [],
          g = "string" != typeof a && r(a);
      if (!A.test(a)) for (; d < e; d++) {
        for (c = this[d]; c && c !== b; c = c.parentNode) {
          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
            f.push(c);
            break;
          }
        }
      }
      return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);
    },
    index: function index(a) {
      return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    add: function add(a, b) {
      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));
    },
    addBack: function addBack(a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    }
  });

  function K(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType) {
      ;
    }

    return a;
  }

  r.each({
    parent: function parent(a) {
      var b = a.parentNode;
      return b && 11 !== b.nodeType ? b : null;
    },
    parents: function parents(a) {
      return y(a, "parentNode");
    },
    parentsUntil: function parentsUntil(a, b, c) {
      return y(a, "parentNode", c);
    },
    next: function next(a) {
      return K(a, "nextSibling");
    },
    prev: function prev(a) {
      return K(a, "previousSibling");
    },
    nextAll: function nextAll(a) {
      return y(a, "nextSibling");
    },
    prevAll: function prevAll(a) {
      return y(a, "previousSibling");
    },
    nextUntil: function nextUntil(a, b, c) {
      return y(a, "nextSibling", c);
    },
    prevUntil: function prevUntil(a, b, c) {
      return y(a, "previousSibling", c);
    },
    siblings: function siblings(a) {
      return z((a.parentNode || {}).firstChild, a);
    },
    children: function children(a) {
      return z(a.firstChild);
    },
    contents: function contents(a) {
      return B(a, "iframe") ? a.contentDocument : (B(a, "template") && (a = a.content || a), r.merge([], a.childNodes));
    }
  }, function (a, b) {
    r.fn[a] = function (c, d) {
      var e = r.map(this, b, c);
      return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e);
    };
  });
  var L = /[^\x20\t\r\n\f]+/g;

  function M(a) {
    var b = {};
    return r.each(a.match(L) || [], function (a, c) {
      b[c] = !0;
    }), b;
  }

  r.Callbacks = function (a) {
    a = "string" == typeof a ? M(a) : r.extend({}, a);

    var b,
        c,
        d,
        e,
        f = [],
        g = [],
        h = -1,
        i = function i() {
      for (e = e || a.once, d = b = !0; g.length; h = -1) {
        c = g.shift();

        while (++h < f.length) {
          f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);
        }
      }

      a.memory || (c = !1), b = !1, e && (f = c ? [] : "");
    },
        j = {
      add: function add() {
        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
          r.each(b, function (b, c) {
            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c);
          });
        }(arguments), c && !b && i()), this;
      },
      remove: function remove() {
        return r.each(arguments, function (a, b) {
          var c;

          while ((c = r.inArray(b, f, c)) > -1) {
            f.splice(c, 1), c <= h && h--;
          }
        }), this;
      },
      has: function has(a) {
        return a ? r.inArray(a, f) > -1 : f.length > 0;
      },
      empty: function empty() {
        return f && (f = []), this;
      },
      disable: function disable() {
        return e = g = [], f = c = "", this;
      },
      disabled: function disabled() {
        return !f;
      },
      lock: function lock() {
        return e = g = [], c || b || (f = c = ""), this;
      },
      locked: function locked() {
        return !!e;
      },
      fireWith: function fireWith(a, c) {
        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;
      },
      fire: function fire() {
        return j.fireWith(this, arguments), this;
      },
      fired: function fired() {
        return !!d;
      }
    };

    return j;
  };

  function N(a) {
    return a;
  }

  function O(a) {
    throw a;
  }

  function P(a, b, c, d) {
    var e;

    try {
      a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));
    } catch (a) {
      c.apply(void 0, [a]);
    }
  }

  r.extend({
    Deferred: function Deferred(b) {
      var c = [["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2], ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]],
          d = "pending",
          e = {
        state: function state() {
          return d;
        },
        always: function always() {
          return f.done(arguments).fail(arguments), this;
        },
        "catch": function _catch(a) {
          return e.then(null, a);
        },
        pipe: function pipe() {
          var a = arguments;
          return r.Deferred(function (b) {
            r.each(c, function (c, d) {
              var e = r.isFunction(a[d[4]]) && a[d[4]];
              f[d[1]](function () {
                var a = e && e.apply(this, arguments);
                a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
              });
            }), a = null;
          }).promise();
        },
        then: function then(b, d, e) {
          var f = 0;

          function g(b, c, d, e) {
            return function () {
              var h = this,
                  i = arguments,
                  j = function j() {
                var a, j;

                if (!(b < f)) {
                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError("Thenable self-resolution");
                  j = a && ("object" == _typeof(a) || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));
                }
              },
                  k = e ? j : function () {
                try {
                  j();
                } catch (a) {
                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i));
                }
              };

              b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));
            };
          }

          return r.Deferred(function (a) {
            c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O));
          }).promise();
        },
        promise: function promise(a) {
          return null != a ? r.extend(a, e) : e;
        }
      },
          f = {};
      return r.each(c, function (a, b) {
        var g = b[2],
            h = b[5];
        e[b[1]] = g.add, h && g.add(function () {
          d = h;
        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {
          return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
        }, f[b[0] + "With"] = g.fireWith;
      }), e.promise(f), b && b.call(f, f), f;
    },
    when: function when(a) {
      var b = arguments.length,
          c = b,
          d = Array(c),
          e = f.call(arguments),
          g = r.Deferred(),
          h = function h(a) {
        return function (c) {
          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);
        };
      };

      if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), "pending" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();

      while (c--) {
        P(e[c], h(c), g.reject);
      }

      return g.promise();
    }
  });
  var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
  r.Deferred.exceptionHook = function (b, c) {
    a.console && a.console.warn && b && Q.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c);
  }, r.readyException = function (b) {
    a.setTimeout(function () {
      throw b;
    });
  };
  var R = r.Deferred();
  r.fn.ready = function (a) {
    return R.then(a)["catch"](function (a) {
      r.readyException(a);
    }), this;
  }, r.extend({
    isReady: !1,
    readyWait: 1,
    ready: function ready(a) {
      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]));
    }
  }), r.ready.then = R.then;

  function S() {
    d.removeEventListener("DOMContentLoaded", S), a.removeEventListener("load", S), r.ready();
  }

  "complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", S), a.addEventListener("load", S));

  var T = function T(a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;

    if ("object" === r.type(c)) {
      e = !0;

      for (h in c) {
        T(a, b, h, c[h], !0, f, g);
      }
    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {
      return j.call(r(a), c);
    })), b)) for (; h < i; h++) {
      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
    }

    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  },
      U = function U(a) {
    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
  };

  function V() {
    this.expando = r.expando + V.uid++;
  }

  V.uid = 1, V.prototype = {
    cache: function cache(a) {
      var b = a[this.expando];
      return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {
        value: b,
        configurable: !0
      }))), b;
    },
    set: function set(a, b, c) {
      var d,
          e = this.cache(a);
      if ("string" == typeof b) e[r.camelCase(b)] = c;else for (d in b) {
        e[r.camelCase(d)] = b[d];
      }
      return e;
    },
    get: function get(a, b) {
      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];
    },
    access: function access(a, b, c) {
      return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
    },
    remove: function remove(a, b) {
      var c,
          d = a[this.expando];

      if (void 0 !== d) {
        if (void 0 !== b) {
          Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;

          while (c--) {
            delete d[b[c]];
          }
        }

        (void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);
      }
    },
    hasData: function hasData(a) {
      var b = a[this.expando];
      return void 0 !== b && !r.isEmptyObject(b);
    }
  };
  var W = new V(),
      X = new V(),
      Y = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      Z = /[A-Z]/g;

  function $(a) {
    return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : Y.test(a) ? JSON.parse(a) : a);
  }

  function _(a, b, c) {
    var d;
    if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(Z, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
      try {
        c = $(c);
      } catch (e) {}

      X.set(a, b, c);
    } else c = void 0;
    return c;
  }

  r.extend({
    hasData: function hasData(a) {
      return X.hasData(a) || W.hasData(a);
    },
    data: function data(a, b, c) {
      return X.access(a, b, c);
    },
    removeData: function removeData(a, b) {
      X.remove(a, b);
    },
    _data: function _data(a, b, c) {
      return W.access(a, b, c);
    },
    _removeData: function _removeData(a, b) {
      W.remove(a, b);
    }
  }), r.fn.extend({
    data: function data(a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;

      if (void 0 === a) {
        if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, "hasDataAttrs"))) {
          c = g.length;

          while (c--) {
            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])));
          }

          W.set(f, "hasDataAttrs", !0);
        }

        return e;
      }

      return "object" == _typeof(a) ? this.each(function () {
        X.set(this, a);
      }) : T(this, function (b) {
        var c;

        if (f && void 0 === b) {
          if (c = X.get(f, a), void 0 !== c) return c;
          if (c = _(f, a), void 0 !== c) return c;
        } else this.each(function () {
          X.set(this, a, b);
        });
      }, null, b, arguments.length > 1, null, !0);
    },
    removeData: function removeData(a) {
      return this.each(function () {
        X.remove(this, a);
      });
    }
  }), r.extend({
    queue: function queue(a, b, c) {
      var d;
      if (a) return b = (b || "fx") + "queue", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || [];
    },
    dequeue: function dequeue(a, b) {
      b = b || "fx";

      var c = r.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = r._queueHooks(a, b),
          g = function g() {
        r.dequeue(a, b);
      };

      "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    },
    _queueHooks: function _queueHooks(a, b) {
      var c = b + "queueHooks";
      return W.get(a, c) || W.access(a, c, {
        empty: r.Callbacks("once memory").add(function () {
          W.remove(a, [b + "queue", c]);
        })
      });
    }
  }), r.fn.extend({
    queue: function queue(a, b) {
      var c = 2;
      return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {
        var c = r.queue(this, a, b);
        r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a);
      });
    },
    dequeue: function dequeue(a) {
      return this.each(function () {
        r.dequeue(this, a);
      });
    },
    clearQueue: function clearQueue(a) {
      return this.queue(a || "fx", []);
    },
    promise: function promise(a, b) {
      var c,
          d = 1,
          e = r.Deferred(),
          f = this,
          g = this.length,
          h = function h() {
        --d || e.resolveWith(f, [f]);
      };

      "string" != typeof a && (b = a, a = void 0), a = a || "fx";

      while (g--) {
        c = W.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
      }

      return h(), e.promise(b);
    }
  });

  var aa = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      ba = new RegExp("^(?:([+-])=|)(" + aa + ")([a-z%]*)$", "i"),
      ca = ["Top", "Right", "Bottom", "Left"],
      da = function da(a, b) {
    return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display");
  },
      ea = function ea(a, b, c, d) {
    var e,
        f,
        g = {};

    for (f in b) {
      g[f] = a.style[f], a.style[f] = b[f];
    }

    e = c.apply(a, d || []);

    for (f in b) {
      a.style[f] = g[f];
    }

    return e;
  };

  function fa(a, b, c, d) {
    var e,
        f = 1,
        g = 20,
        h = d ? function () {
      return d.cur();
    } : function () {
      return r.css(a, b, "");
    },
        i = h(),
        j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
        k = (r.cssNumber[b] || "px" !== j && +i) && ba.exec(r.css(a, b));

    if (k && k[3] !== j) {
      j = j || k[3], c = c || [], k = +i || 1;

      do {
        f = f || ".5", k /= f, r.style(a, b, k + j);
      } while (f !== (f = h() / i) && 1 !== f && --g);
    }

    return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;
  }

  var ga = {};

  function ha(a) {
    var b,
        c = a.ownerDocument,
        d = a.nodeName,
        e = ga[d];
    return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), ga[d] = e, e);
  }

  function ia(a, b) {
    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) {
      d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = W.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && da(d) && (e[f] = ha(d))) : "none" !== c && (e[f] = "none", W.set(d, "display", c)));
    }

    for (f = 0; f < g; f++) {
      null != e[f] && (a[f].style.display = e[f]);
    }

    return a;
  }

  r.fn.extend({
    show: function show() {
      return ia(this, !0);
    },
    hide: function hide() {
      return ia(this);
    },
    toggle: function toggle(a) {
      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
        da(this) ? r(this).show() : r(this).hide();
      });
    }
  });
  var ja = /^(?:checkbox|radio)$/i,
      ka = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
      la = /^$|\/(?:java|ecma)script/i,
      ma = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;

  function na(a, b) {
    var c;
    return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c;
  }

  function oa(a, b) {
    for (var c = 0, d = a.length; c < d; c++) {
      W.set(a[c], "globalEval", !b || W.get(b[c], "globalEval"));
    }
  }

  var pa = /<|&#?\w+;/;

  function qa(a, b, c, d, e) {
    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) {
      if (f = a[n], f || 0 === f) if ("object" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (pa.test(f)) {
        g = g || l.appendChild(b.createElement("div")), h = (ka.exec(f) || ["", ""])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];

        while (k--) {
          g = g.lastChild;
        }

        r.merge(m, g.childNodes), g = l.firstChild, g.textContent = "";
      } else m.push(b.createTextNode(f));
    }

    l.textContent = "", n = 0;

    while (f = m[n++]) {
      if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), "script"), j && oa(g), c) {
        k = 0;

        while (f = g[k++]) {
          la.test(f.type || "") && c.push(f);
        }
      }
    }

    return l;
  }

  !function () {
    var a = d.createDocumentFragment(),
        b = a.appendChild(d.createElement("div")),
        c = d.createElement("input");
    c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();
  var ra = d.documentElement,
      sa = /^key/,
      ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      ua = /^([^.]*)(?:\.(.+)|)/;

  function va() {
    return !0;
  }

  function wa() {
    return !1;
  }

  function xa() {
    try {
      return d.activeElement;
    } catch (a) {}
  }

  function ya(a, b, c, d, e, f) {
    var g, h;

    if ("object" == _typeof(b)) {
      "string" != typeof c && (d = d || c, c = void 0);

      for (h in b) {
        ya(a, h, c, d, b[h], f);
      }

      return a;
    }

    if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = wa;else if (!e) return a;
    return 1 === f && (g = e, e = function e(a) {
      return r().off(a), g.apply(this, arguments);
    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {
      r.event.add(this, b, e, d, c);
    });
  }

  r.event = {
    global: {},
    add: function add(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = W.get(a);

      if (q) {
        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {
          return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(L) || [""], j = b.length;

        while (j--) {
          h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({
            type: n,
            origType: p,
            data: d,
            handler: c,
            guid: c.guid,
            selector: e,
            needsContext: e && r.expr.match.needsContext.test(e),
            namespace: o.join(".")
          }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);
        }
      }
    },
    remove: function remove(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = W.hasData(a) && W.get(a);

      if (q && (i = q.events)) {
        b = (b || "").match(L) || [""], j = b.length;

        while (j--) {
          if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
            l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;

            while (f--) {
              k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
            }

            g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);
          } else for (n in i) {
            r.event.remove(a, n + b[j], c, d, !0);
          }
        }

        r.isEmptyObject(i) && W.remove(a, "handle events");
      }
    },
    dispatch: function dispatch(a) {
      var b = r.event.fix(a),
          c,
          d,
          e,
          f,
          g,
          h,
          i = new Array(arguments.length),
          j = (W.get(this, "events") || {})[b.type] || [],
          k = r.event.special[b.type] || {};

      for (i[0] = b, c = 1; c < arguments.length; c++) {
        i[c] = arguments[c];
      }

      if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
        h = r.event.handlers.call(this, b, j), c = 0;

        while ((f = h[c++]) && !b.isPropagationStopped()) {
          b.currentTarget = f.elem, d = 0;

          while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) {
            b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));
          }
        }

        return k.postDispatch && k.postDispatch.call(this, b), b.result;
      }
    },
    handlers: function handlers(a, b) {
      var c,
          d,
          e,
          f,
          g,
          h = [],
          i = b.delegateCount,
          j = a.target;
      if (i && j.nodeType && !("click" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) {
        if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
          for (f = [], g = {}, c = 0; c < i; c++) {
            d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);
          }

          f.length && h.push({
            elem: j,
            handlers: f
          });
        }
      }
      return j = this, i < b.length && h.push({
        elem: j,
        handlers: b.slice(i)
      }), h;
    },
    addProp: function addProp(a, b) {
      Object.defineProperty(r.Event.prototype, a, {
        enumerable: !0,
        configurable: !0,
        get: r.isFunction(b) ? function () {
          if (this.originalEvent) return b(this.originalEvent);
        } : function () {
          if (this.originalEvent) return this.originalEvent[a];
        },
        set: function set(b) {
          Object.defineProperty(this, a, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: b
          });
        }
      });
    },
    fix: function fix(a) {
      return a[r.expando] ? a : new r.Event(a);
    },
    special: {
      load: {
        noBubble: !0
      },
      focus: {
        trigger: function trigger() {
          if (this !== xa() && this.focus) return this.focus(), !1;
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          if (this === xa() && this.blur) return this.blur(), !1;
        },
        delegateType: "focusout"
      },
      click: {
        trigger: function trigger() {
          if ("checkbox" === this.type && this.click && B(this, "input")) return this.click(), !1;
        },
        _default: function _default(a) {
          return B(a.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        }
      }
    }
  }, r.removeEvent = function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c);
  }, r.Event = function (a, b) {
    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);
  }, r.Event.prototype = {
    constructor: r.Event,
    isDefaultPrevented: wa,
    isPropagationStopped: wa,
    isImmediatePropagationStopped: wa,
    isSimulated: !1,
    preventDefault: function preventDefault() {
      var a = this.originalEvent;
      this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault();
    },
    stopPropagation: function stopPropagation() {
      var a = this.originalEvent;
      this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation();
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var a = this.originalEvent;
      this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();
    }
  }, r.each({
    altKey: !0,
    bubbles: !0,
    cancelable: !0,
    changedTouches: !0,
    ctrlKey: !0,
    detail: !0,
    eventPhase: !0,
    metaKey: !0,
    pageX: !0,
    pageY: !0,
    shiftKey: !0,
    view: !0,
    "char": !0,
    charCode: !0,
    key: !0,
    keyCode: !0,
    button: !0,
    buttons: !0,
    clientX: !0,
    clientY: !0,
    offsetX: !0,
    offsetY: !0,
    pointerId: !0,
    pointerType: !0,
    screenX: !0,
    screenY: !0,
    targetTouches: !0,
    toElement: !0,
    touches: !0,
    which: function which(a) {
      var b = a.button;
      return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;
    }
  }, r.event.addProp), r.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (a, b) {
    r.event.special[a] = {
      delegateType: b,
      bindType: b,
      handle: function handle(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;
        return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      }
    };
  }), r.fn.extend({
    on: function on(a, b, c, d) {
      return ya(this, a, b, c, d);
    },
    one: function one(a, b, c, d) {
      return ya(this, a, b, c, d, 1);
    },
    off: function off(a, b, c) {
      var d, e;
      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;

      if ("object" == _typeof(a)) {
        for (e in a) {
          this.off(e, b, a[e]);
        }

        return this;
      }

      return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function () {
        r.event.remove(this, a, c, b);
      });
    }
  });
  var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
      Aa = /<script|<style|<link/i,
      Ba = /checked\s*(?:[^=]|=\s*.checked.)/i,
      Ca = /^true\/(.*)/,
      Da = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

  function Ea(a, b) {
    return B(a, "table") && B(11 !== b.nodeType ? b : b.firstChild, "tr") ? r(">tbody", a)[0] || a : a;
  }

  function Fa(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }

  function Ga(a) {
    var b = Ca.exec(a.type);
    return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }

  function Ha(a, b) {
    var c, d, e, f, g, h, i, j;

    if (1 === b.nodeType) {
      if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};

        for (e in j) {
          for (c = 0, d = j[e].length; c < d; c++) {
            r.event.add(b, e, j[e][c]);
          }
        }
      }

      X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i));
    }
  }

  function Ia(a, b) {
    var c = b.nodeName.toLowerCase();
    "input" === c && ja.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue);
  }

  function Ja(a, b, c, d) {
    b = g.apply([], b);
    var e,
        f,
        h,
        i,
        j,
        k,
        l = 0,
        m = a.length,
        n = m - 1,
        q = b[0],
        s = r.isFunction(q);
    if (s || m > 1 && "string" == typeof q && !o.checkClone && Ba.test(q)) return a.each(function (e) {
      var f = a.eq(e);
      s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d);
    });

    if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
      for (h = r.map(na(e, "script"), Fa), i = h.length; l < m; l++) {
        j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, "script"))), c.call(a[l], j, l);
      }

      if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) {
        j = h[l], la.test(j.type || "") && !W.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, ""), k));
      }
    }

    return a;
  }

  function Ka(a, b, c) {
    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) {
      c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, "script")), d.parentNode.removeChild(d));
    }

    return a;
  }

  r.extend({
    htmlPrefilter: function htmlPrefilter(a) {
      return a.replace(za, "<$1></$2>");
    },
    clone: function clone(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = r.contains(a.ownerDocument, a);
      if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) {
        Ia(f[d], g[d]);
      }
      if (b) if (c) for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) {
        Ha(f[d], g[d]);
      } else Ha(a, h);
      return g = na(h, "script"), g.length > 0 && oa(g, !i && na(a, "script")), h;
    },
    cleanData: function cleanData(a) {
      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) {
        if (U(c)) {
          if (b = c[W.expando]) {
            if (b.events) for (d in b.events) {
              e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);
            }
            c[W.expando] = void 0;
          }

          c[X.expando] && (c[X.expando] = void 0);
        }
      }
    }
  }), r.fn.extend({
    detach: function detach(a) {
      return Ka(this, a, !0);
    },
    remove: function remove(a) {
      return Ka(this, a);
    },
    text: function text(a) {
      return T(this, function (a) {
        return void 0 === a ? r.text(this) : this.empty().each(function () {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);
        });
      }, null, a, arguments.length);
    },
    append: function append() {
      return Ja(this, arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Ea(this, a);
          b.appendChild(a);
        }
      });
    },
    prepend: function prepend() {
      return Ja(this, arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Ea(this, a);
          b.insertBefore(a, b.firstChild);
        }
      });
    },
    before: function before() {
      return Ja(this, arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    },
    after: function after() {
      return Ja(this, arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    },
    empty: function empty() {
      for (var a, b = 0; null != (a = this[b]); b++) {
        1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = "");
      }

      return this;
    },
    clone: function clone(a, b) {
      return a = null != a && a, b = null == b ? a : b, this.map(function () {
        return r.clone(this, a, b);
      });
    },
    html: function html(a) {
      return T(this, function (a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;
        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;

        if ("string" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = r.htmlPrefilter(a);

          try {
            for (; c < d; c++) {
              b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a);
            }

            b = 0;
          } catch (e) {}
        }

        b && this.empty().append(a);
      }, null, a, arguments.length);
    },
    replaceWith: function replaceWith() {
      var a = [];
      return Ja(this, arguments, function (b) {
        var c = this.parentNode;
        r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this));
      }, a);
    }
  }), r.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (a, b) {
    r.fn[a] = function (a) {
      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) {
        c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());
      }

      return this.pushStack(d);
    };
  });

  var La = /^margin/,
      Ma = new RegExp("^(" + aa + ")(?!px)[a-z%]+$", "i"),
      Na = function Na(b) {
    var c = b.ownerDocument.defaultView;
    return c && c.opener || (c = a), c.getComputedStyle(b);
  };

  !function () {
    function b() {
      if (i) {
        i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", ra.appendChild(h);
        var b = a.getComputedStyle(i);
        c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, ra.removeChild(h), i = null;
      }
    }

    var c,
        e,
        f,
        g,
        h = d.createElement("div"),
        i = d.createElement("div");
    i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, {
      pixelPosition: function pixelPosition() {
        return b(), c;
      },
      boxSizingReliable: function boxSizingReliable() {
        return b(), e;
      },
      pixelMarginRight: function pixelMarginRight() {
        return b(), f;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        return b(), g;
      }
    }));
  }();

  function Oa(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.style;
    return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
  }

  function Pa(a, b) {
    return {
      get: function get() {
        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
      }
    };
  }

  var Qa = /^(none|table(?!-c[ea]).+)/,
      Ra = /^--/,
      Sa = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      Ta = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      Ua = ["Webkit", "Moz", "ms"],
      Va = d.createElement("div").style;

  function Wa(a) {
    if (a in Va) return a;
    var b = a[0].toUpperCase() + a.slice(1),
        c = Ua.length;

    while (c--) {
      if (a = Ua[c] + b, a in Va) return a;
    }
  }

  function Xa(a) {
    var b = r.cssProps[a];
    return b || (b = r.cssProps[a] = Wa(a) || a), b;
  }

  function Ya(a, b, c) {
    var d = ba.exec(b);
    return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b;
  }

  function Za(a, b, c, d, e) {
    var f,
        g = 0;

    for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2) {
      "margin" === c && (g += r.css(a, c + ca[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ca[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ca[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ca[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ca[f] + "Width", !0, e)));
    }

    return g;
  }

  function $a(a, b, c) {
    var d,
        e = Na(a),
        f = Oa(a, b, e),
        g = "border-box" === r.css(a, "boxSizing", !1, e);
    return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), "auto" === f && (f = a["offset" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? "border" : "content"), d, e) + "px");
  }

  r.extend({
    cssHooks: {
      opacity: {
        get: function get(a, b) {
          if (b) {
            var c = Oa(a, "opacity");
            return "" === c ? "1" : c;
          }
        }
      }
    },
    cssNumber: {
      animationIterationCount: !0,
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0
    },
    cssProps: {
      "float": "cssFloat"
    },
    style: function style(a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
            f,
            g,
            h = r.camelCase(b),
            i = Ra.test(b),
            j = a.style;
        return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = _typeof(c), "string" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (j[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0);
      }
    },
    css: function css(a, b, c, d) {
      var e,
          f,
          g,
          h = r.camelCase(b),
          i = Ra.test(b);
      return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), "normal" === e && b in Ta && (e = Ta[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;
    }
  }), r.each(["height", "width"], function (a, b) {
    r.cssHooks[b] = {
      get: function get(a, c, d) {
        if (c) return !Qa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function () {
          return $a(a, b, d);
        });
      },
      set: function set(a, c, d) {
        var e,
            f = d && Na(a),
            g = d && Za(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);
        return g && (e = ba.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g);
      }
    };
  }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function (a, b) {
    if (b) return (parseFloat(Oa(a, "marginLeft")) || a.getBoundingClientRect().left - ea(a, {
      marginLeft: 0
    }, function () {
      return a.getBoundingClientRect().left;
    })) + "px";
  }), r.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (a, b) {
    r.cssHooks[a + b] = {
      expand: function expand(c) {
        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) {
          e[a + ca[d] + b] = f[d] || f[d - 2] || f[0];
        }

        return e;
      }
    }, La.test(a) || (r.cssHooks[a + b].set = Ya);
  }), r.fn.extend({
    css: function css(a, b) {
      return T(this, function (a, b, c) {
        var d,
            e,
            f = {},
            g = 0;

        if (Array.isArray(b)) {
          for (d = Na(a), e = b.length; g < e; g++) {
            f[b[g]] = r.css(a, b[g], !1, d);
          }

          return f;
        }

        return void 0 !== c ? r.style(a, b, c) : r.css(a, b);
      }, a, b, arguments.length > 1);
    }
  }), r.fn.delay = function (b, c) {
    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) {
      var e = a.setTimeout(c, b);

      d.stop = function () {
        a.clearTimeout(e);
      };
    });
  }, function () {
    var a = d.createElement("input"),
        b = d.createElement("select"),
        c = b.appendChild(d.createElement("option"));
    a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value;
  }();

  var _a,
      ab = r.expr.attrHandle;

  r.fn.extend({
    attr: function attr(a, b) {
      return T(this, r.attr, a, b, arguments.length > 1);
    },
    removeAttr: function removeAttr(a) {
      return this.each(function () {
        r.removeAttr(this, a);
      });
    }
  }), r.extend({
    attr: function attr(a, b, c) {
      var d,
          e,
          f = a.nodeType;
      if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? _a : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));
    },
    attrHooks: {
      type: {
        set: function set(a, b) {
          if (!o.radioValue && "radio" === b && B(a, "input")) {
            var c = a.value;
            return a.setAttribute("type", b), c && (a.value = c), b;
          }
        }
      }
    },
    removeAttr: function removeAttr(a, b) {
      var c,
          d = 0,
          e = b && b.match(L);
      if (e && 1 === a.nodeType) while (c = e[d++]) {
        a.removeAttribute(c);
      }
    }
  }), _a = {
    set: function set(a, b, c) {
      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;
    }
  }, r.each(r.expr.match.bool.source.match(/\w+/g), function (a, b) {
    var c = ab[b] || r.find.attr;

    ab[b] = function (a, b, d) {
      var e,
          f,
          g = b.toLowerCase();
      return d || (f = ab[g], ab[g] = e, e = null != c(a, b, d) ? g : null, ab[g] = f), e;
    };
  });
  var bb = /^(?:input|select|textarea|button)$/i,
      cb = /^(?:a|area)$/i;
  r.fn.extend({
    prop: function prop(a, b) {
      return T(this, r.prop, a, b, arguments.length > 1);
    },
    removeProp: function removeProp(a) {
      return this.each(function () {
        delete this[r.propFix[a] || a];
      });
    }
  }), r.extend({
    prop: function prop(a, b, c) {
      var d,
          e,
          f = a.nodeType;
      if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    },
    propHooks: {
      tabIndex: {
        get: function get(a) {
          var b = r.find.attr(a, "tabindex");
          return b ? parseInt(b, 10) : bb.test(a.nodeName) || cb.test(a.nodeName) && a.href ? 0 : -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }), o.optSelected || (r.propHooks.selected = {
    get: function get(a) {
      var b = a.parentNode;
      return b && b.parentNode && b.parentNode.selectedIndex, null;
    },
    set: function set(a) {
      var b = a.parentNode;
      b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
    }
  }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    r.propFix[this.toLowerCase()] = this;
  });

  function db(a) {
    var b = a.match(L) || [];
    return b.join(" ");
  }

  function eb(a) {
    return a.getAttribute && a.getAttribute("class") || "";
  }

  r.fn.extend({
    addClass: function addClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;
      if (r.isFunction(a)) return this.each(function (b) {
        r(this).addClass(a.call(this, b, eb(this)));
      });

      if ("string" == typeof a && a) {
        b = a.match(L) || [];

        while (c = this[i++]) {
          if (e = eb(c), d = 1 === c.nodeType && " " + db(e) + " ") {
            g = 0;

            while (f = b[g++]) {
              d.indexOf(" " + f + " ") < 0 && (d += f + " ");
            }

            h = db(d), e !== h && c.setAttribute("class", h);
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;
      if (r.isFunction(a)) return this.each(function (b) {
        r(this).removeClass(a.call(this, b, eb(this)));
      });
      if (!arguments.length) return this.attr("class", "");

      if ("string" == typeof a && a) {
        b = a.match(L) || [];

        while (c = this[i++]) {
          if (e = eb(c), d = 1 === c.nodeType && " " + db(e) + " ") {
            g = 0;

            while (f = b[g++]) {
              while (d.indexOf(" " + f + " ") > -1) {
                d = d.replace(" " + f + " ", " ");
              }
            }

            h = db(d), e !== h && c.setAttribute("class", h);
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(a, b) {
      var c = _typeof(a);

      return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {
        r(this).toggleClass(a.call(this, c, eb(this), b), b);
      }) : this.each(function () {
        var b, d, e, f;

        if ("string" === c) {
          d = 0, e = r(this), f = a.match(L) || [];

          while (b = f[d++]) {
            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
          }
        } else void 0 !== a && "boolean" !== c || (b = eb(this), b && W.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : W.get(this, "__className__") || ""));
      });
    },
    hasClass: function hasClass(a) {
      var b,
          c,
          d = 0;
      b = " " + a + " ";

      while (c = this[d++]) {
        if (1 === c.nodeType && (" " + db(eb(c)) + " ").indexOf(b) > -1) return !0;
      }

      return !1;
    }
  });
  var fb = /\r/g;
  r.fn.extend({
    val: function val(a) {
      var b,
          c,
          d,
          e = this[0];
      {
        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {
          var e;
          1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = r.map(e, function (a) {
            return null == a ? "" : a + "";
          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
        });
        if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(fb, "") : null == c ? "" : c);
      }
    }
  }), r.extend({
    valHooks: {
      option: {
        get: function get(a) {
          var b = r.find.attr(a, "value");
          return null != b ? b : db(r.text(a));
        }
      },
      select: {
        get: function get(a) {
          var b,
              c,
              d,
              e = a.options,
              f = a.selectedIndex,
              g = "select-one" === a.type,
              h = g ? null : [],
              i = g ? f + 1 : e.length;

          for (d = f < 0 ? i : g ? f : 0; d < i; d++) {
            if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, "optgroup"))) {
              if (b = r(c).val(), g) return b;
              h.push(b);
            }
          }

          return h;
        },
        set: function set(a, b) {
          var c,
              d,
              e = a.options,
              f = r.makeArray(b),
              g = e.length;

          while (g--) {
            d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);
          }

          return c || (a.selectedIndex = -1), f;
        }
      }
    }
  }), r.each(["radio", "checkbox"], function () {
    r.valHooks[this] = {
      set: function set(a, b) {
        if (Array.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;
      }
    }, o.checkOn || (r.valHooks[this].get = function (a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  });
  var gb = /^(?:focusinfocus|focusoutblur)$/;
  r.extend(r.event, {
    trigger: function trigger(b, c, e, f) {
      var g,
          h,
          i,
          j,
          k,
          m,
          n,
          o = [e || d],
          p = l.call(b, "type") ? b.type : b,
          q = l.call(b, "namespace") ? b.namespace.split(".") : [];

      if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !gb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == _typeof(b) && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
        if (!f && !n.noBubble && !r.isWindow(e)) {
          for (j = n.delegateType || p, gb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) {
            o.push(h), i = h;
          }

          i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);
        }

        g = 0;

        while ((h = o[g++]) && !b.isPropagationStopped()) {
          b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, "events") || {})[b.type] && W.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());
        }

        return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;
      }
    },
    simulate: function simulate(a, b, c) {
      var d = r.extend(new r.Event(), c, {
        type: a,
        isSimulated: !0
      });
      r.event.trigger(d, null, b);
    }
  }), r.fn.extend({
    trigger: function trigger(a, b) {
      return this.each(function () {
        r.event.trigger(a, b, this);
      });
    },
    triggerHandler: function triggerHandler(a, b) {
      var c = this[0];
      if (c) return r.event.trigger(a, b, c, !0);
    }
  }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (a, b) {
    r.fn[b] = function (a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), r.fn.extend({
    hover: function hover(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    }
  }), o.focusin = "onfocusin" in a, o.focusin || r.each({
    focus: "focusin",
    blur: "focusout"
  }, function (a, b) {
    var c = function c(a) {
      r.event.simulate(b, a.target, r.event.fix(a));
    };

    r.event.special[b] = {
      setup: function setup() {
        var d = this.ownerDocument || this,
            e = W.access(d, b);
        e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1);
      },
      teardown: function teardown() {
        var d = this.ownerDocument || this,
            e = W.access(d, b) - 1;
        e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b));
      }
    };
  });
  var hb = /\[\]$/,
      ib = /\r?\n/g,
      jb = /^(?:submit|button|image|reset|file)$/i,
      kb = /^(?:input|select|textarea|keygen)/i;

  function lb(a, b, c, d) {
    var e;
    if (Array.isArray(b)) r.each(b, function (b, e) {
      c || hb.test(a) ? d(a, e) : lb(a + "[" + ("object" == _typeof(e) && null != e ? b : "") + "]", e, c, d);
    });else if (c || "object" !== r.type(b)) d(a, b);else for (e in b) {
      lb(a + "[" + e + "]", b[e], c, d);
    }
  }

  r.param = function (a, b) {
    var c,
        d = [],
        e = function e(a, b) {
      var c = r.isFunction(b) ? b() : b;
      d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
    };

    if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {
      e(this.name, this.value);
    });else for (c in a) {
      lb(c, a[c], b, e);
    }
    return d.join("&");
  }, r.fn.extend({
    serialize: function serialize() {
      return r.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        var a = r.prop(this, "elements");
        return a ? r.makeArray(a) : this;
      }).filter(function () {
        var a = this.type;
        return this.name && !r(this).is(":disabled") && kb.test(this.nodeName) && !jb.test(a) && (this.checked || !ja.test(a));
      }).map(function (a, b) {
        var c = r(this).val();
        return null == c ? null : Array.isArray(c) ? r.map(c, function (a) {
          return {
            name: b.name,
            value: a.replace(ib, "\r\n")
          };
        }) : {
          name: b.name,
          value: c.replace(ib, "\r\n")
        };
      }).get();
    }
  }), r.fn.extend({
    wrapAll: function wrapAll(a) {
      var b;
      return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
        var a = this;

        while (a.firstElementChild) {
          a = a.firstElementChild;
        }

        return a;
      }).append(this)), this;
    },
    wrapInner: function wrapInner(a) {
      return r.isFunction(a) ? this.each(function (b) {
        r(this).wrapInner(a.call(this, b));
      }) : this.each(function () {
        var b = r(this),
            c = b.contents();
        c.length ? c.wrapAll(a) : b.append(a);
      });
    },
    wrap: function wrap(a) {
      var b = r.isFunction(a);
      return this.each(function (c) {
        r(this).wrapAll(b ? a.call(this, c) : a);
      });
    },
    unwrap: function unwrap(a) {
      return this.parent(a).not("body").each(function () {
        r(this).replaceWith(this.childNodes);
      }), this;
    }
  }), r.expr.pseudos.hidden = function (a) {
    return !r.expr.pseudos.visible(a);
  }, r.expr.pseudos.visible = function (a) {
    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
  }, o.createHTMLDocument = function () {
    var a = d.implementation.createHTMLDocument("").body;
    return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length;
  }(), r.parseHTML = function (a, b, c) {
    if ("string" != typeof a) return [];
    "boolean" == typeof b && (c = b, b = !1);
    var e, f, g;
    return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));
  }, r.offset = {
    setOffset: function setOffset(a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = r.css(a, "position"),
          l = r(a),
          m = {};
      "static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
    }
  }, r.fn.extend({
    offset: function offset(a) {
      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
        r.offset.setOffset(this, a, b);
      });
      var b,
          c,
          d,
          e,
          f = this[0];
      if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, {
        top: d.top + e.pageYOffset - c.clientTop,
        left: d.left + e.pageXOffset - c.clientLeft
      }) : {
        top: 0,
        left: 0
      };
    },
    position: function position() {
      if (this[0]) {
        var a,
            b,
            c = this[0],
            d = {
          top: 0,
          left: 0
        };
        return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], "html") || (d = a.offset()), d = {
          top: d.top + r.css(a[0], "borderTopWidth", !0),
          left: d.left + r.css(a[0], "borderLeftWidth", !0)
        }), {
          top: b.top - d.top - r.css(c, "marginTop", !0),
          left: b.left - d.left - r.css(c, "marginLeft", !0)
        };
      }
    },
    offsetParent: function offsetParent() {
      return this.map(function () {
        var a = this.offsetParent;

        while (a && "static" === r.css(a, "position")) {
          a = a.offsetParent;
        }

        return a || ra;
      });
    }
  }), r.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (a, b) {
    var c = "pageYOffset" === b;

    r.fn[a] = function (d) {
      return T(this, function (a, d, e) {
        var f;
        return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);
      }, a, d, arguments.length);
    };
  }), r.each(["top", "left"], function (a, b) {
    r.cssHooks[b] = Pa(o.pixelPosition, function (a, c) {
      if (c) return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + "px" : c;
    });
  }), r.each({
    Height: "height",
    Width: "width"
  }, function (a, b) {
    r.each({
      padding: "inner" + a,
      content: b,
      "": "outer" + a
    }, function (c, d) {
      r.fn[d] = function (e, f) {
        var g = arguments.length && (c || "boolean" != typeof e),
            h = c || (e === !0 || f === !0 ? "margin" : "border");
        return T(this, function (b, c, e) {
          var f;
          return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);
        }, b, g ? e : void 0, g);
      };
    });
  }), r.fn.extend({
    bind: function bind(a, b, c) {
      return this.on(a, null, b, c);
    },
    unbind: function unbind(a, b) {
      return this.off(a, null, b);
    },
    delegate: function delegate(a, b, c, d) {
      return this.on(b, a, c, d);
    },
    undelegate: function undelegate(a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    }
  }), r.holdReady = function (a) {
    a ? r.readyWait++ : r.ready(!0);
  }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B, "function" == typeof define && define.amd && define("jquery", [], function () {
    return r;
  });
  var mb = a.jQuery,
      nb = a.$;
  return r.noConflict = function (b) {
    return a.$ === r && (a.$ = nb), b && a.jQuery === r && (a.jQuery = mb), r;
  }, b || (a.jQuery = a.$ = r), r;
});
/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */

;

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module. 
    define(['jquery'], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // Node/CommonJS 
    factory(require('jquery'));
  } else {
    // Browser globals 
    factory(window.jQuery || window.Zepto);
  }
})(function ($) {
  /*>>core*/

  /**
   * 
   * Magnific Popup Core JS file
   * 
   */

  /**
   * Private static constants
   */
  var CLOSE_EVENT = 'Close',
      BEFORE_CLOSE_EVENT = 'BeforeClose',
      AFTER_CLOSE_EVENT = 'AfterClose',
      BEFORE_APPEND_EVENT = 'BeforeAppend',
      MARKUP_PARSE_EVENT = 'MarkupParse',
      OPEN_EVENT = 'Open',
      CHANGE_EVENT = 'Change',
      NS = 'mfp',
      EVENT_NS = '.' + NS,
      READY_CLASS = 'mfp-ready',
      REMOVING_CLASS = 'mfp-removing',
      PREVENT_CLOSE_CLASS = 'mfp-prevent-close';
  /**
   * Private vars 
   */

  /*jshint -W079 */

  var mfp,
      // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
  MagnificPopup = function MagnificPopup() {},
      _isJQ = !!window.jQuery,
      _prevStatus,
      _window = $(window),
      _document,
      _prevContentType,
      _wrapClasses,
      _currPopupType;
  /**
   * Private functions
   */


  var _mfpOn = function _mfpOn(name, f) {
    mfp.ev.on(NS + name + EVENT_NS, f);
  },
      _getEl = function _getEl(className, appendTo, html, raw) {
    var el = document.createElement('div');
    el.className = 'mfp-' + className;

    if (html) {
      el.innerHTML = html;
    }

    if (!raw) {
      el = $(el);

      if (appendTo) {
        el.appendTo(appendTo);
      }
    } else if (appendTo) {
      appendTo.appendChild(el);
    }

    return el;
  },
      _mfpTrigger = function _mfpTrigger(e, data) {
    mfp.ev.triggerHandler(NS + e, data);

    if (mfp.st.callbacks) {
      // converts "mfpEventName" to "eventName" callback and triggers it if it's present
      e = e.charAt(0).toLowerCase() + e.slice(1);

      if (mfp.st.callbacks[e]) {
        mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
      }
    }
  },
      _getCloseBtn = function _getCloseBtn(type) {
    if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
      mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
      _currPopupType = type;
    }

    return mfp.currTemplate.closeBtn;
  },
      // Initialize Magnific Popup only when called at least once
  _checkInstance = function _checkInstance() {
    if (!$.magnificPopup.instance) {
      /*jshint -W020 */
      mfp = new MagnificPopup();
      mfp.init();
      $.magnificPopup.instance = mfp;
    }
  },
      // CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
  supportsTransitions = function supportsTransitions() {
    var s = document.createElement('p').style,
        // 's' for style. better to create an element if body yet to exist
    v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

    if (s['transition'] !== undefined) {
      return true;
    }

    while (v.length) {
      if (v.pop() + 'Transition' in s) {
        return true;
      }
    }

    return false;
  };
  /**
   * Public functions
   */


  MagnificPopup.prototype = {
    constructor: MagnificPopup,

    /**
     * Initializes Magnific Popup plugin. 
     * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
     */
    init: function init() {
      var appVersion = navigator.appVersion;
      mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
      mfp.isAndroid = /android/gi.test(appVersion);
      mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
      mfp.supportsTransition = supportsTransitions(); // We disable fixed positioned lightbox on devices that don't handle it nicely.
      // If you know a better way of detecting this - let me know.

      mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
      _document = $(document);
      mfp.popupsCache = {};
    },

    /**
     * Opens popup
     * @param  data [description]
     */
    open: function open(data) {
      var i;

      if (data.isObj === false) {
        // convert jQuery collection to array to avoid conflicts later
        mfp.items = data.items.toArray();
        mfp.index = 0;
        var items = data.items,
            item;

        for (i = 0; i < items.length; i++) {
          item = items[i];

          if (item.parsed) {
            item = item.el[0];
          }

          if (item === data.el[0]) {
            mfp.index = i;
            break;
          }
        }
      } else {
        mfp.items = $.isArray(data.items) ? data.items : [data.items];
        mfp.index = data.index || 0;
      } // if popup is already opened - we just update the content


      if (mfp.isOpen) {
        mfp.updateItemHTML();
        return;
      }

      mfp.types = [];
      _wrapClasses = '';

      if (data.mainEl && data.mainEl.length) {
        mfp.ev = data.mainEl.eq(0);
      } else {
        mfp.ev = _document;
      }

      if (data.key) {
        if (!mfp.popupsCache[data.key]) {
          mfp.popupsCache[data.key] = {};
        }

        mfp.currTemplate = mfp.popupsCache[data.key];
      } else {
        mfp.currTemplate = {};
      }

      mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
      mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

      if (mfp.st.modal) {
        mfp.st.closeOnContentClick = false;
        mfp.st.closeOnBgClick = false;
        mfp.st.showCloseBtn = false;
        mfp.st.enableEscapeKey = false;
      } // Building markup
      // main containers are created only once


      if (!mfp.bgOverlay) {
        // Dark overlay
        mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
          mfp.close();
        });
        mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
          if (mfp._checkIfClose(e.target)) {
            mfp.close();
          }
        });
        mfp.container = _getEl('container', mfp.wrap);
      }

      mfp.contentContainer = _getEl('content');

      if (mfp.st.preloader) {
        mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
      } // Initializing modules


      var modules = $.magnificPopup.modules;

      for (i = 0; i < modules.length; i++) {
        var n = modules[i];
        n = n.charAt(0).toUpperCase() + n.slice(1);
        mfp['init' + n].call(mfp);
      }

      _mfpTrigger('BeforeOpen');

      if (mfp.st.showCloseBtn) {
        // Close button
        if (!mfp.st.closeBtnInside) {
          mfp.wrap.append(_getCloseBtn());
        } else {
          _mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
            values.close_replaceWith = _getCloseBtn(item.type);
          });

          _wrapClasses += ' mfp-close-btn-in';
        }
      }

      if (mfp.st.alignTop) {
        _wrapClasses += ' mfp-align-top';
      }

      if (mfp.fixedContentPos) {
        mfp.wrap.css({
          overflow: mfp.st.overflowY,
          overflowX: 'hidden',
          overflowY: mfp.st.overflowY
        });
      } else {
        mfp.wrap.css({
          top: _window.scrollTop(),
          position: 'absolute'
        });
      }

      if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
        mfp.bgOverlay.css({
          height: _document.height(),
          position: 'absolute'
        });
      }

      if (mfp.st.enableEscapeKey) {
        // Close on ESC key
        _document.on('keyup' + EVENT_NS, function (e) {
          if (e.keyCode === 27) {
            mfp.close();
          }
        });
      }

      _window.on('resize' + EVENT_NS, function () {
        mfp.updateSize();
      });

      if (!mfp.st.closeOnContentClick) {
        _wrapClasses += ' mfp-auto-cursor';
      }

      if (_wrapClasses) mfp.wrap.addClass(_wrapClasses); // this triggers recalculation of layout, so we get it once to not to trigger twice

      var windowHeight = mfp.wH = _window.height();

      var windowStyles = {};

      if (mfp.fixedContentPos) {
        if (mfp._hasScrollBar(windowHeight)) {
          var s = mfp._getScrollbarSize();

          if (s) {
            windowStyles.marginRight = s;
          }
        }
      }

      if (mfp.fixedContentPos) {
        if (!mfp.isIE7) {
          windowStyles.overflow = 'hidden';
        } else {
          // ie7 double-scroll bug
          $('body, html').css('overflow', 'hidden');
        }
      }

      var classesToadd = mfp.st.mainClass;

      if (mfp.isIE7) {
        classesToadd += ' mfp-ie7';
      }

      if (classesToadd) {
        mfp._addClassToMFP(classesToadd);
      } // add content


      mfp.updateItemHTML();

      _mfpTrigger('BuildControls'); // remove scrollbar, add margin e.t.c


      $('html').css(windowStyles); // add everything to DOM

      mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body)); // Save last focused element

      mfp._lastFocusedEl = document.activeElement; // Wait for next cycle to allow CSS transition

      setTimeout(function () {
        if (mfp.content) {
          mfp._addClassToMFP(READY_CLASS);

          mfp._setFocus();
        } else {
          // if content is not defined (not loaded e.t.c) we add class only for BG
          mfp.bgOverlay.addClass(READY_CLASS);
        } // Trap the focus in popup


        _document.on('focusin' + EVENT_NS, mfp._onFocusIn);
      }, 16);
      mfp.isOpen = true;
      mfp.updateSize(windowHeight);

      _mfpTrigger(OPEN_EVENT);

      return data;
    },

    /**
     * Closes the popup
     */
    close: function close() {
      if (!mfp.isOpen) return;

      _mfpTrigger(BEFORE_CLOSE_EVENT);

      mfp.isOpen = false; // for CSS3 animation

      if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
        mfp._addClassToMFP(REMOVING_CLASS);

        setTimeout(function () {
          mfp._close();
        }, mfp.st.removalDelay);
      } else {
        mfp._close();
      }
    },

    /**
     * Helper for close() function
     */
    _close: function _close() {
      _mfpTrigger(CLOSE_EVENT);

      var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';
      mfp.bgOverlay.detach();
      mfp.wrap.detach();
      mfp.container.empty();

      if (mfp.st.mainClass) {
        classesToRemove += mfp.st.mainClass + ' ';
      }

      mfp._removeClassFromMFP(classesToRemove);

      if (mfp.fixedContentPos) {
        var windowStyles = {
          marginRight: ''
        };

        if (mfp.isIE7) {
          $('body, html').css('overflow', '');
        } else {
          windowStyles.overflow = '';
        }

        $('html').css(windowStyles);
      }

      _document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);

      mfp.ev.off(EVENT_NS); // clean up DOM elements that aren't removed

      mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
      mfp.bgOverlay.attr('class', 'mfp-bg');
      mfp.container.attr('class', 'mfp-container'); // remove close button from target element

      if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
        if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
      }

      if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
        $(mfp._lastFocusedEl).focus(); // put tab focus back
      }

      mfp.currItem = null;
      mfp.content = null;
      mfp.currTemplate = null;
      mfp.prevHeight = 0;

      _mfpTrigger(AFTER_CLOSE_EVENT);
    },
    updateSize: function updateSize(winHeight) {
      if (mfp.isIOS) {
        // fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
        var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
        var height = window.innerHeight * zoomLevel;
        mfp.wrap.css('height', height);
        mfp.wH = height;
      } else {
        mfp.wH = winHeight || _window.height();
      } // Fixes #84: popup incorrectly positioned with position:relative on body


      if (!mfp.fixedContentPos) {
        mfp.wrap.css('height', mfp.wH);
      }

      _mfpTrigger('Resize');
    },

    /**
     * Set content of popup based on current index
     */
    updateItemHTML: function updateItemHTML() {
      var item = mfp.items[mfp.index]; // Detach and perform modifications

      mfp.contentContainer.detach();
      if (mfp.content) mfp.content.detach();

      if (!item.parsed) {
        item = mfp.parseEl(mfp.index);
      }

      var type = item.type;

      _mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]); // BeforeChange event works like so:
      // _mfpOn('BeforeChange', function(e, prevType, newType) { });


      mfp.currItem = item;

      if (!mfp.currTemplate[type]) {
        var markup = mfp.st[type] ? mfp.st[type].markup : false; // allows to modify markup

        _mfpTrigger('FirstMarkupParse', markup);

        if (markup) {
          mfp.currTemplate[type] = $(markup);
        } else {
          // if there is no markup found we just define that template is parsed
          mfp.currTemplate[type] = true;
        }
      }

      if (_prevContentType && _prevContentType !== item.type) {
        mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
      }

      var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
      mfp.appendContent(newContent, type);
      item.preloaded = true;

      _mfpTrigger(CHANGE_EVENT, item);

      _prevContentType = item.type; // Append container back after its content changed

      mfp.container.prepend(mfp.contentContainer);

      _mfpTrigger('AfterChange');
    },

    /**
     * Set HTML content of popup
     */
    appendContent: function appendContent(newContent, type) {
      mfp.content = newContent;

      if (newContent) {
        if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
          // if there is no markup, we just append close button element inside
          if (!mfp.content.find('.mfp-close').length) {
            mfp.content.append(_getCloseBtn());
          }
        } else {
          mfp.content = newContent;
        }
      } else {
        mfp.content = '';
      }

      _mfpTrigger(BEFORE_APPEND_EVENT);

      mfp.container.addClass('mfp-' + type + '-holder');
      mfp.contentContainer.append(mfp.content);
    },

    /**
     * Creates Magnific Popup data object based on given data
     * @param  {int} index Index of item to parse
     */
    parseEl: function parseEl(index) {
      var item = mfp.items[index],
          type;

      if (item.tagName) {
        item = {
          el: $(item)
        };
      } else {
        type = item.type;
        item = {
          data: item,
          src: item.src
        };
      }

      if (item.el) {
        var types = mfp.types; // check for 'mfp-TYPE' class

        for (var i = 0; i < types.length; i++) {
          if (item.el.hasClass('mfp-' + types[i])) {
            type = types[i];
            break;
          }
        }

        item.src = item.el.attr('data-mfp-src');

        if (!item.src) {
          item.src = item.el.attr('href');
        }
      }

      item.type = type || mfp.st.type || 'inline';
      item.index = index;
      item.parsed = true;
      mfp.items[index] = item;

      _mfpTrigger('ElementParse', item);

      return mfp.items[index];
    },

    /**
     * Initializes single popup or a group of popups
     */
    addGroup: function addGroup(el, options) {
      var eHandler = function eHandler(e) {
        e.mfpEl = this;

        mfp._openClick(e, el, options);
      };

      if (!options) {
        options = {};
      }

      var eName = 'click.magnificPopup';
      options.mainEl = el;

      if (options.items) {
        options.isObj = true;
        el.off(eName).on(eName, eHandler);
      } else {
        options.isObj = false;

        if (options.delegate) {
          el.off(eName).on(eName, options.delegate, eHandler);
        } else {
          options.items = el;
          el.off(eName).on(eName, eHandler);
        }
      }
    },
    _openClick: function _openClick(e, el, options) {
      var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

      if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
        return;
      }

      var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

      if (disableOn) {
        if ($.isFunction(disableOn)) {
          if (!disableOn.call(mfp)) {
            return true;
          }
        } else {
          // else it's number
          if (_window.width() < disableOn) {
            return true;
          }
        }
      }

      if (e.type) {
        e.preventDefault(); // This will prevent popup from closing if element is inside and popup is already opened

        if (mfp.isOpen) {
          e.stopPropagation();
        }
      }

      options.el = $(e.mfpEl);

      if (options.delegate) {
        options.items = el.find(options.delegate);
      }

      mfp.open(options);
    },

    /**
     * Updates text on preloader
     */
    updateStatus: function updateStatus(status, text) {
      if (mfp.preloader) {
        if (_prevStatus !== status) {
          mfp.container.removeClass('mfp-s-' + _prevStatus);
        }

        if (!text && status === 'loading') {
          text = mfp.st.tLoading;
        }

        var data = {
          status: status,
          text: text
        }; // allows to modify status

        _mfpTrigger('UpdateStatus', data);

        status = data.status;
        text = data.text;
        mfp.preloader.html(text);
        mfp.preloader.find('a').on('click', function (e) {
          e.stopImmediatePropagation();
        });
        mfp.container.addClass('mfp-s-' + status);
        _prevStatus = status;
      }
    },

    /*
    	"Private" helpers that aren't private at all
     */
    // Check to close popup or not
    // "target" is an element that was clicked
    _checkIfClose: function _checkIfClose(target) {
      if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
        return;
      }

      var closeOnContent = mfp.st.closeOnContentClick;
      var closeOnBg = mfp.st.closeOnBgClick;

      if (closeOnContent && closeOnBg) {
        return true;
      } else {
        // We close the popup if click is on close button or on preloader. Or if there is no content.
        if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
          return true;
        } // if click is outside the content


        if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
          if (closeOnBg) {
            // last check, if the clicked element is in DOM, (in case it's removed onclick)
            if ($.contains(document, target)) {
              return true;
            }
          }
        } else if (closeOnContent) {
          return true;
        }
      }

      return false;
    },
    _addClassToMFP: function _addClassToMFP(cName) {
      mfp.bgOverlay.addClass(cName);
      mfp.wrap.addClass(cName);
    },
    _removeClassFromMFP: function _removeClassFromMFP(cName) {
      this.bgOverlay.removeClass(cName);
      mfp.wrap.removeClass(cName);
    },
    _hasScrollBar: function _hasScrollBar(winHeight) {
      return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
    },
    _setFocus: function _setFocus() {
      (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
    },
    _onFocusIn: function _onFocusIn(e) {
      if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
        mfp._setFocus();

        return false;
      }
    },
    _parseMarkup: function _parseMarkup(template, values, item) {
      var arr;

      if (item.data) {
        values = $.extend(item.data, values);
      }

      _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

      $.each(values, function (key, value) {
        if (value === undefined || value === false) {
          return true;
        }

        arr = key.split('_');

        if (arr.length > 1) {
          var el = template.find(EVENT_NS + '-' + arr[0]);

          if (el.length > 0) {
            var attr = arr[1];

            if (attr === 'replaceWith') {
              if (el[0] !== value[0]) {
                el.replaceWith(value);
              }
            } else if (attr === 'img') {
              if (el.is('img')) {
                el.attr('src', value);
              } else {
                el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
              }
            } else {
              el.attr(arr[1], value);
            }
          }
        } else {
          template.find(EVENT_NS + '-' + key).html(value);
        }
      });
    },
    _getScrollbarSize: function _getScrollbarSize() {
      // thx David
      if (mfp.scrollbarSize === undefined) {
        var scrollDiv = document.createElement("div");
        scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
        document.body.appendChild(scrollDiv);
        mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
      }

      return mfp.scrollbarSize;
    }
  };
  /* MagnificPopup core prototype end */

  /**
   * Public static functions
   */

  $.magnificPopup = {
    instance: null,
    proto: MagnificPopup.prototype,
    modules: [],
    open: function open(options, index) {
      _checkInstance();

      if (!options) {
        options = {};
      } else {
        options = $.extend(true, {}, options);
      }

      options.isObj = true;
      options.index = index || 0;
      return this.instance.open(options);
    },
    close: function close() {
      return $.magnificPopup.instance && $.magnificPopup.instance.close();
    },
    registerModule: function registerModule(name, module) {
      if (module.options) {
        $.magnificPopup.defaults[name] = module.options;
      }

      $.extend(this.proto, module.proto);
      this.modules.push(name);
    },
    defaults: {
      // Info about options is in docs:
      // http://dimsemenov.com/plugins/magnific-popup/documentation.html#options
      disableOn: 0,
      key: null,
      midClick: false,
      mainClass: '',
      preloader: true,
      focus: '',
      // CSS selector of input to focus after popup is opened
      closeOnContentClick: false,
      closeOnBgClick: true,
      closeBtnInside: true,
      showCloseBtn: true,
      enableEscapeKey: true,
      modal: false,
      alignTop: false,
      removalDelay: 0,
      prependTo: null,
      fixedContentPos: 'auto',
      fixedBgPos: 'auto',
      overflowY: 'auto',
      closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',
      tClose: 'Close (Esc)',
      tLoading: 'Loading...',
      autoFocusLast: true
    }
  };

  $.fn.magnificPopup = function (options) {
    _checkInstance();

    var jqEl = $(this); // We call some API method of first param is a string

    if (typeof options === "string") {
      if (options === 'open') {
        var items,
            itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
            index = parseInt(arguments[1], 10) || 0;

        if (itemOpts.items) {
          items = itemOpts.items[index];
        } else {
          items = jqEl;

          if (itemOpts.delegate) {
            items = items.find(itemOpts.delegate);
          }

          items = items.eq(index);
        }

        mfp._openClick({
          mfpEl: items
        }, jqEl, itemOpts);
      } else {
        if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
      }
    } else {
      // clone options obj
      options = $.extend(true, {}, options);
      /*
       * As Zepto doesn't support .data() method for objects
       * and it works only in normal browsers
       * we assign "options" object directly to the DOM element. FTW!
       */

      if (_isJQ) {
        jqEl.data('magnificPopup', options);
      } else {
        jqEl[0].magnificPopup = options;
      }

      mfp.addGroup(jqEl, options);
    }

    return jqEl;
  };
  /*>>core*/

  /*>>inline*/


  var INLINE_NS = 'inline',
      _hiddenClass,
      _inlinePlaceholder,
      _lastInlineElement,
      _putInlineElementsBack = function _putInlineElementsBack() {
    if (_lastInlineElement) {
      _inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();

      _lastInlineElement = null;
    }
  };

  $.magnificPopup.registerModule(INLINE_NS, {
    options: {
      hiddenClass: 'hide',
      // will be appended with `mfp-` prefix
      markup: '',
      tNotFound: 'Content not found'
    },
    proto: {
      initInline: function initInline() {
        mfp.types.push(INLINE_NS);

        _mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
          _putInlineElementsBack();
        });
      },
      getInline: function getInline(item, template) {
        _putInlineElementsBack();

        if (item.src) {
          var inlineSt = mfp.st.inline,
              el = $(item.src);

          if (el.length) {
            // If target element has parent - we replace it with placeholder and put it back after popup is closed
            var parent = el[0].parentNode;

            if (parent && parent.tagName) {
              if (!_inlinePlaceholder) {
                _hiddenClass = inlineSt.hiddenClass;
                _inlinePlaceholder = _getEl(_hiddenClass);
                _hiddenClass = 'mfp-' + _hiddenClass;
              } // replace target inline element with placeholder


              _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
            }

            mfp.updateStatus('ready');
          } else {
            mfp.updateStatus('error', inlineSt.tNotFound);
            el = $('<div>');
          }

          item.inlineElement = el;
          return el;
        }

        mfp.updateStatus('ready');

        mfp._parseMarkup(template, {}, item);

        return template;
      }
    }
  });
  /*>>inline*/

  /*>>ajax*/

  var AJAX_NS = 'ajax',
      _ajaxCur,
      _removeAjaxCursor = function _removeAjaxCursor() {
    if (_ajaxCur) {
      $(document.body).removeClass(_ajaxCur);
    }
  },
      _destroyAjaxRequest = function _destroyAjaxRequest() {
    _removeAjaxCursor();

    if (mfp.req) {
      mfp.req.abort();
    }
  };

  $.magnificPopup.registerModule(AJAX_NS, {
    options: {
      settings: null,
      cursor: 'mfp-ajax-cur',
      tError: '<a href="%url%">The content</a> could not be loaded.'
    },
    proto: {
      initAjax: function initAjax() {
        mfp.types.push(AJAX_NS);
        _ajaxCur = mfp.st.ajax.cursor;

        _mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);

        _mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
      },
      getAjax: function getAjax(item) {
        if (_ajaxCur) {
          $(document.body).addClass(_ajaxCur);
        }

        mfp.updateStatus('loading');
        var opts = $.extend({
          url: item.src,
          success: function success(data, textStatus, jqXHR) {
            var temp = {
              data: data,
              xhr: jqXHR
            };

            _mfpTrigger('ParseAjax', temp);

            mfp.appendContent($(temp.data), AJAX_NS);
            item.finished = true;

            _removeAjaxCursor();

            mfp._setFocus();

            setTimeout(function () {
              mfp.wrap.addClass(READY_CLASS);
            }, 16);
            mfp.updateStatus('ready');

            _mfpTrigger('AjaxContentAdded');
          },
          error: function error() {
            _removeAjaxCursor();

            item.finished = item.loadError = true;
            mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
          }
        }, mfp.st.ajax.settings);
        mfp.req = $.ajax(opts);
        return '';
      }
    }
  });
  /*>>ajax*/

  /*>>image*/

  var _imgInterval,
      _getTitle = function _getTitle(item) {
    if (item.data && item.data.title !== undefined) return item.data.title;
    var src = mfp.st.image.titleSrc;

    if (src) {
      if ($.isFunction(src)) {
        return src.call(mfp, item);
      } else if (item.el) {
        return item.el.attr(src) || '';
      }
    }

    return '';
  };

  $.magnificPopup.registerModule('image', {
    options: {
      markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>',
      cursor: 'mfp-zoom-out-cur',
      titleSrc: 'title',
      verticalFit: true,
      tError: '<a href="%url%">The image</a> could not be loaded.'
    },
    proto: {
      initImage: function initImage() {
        var imgSt = mfp.st.image,
            ns = '.image';
        mfp.types.push('image');

        _mfpOn(OPEN_EVENT + ns, function () {
          if (mfp.currItem.type === 'image' && imgSt.cursor) {
            $(document.body).addClass(imgSt.cursor);
          }
        });

        _mfpOn(CLOSE_EVENT + ns, function () {
          if (imgSt.cursor) {
            $(document.body).removeClass(imgSt.cursor);
          }

          _window.off('resize' + EVENT_NS);
        });

        _mfpOn('Resize' + ns, mfp.resizeImage);

        if (mfp.isLowIE) {
          _mfpOn('AfterChange', mfp.resizeImage);
        }
      },
      resizeImage: function resizeImage() {
        var item = mfp.currItem;
        if (!item || !item.img) return;

        if (mfp.st.image.verticalFit) {
          var decr = 0; // fix box-sizing in ie7/8

          if (mfp.isLowIE) {
            decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
          }

          item.img.css('max-height', mfp.wH - decr);
        }
      },
      _onImageHasSize: function _onImageHasSize(item) {
        if (item.img) {
          item.hasSize = true;

          if (_imgInterval) {
            clearInterval(_imgInterval);
          }

          item.isCheckingImgSize = false;

          _mfpTrigger('ImageHasSize', item);

          if (item.imgHidden) {
            if (mfp.content) mfp.content.removeClass('mfp-loading');
            item.imgHidden = false;
          }
        }
      },

      /**
       * Function that loops until the image has size to display elements that rely on it asap
       */
      findImageSize: function findImageSize(item) {
        var counter = 0,
            img = item.img[0],
            mfpSetInterval = function mfpSetInterval(delay) {
          if (_imgInterval) {
            clearInterval(_imgInterval);
          } // decelerating interval that checks for size of an image


          _imgInterval = setInterval(function () {
            if (img.naturalWidth > 0) {
              mfp._onImageHasSize(item);

              return;
            }

            if (counter > 200) {
              clearInterval(_imgInterval);
            }

            counter++;

            if (counter === 3) {
              mfpSetInterval(10);
            } else if (counter === 40) {
              mfpSetInterval(50);
            } else if (counter === 100) {
              mfpSetInterval(500);
            }
          }, delay);
        };

        mfpSetInterval(1);
      },
      getImage: function getImage(item, template) {
        var guard = 0,
            // image load complete handler
        onLoadComplete = function onLoadComplete() {
          if (item) {
            if (item.img[0].complete) {
              item.img.off('.mfploader');

              if (item === mfp.currItem) {
                mfp._onImageHasSize(item);

                mfp.updateStatus('ready');
              }

              item.hasSize = true;
              item.loaded = true;

              _mfpTrigger('ImageLoadComplete');
            } else {
              // if image complete check fails 200 times (20 sec), we assume that there was an error.
              guard++;

              if (guard < 200) {
                setTimeout(onLoadComplete, 100);
              } else {
                onLoadError();
              }
            }
          }
        },
            // image error handler
        onLoadError = function onLoadError() {
          if (item) {
            item.img.off('.mfploader');

            if (item === mfp.currItem) {
              mfp._onImageHasSize(item);

              mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
            }

            item.hasSize = true;
            item.loaded = true;
            item.loadError = true;
          }
        },
            imgSt = mfp.st.image;

        var el = template.find('.mfp-img');

        if (el.length) {
          var img = document.createElement('img');
          img.className = 'mfp-img';

          if (item.el && item.el.find('img').length) {
            img.alt = item.el.find('img').attr('alt');
          }

          item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
          img.src = item.src; // without clone() "error" event is not firing when IMG is replaced by new IMG
          // TODO: find a way to avoid such cloning

          if (el.is('img')) {
            item.img = item.img.clone();
          }

          img = item.img[0];

          if (img.naturalWidth > 0) {
            item.hasSize = true;
          } else if (!img.width) {
            item.hasSize = false;
          }
        }

        mfp._parseMarkup(template, {
          title: _getTitle(item),
          img_replaceWith: item.img
        }, item);

        mfp.resizeImage();

        if (item.hasSize) {
          if (_imgInterval) clearInterval(_imgInterval);

          if (item.loadError) {
            template.addClass('mfp-loading');
            mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
          } else {
            template.removeClass('mfp-loading');
            mfp.updateStatus('ready');
          }

          return template;
        }

        mfp.updateStatus('loading');
        item.loading = true;

        if (!item.hasSize) {
          item.imgHidden = true;
          template.addClass('mfp-loading');
          mfp.findImageSize(item);
        }

        return template;
      }
    }
  });
  /*>>image*/

  /*>>zoom*/

  var hasMozTransform,
      getHasMozTransform = function getHasMozTransform() {
    if (hasMozTransform === undefined) {
      hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
    }

    return hasMozTransform;
  };

  $.magnificPopup.registerModule('zoom', {
    options: {
      enabled: false,
      easing: 'ease-in-out',
      duration: 300,
      opener: function opener(element) {
        return element.is('img') ? element : element.find('img');
      }
    },
    proto: {
      initZoom: function initZoom() {
        var zoomSt = mfp.st.zoom,
            ns = '.zoom',
            image;

        if (!zoomSt.enabled || !mfp.supportsTransition) {
          return;
        }

        var duration = zoomSt.duration,
            getElToAnimate = function getElToAnimate(image) {
          var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
              transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
              cssObj = {
            position: 'fixed',
            zIndex: 9999,
            left: 0,
            top: 0,
            '-webkit-backface-visibility': 'hidden'
          },
              t = 'transition';
          cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;
          newImg.css(cssObj);
          return newImg;
        },
            showMainContent = function showMainContent() {
          mfp.content.css('visibility', 'visible');
        },
            openTimeout,
            animatedImg;

        _mfpOn('BuildControls' + ns, function () {
          if (mfp._allowZoom()) {
            clearTimeout(openTimeout);
            mfp.content.css('visibility', 'hidden'); // Basically, all code below does is clones existing image, puts in on top of the current one and animated it

            image = mfp._getItemToZoom();

            if (!image) {
              showMainContent();
              return;
            }

            animatedImg = getElToAnimate(image);
            animatedImg.css(mfp._getOffset());
            mfp.wrap.append(animatedImg);
            openTimeout = setTimeout(function () {
              animatedImg.css(mfp._getOffset(true));
              openTimeout = setTimeout(function () {
                showMainContent();
                setTimeout(function () {
                  animatedImg.remove();
                  image = animatedImg = null;

                  _mfpTrigger('ZoomAnimationEnded');
                }, 16); // avoid blink when switching images
              }, duration); // this timeout equals animation duration
            }, 16); // by adding this timeout we avoid short glitch at the beginning of animation
            // Lots of timeouts...
          }
        });

        _mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
          if (mfp._allowZoom()) {
            clearTimeout(openTimeout);
            mfp.st.removalDelay = duration;

            if (!image) {
              image = mfp._getItemToZoom();

              if (!image) {
                return;
              }

              animatedImg = getElToAnimate(image);
            }

            animatedImg.css(mfp._getOffset(true));
            mfp.wrap.append(animatedImg);
            mfp.content.css('visibility', 'hidden');
            setTimeout(function () {
              animatedImg.css(mfp._getOffset());
            }, 16);
          }
        });

        _mfpOn(CLOSE_EVENT + ns, function () {
          if (mfp._allowZoom()) {
            showMainContent();

            if (animatedImg) {
              animatedImg.remove();
            }

            image = null;
          }
        });
      },
      _allowZoom: function _allowZoom() {
        return mfp.currItem.type === 'image';
      },
      _getItemToZoom: function _getItemToZoom() {
        if (mfp.currItem.hasSize) {
          return mfp.currItem.img;
        } else {
          return false;
        }
      },
      // Get element postion relative to viewport
      _getOffset: function _getOffset(isLarge) {
        var el;

        if (isLarge) {
          el = mfp.currItem.img;
        } else {
          el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
        }

        var offset = el.offset();
        var paddingTop = parseInt(el.css('padding-top'), 10);
        var paddingBottom = parseInt(el.css('padding-bottom'), 10);
        offset.top -= $(window).scrollTop() - paddingTop;
        /*
        	Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
        	 */

        var obj = {
          width: el.width(),
          // fix Zepto height+padding issue
          height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
        }; // I hate to do this, but there is no another option

        if (getHasMozTransform()) {
          obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
        } else {
          obj.left = offset.left;
          obj.top = offset.top;
        }

        return obj;
      }
    }
  });
  /*>>zoom*/

  /*>>iframe*/

  var IFRAME_NS = 'iframe',
      _emptyPage = '//about:blank',
      _fixIframeBugs = function _fixIframeBugs(isShowing) {
    if (mfp.currTemplate[IFRAME_NS]) {
      var el = mfp.currTemplate[IFRAME_NS].find('iframe');

      if (el.length) {
        // reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
        if (!isShowing) {
          el[0].src = _emptyPage;
        } // IE8 black screen bug fix


        if (mfp.isIE8) {
          el.css('display', isShowing ? 'block' : 'none');
        }
      }
    }
  };

  $.magnificPopup.registerModule(IFRAME_NS, {
    options: {
      markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + '</div>',
      srcAction: 'iframe_src',
      // we don't care and support only one default type of URL by default
      patterns: {
        youtube: {
          index: 'youtube.com',
          id: 'v=',
          src: '//www.youtube.com/embed/%id%?autoplay=1'
        },
        vimeo: {
          index: 'vimeo.com/',
          id: '/',
          src: '//player.vimeo.com/video/%id%?autoplay=1'
        },
        gmaps: {
          index: '//maps.google.',
          src: '%id%&output=embed'
        }
      }
    },
    proto: {
      initIframe: function initIframe() {
        mfp.types.push(IFRAME_NS);

        _mfpOn('BeforeChange', function (e, prevType, newType) {
          if (prevType !== newType) {
            if (prevType === IFRAME_NS) {
              _fixIframeBugs(); // iframe if removed

            } else if (newType === IFRAME_NS) {
              _fixIframeBugs(true); // iframe is showing

            }
          } // else {
          // iframe source is switched, don't do anything
          //}

        });

        _mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function () {
          _fixIframeBugs();
        });
      },
      getIframe: function getIframe(item, template) {
        var embedSrc = item.src;
        var iframeSt = mfp.st.iframe;
        $.each(iframeSt.patterns, function () {
          if (embedSrc.indexOf(this.index) > -1) {
            if (this.id) {
              if (typeof this.id === 'string') {
                embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
              } else {
                embedSrc = this.id.call(this, embedSrc);
              }
            }

            embedSrc = this.src.replace('%id%', embedSrc);
            return false; // break;
          }
        });
        var dataObj = {};

        if (iframeSt.srcAction) {
          dataObj[iframeSt.srcAction] = embedSrc;
        }

        mfp._parseMarkup(template, dataObj, item);

        mfp.updateStatus('ready');
        return template;
      }
    }
  });
  /*>>iframe*/

  /*>>gallery*/

  /**
   * Get looped index depending on number of slides
   */

  var _getLoopedId = function _getLoopedId(index) {
    var numSlides = mfp.items.length;

    if (index > numSlides - 1) {
      return index - numSlides;
    } else if (index < 0) {
      return numSlides + index;
    }

    return index;
  },
      _replaceCurrTotal = function _replaceCurrTotal(text, curr, total) {
    return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
  };

  $.magnificPopup.registerModule('gallery', {
    options: {
      enabled: false,
      arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
      preload: [0, 2],
      navigateByImgClick: true,
      arrows: true,
      tPrev: 'Previous (Left arrow key)',
      tNext: 'Next (Right arrow key)',
      tCounter: '%curr% of %total%'
    },
    proto: {
      initGallery: function initGallery() {
        var gSt = mfp.st.gallery,
            ns = '.mfp-gallery';
        mfp.direction = true; // true - next, false - prev

        if (!gSt || !gSt.enabled) return false;
        _wrapClasses += ' mfp-gallery';

        _mfpOn(OPEN_EVENT + ns, function () {
          if (gSt.navigateByImgClick) {
            mfp.wrap.on('click' + ns, '.mfp-img', function () {
              if (mfp.items.length > 1) {
                mfp.next();
                return false;
              }
            });
          }

          _document.on('keydown' + ns, function (e) {
            if (e.keyCode === 37) {
              mfp.prev();
            } else if (e.keyCode === 39) {
              mfp.next();
            }
          });
        });

        _mfpOn('UpdateStatus' + ns, function (e, data) {
          if (data.text) {
            data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
          }
        });

        _mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
          var l = mfp.items.length;
          values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
        });

        _mfpOn('BuildControls' + ns, function () {
          if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
            var markup = gSt.arrowMarkup,
                arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
                arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);
            arrowLeft.click(function () {
              mfp.prev();
            });
            arrowRight.click(function () {
              mfp.next();
            });
            mfp.container.append(arrowLeft.add(arrowRight));
          }
        });

        _mfpOn(CHANGE_EVENT + ns, function () {
          if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);
          mfp._preloadTimeout = setTimeout(function () {
            mfp.preloadNearbyImages();
            mfp._preloadTimeout = null;
          }, 16);
        });

        _mfpOn(CLOSE_EVENT + ns, function () {
          _document.off(ns);

          mfp.wrap.off('click' + ns);
          mfp.arrowRight = mfp.arrowLeft = null;
        });
      },
      next: function next() {
        mfp.direction = true;
        mfp.index = _getLoopedId(mfp.index + 1);
        mfp.updateItemHTML();
      },
      prev: function prev() {
        mfp.direction = false;
        mfp.index = _getLoopedId(mfp.index - 1);
        mfp.updateItemHTML();
      },
      goTo: function goTo(newIndex) {
        mfp.direction = newIndex >= mfp.index;
        mfp.index = newIndex;
        mfp.updateItemHTML();
      },
      preloadNearbyImages: function preloadNearbyImages() {
        var p = mfp.st.gallery.preload,
            preloadBefore = Math.min(p[0], mfp.items.length),
            preloadAfter = Math.min(p[1], mfp.items.length),
            i;

        for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
          mfp._preloadItem(mfp.index + i);
        }

        for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
          mfp._preloadItem(mfp.index - i);
        }
      },
      _preloadItem: function _preloadItem(index) {
        index = _getLoopedId(index);

        if (mfp.items[index].preloaded) {
          return;
        }

        var item = mfp.items[index];

        if (!item.parsed) {
          item = mfp.parseEl(index);
        }

        _mfpTrigger('LazyLoad', item);

        if (item.type === 'image') {
          item.img = $('<img class="mfp-img" />').on('load.mfploader', function () {
            item.hasSize = true;
          }).on('error.mfploader', function () {
            item.hasSize = true;
            item.loadError = true;

            _mfpTrigger('LazyLoadError', item);
          }).attr('src', item.src);
        }

        item.preloaded = true;
      }
    }
  });
  /*>>gallery*/

  /*>>retina*/

  var RETINA_NS = 'retina';
  $.magnificPopup.registerModule(RETINA_NS, {
    options: {
      replaceSrc: function replaceSrc(item) {
        return item.src.replace(/\.\w+$/, function (m) {
          return '@2x' + m;
        });
      },
      ratio: 1 // Function or number.  Set to 1 to disable.

    },
    proto: {
      initRetina: function initRetina() {
        if (window.devicePixelRatio > 1) {
          var st = mfp.st.retina,
              ratio = st.ratio;
          ratio = !isNaN(ratio) ? ratio : ratio();

          if (ratio > 1) {
            _mfpOn('ImageHasSize' + '.' + RETINA_NS, function (e, item) {
              item.img.css({
                'max-width': item.img[0].naturalWidth / ratio,
                'width': '100%'
              });
            });

            _mfpOn('ElementParse' + '.' + RETINA_NS, function (e, item) {
              item.src = st.replaceSrc(item, ratio);
            });
          }
        }
      }
    }
  });
  /*>>retina*/

  _checkInstance();
});

var blocks = document.querySelectorAll('.block1'); // --- Magnific Popup Settings ---

$(document).ready(function () {
  $('.popup-with-form').magnificPopup({
    type: 'inline',
    preloader: true,
    mainClass: 'custom-mfp-bg',
    removalDelay: 300,
    callbacks: {
      open: function open() {
        setTimeout(function () {
          blocks.forEach(function (el) {
            el.classList.add('active');
          });
        }, 100);
      },
      close: function close() {
        blocks.forEach(function (el) {
          el.classList.remove('active');
        });
      }
    }
  });
});
console.log(1); // --------- HEADER

var navbar = document.querySelector('.header__navbar');
var menuBtn = document.querySelector('.header__menu-item_select');
var cityBtn = document.querySelector('.header__location');
var dropdowns = document.querySelectorAll('.header__dropdown');
document.addEventListener('scroll', function () {
  window.pageYOffset > 0 ? showNavbarBg() : hideNavbarBg();
});

function showNavbarBg() {
  navbar.classList.add('header__navbar_white');
}

function hideNavbarBg() {
  navbar.classList.remove('header__navbar_white');
}

function showDropdown() {
  var element = this.getAttribute('data-dropdown');
  var dropdown = document.querySelector(element);
  dropdown.classList.add('header__dropdown-active');
  dropdown.addEventListener('mouseover', function () {
    this.classList.add('header__dropdown-active');
  });
}

function hideDropdown() {
  setTimeout(function () {
    showNavbarBg();
  }, 0);
  dropdowns.forEach(function (item) {
    item.classList.remove('header__dropdown-active');
    item.addEventListener('mouseleave', function () {
      this.classList.remove('header__dropdown-active');
      hideNavbarBg();
    });
  });
}

function init() {
  if (document.documentElement.clientWidth > 1183) {
    navbar.addEventListener('mousemove', showNavbarBg);
    navbar.addEventListener('mouseleave', function () {
      window.pageYOffset === 0 ? hideNavbarBg() : '';
    });
    menuBtn.addEventListener('mouseover', showDropdown);
    cityBtn.addEventListener('mouseover', showDropdown);
    menuBtn.addEventListener('mouseleave', hideDropdown);
    cityBtn.addEventListener('mouseleave', hideDropdown);
  } else {
    navbar.removeEventListener('mousemove', showNavbarBg);
    menuBtn.removeEventListener('mouseover', showDropdown);
    cityBtn.removeEventListener('mouseover', showDropdown);
  }
}

init();
window.addEventListener('resize', function () {
  init();
});
var pointer = document.querySelector('.icon-pointer');
var pointerShift = 0;
setInterval(function () {
  pointerShift -= 73;
  pointerShift < -292 ? pointerShift = 0 : '';
  pointer.style.left = pointerShift + 'px';
}, 1000);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS0zLjIuMS5zbGltLm1pbi5qcyIsImpxdWVyeS5tYWduaWZpYy1wb3B1cC5qcyIsIm1haW4uanMiXSwibmFtZXMiOlsiYSIsImIiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJFcnJvciIsIndpbmRvdyIsImMiLCJkIiwiZSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiZiIsInNsaWNlIiwiZyIsImNvbmNhdCIsImgiLCJwdXNoIiwiaSIsImluZGV4T2YiLCJqIiwiayIsInRvU3RyaW5nIiwibCIsImhhc093blByb3BlcnR5IiwibSIsIm4iLCJjYWxsIiwibyIsInAiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInEiLCJyIiwiZm4iLCJpbml0IiwicyIsInQiLCJ1IiwidiIsInRvVXBwZXJDYXNlIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0b0FycmF5IiwiZ2V0IiwicHVzaFN0YWNrIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsIm1hcCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJub29wIiwidHlwZSIsImlzV2luZG93IiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJ3IiwidHJpbSIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJncmVwIiwiZ3VpZCIsInByb3h5Iiwibm93IiwiRGF0ZSIsInN1cHBvcnQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJ4IiwieSIsImhhIiwieiIsIkEiLCJCIiwiQyIsIkQiLCJFIiwicG9wIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlJlZ0V4cCIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsIlciLCJYIiwiWSIsIloiLCIkIiwiXyIsImFhIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYmEiLCJjYSIsImNoYXJDb2RlQXQiLCJkYSIsImVhIiwidGEiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwibm9kZVR5cGUiLCJmYSIsImdhIiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2EiLCJqb2luIiwicWEiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsImlhIiwiamEiLCJrYSIsImF0dHJIYW5kbGUiLCJsYSIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJtYSIsIm5hIiwib2EiLCJpc0Rpc2FibGVkIiwicGEiLCJpc1hNTCIsImRvY3VtZW50RWxlbWVudCIsInNldERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJhdHRyaWJ1dGVzIiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidmFsdWUiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNvbnRhaW5zIiwic29ydERldGFjaGVkIiwidW5zaGlmdCIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJ1bmlxdWVTb3J0IiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0IiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwibWF0Y2giLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvcyIsInNldEZpbHRlcnMiLCJub3QiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwidGFyZ2V0IiwibG9jYXRpb24iLCJoYXNoIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsInBhcmVudCIsImhlYWRlciIsImlucHV0IiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInJhIiwiZmlsdGVycyIsInRva2VuaXplIiwidWEiLCJ2YSIsIndhIiwieGEiLCJ5YSIsInphIiwiY29tcGlsZSIsInNlbGVjdG9yIiwic2VsZWN0IiwiZGVmYXVsdFZhbHVlIiwiZXhwciIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJpcyIsInBhcnNlSFRNTCIsInJlYWR5IiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsIm9uY2UiLCJzdG9wT25GYWxzZSIsIm1lbW9yeSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJmaXJlIiwiZmlyZWQiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiRGVmZXJyZWQiLCJzdGF0ZSIsImFsd2F5cyIsInBpcGUiLCJwcm9ncmVzcyIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwid2hlbiIsImNvbnNvbGUiLCJ3YXJuIiwibmFtZSIsIm1lc3NhZ2UiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlXYWl0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsInVpZCIsImNhY2hlIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJzZXQiLCJhY2Nlc3MiLCJoYXNEYXRhIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwicXVldWUiLCJkZXF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwiY2xlYXJRdWV1ZSIsInNvdXJjZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImN1ciIsImNzc051bWJlciIsInVuaXQiLCJzdGFydCIsImJvZHkiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib2ZmIiwiZXZlbnQiLCJnbG9iYWwiLCJoYW5kbGVyIiwiZXZlbnRzIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJlbGVtIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwiaGFuZGxlT2JqIiwicmVzdWx0IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJhZGRQcm9wIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXkiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib24iLCJvbmUiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsImh0bWwiLCJjbG9uZSIsInNyYyIsIl9ldmFsVXJsIiwiS2EiLCJjbGVhbkRhdGEiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiTGEiLCJNYSIsIk5hIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNzc1RleHQiLCJtYXJnaW5MZWZ0Iiwid2lkdGgiLCJtYXJnaW5SaWdodCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJlbGlhYmxlTWFyZ2luTGVmdCIsIk9hIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJQYSIsIlFhIiwiUmEiLCJTYSIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsIlRhIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJVYSIsIlZhIiwiV2EiLCJYYSIsImNzc1Byb3BzIiwiWWEiLCJtYXgiLCJaYSIsIiRhIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsImV4cGFuZCIsImRlbGF5IiwiZngiLCJzcGVlZHMiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiX2EiLCJhYiIsInJlbW92ZUF0dHIiLCJwcm9wIiwiYXR0ckhvb2tzIiwiYmIiLCJjYiIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwicHJvcEhvb2tzIiwicGFyc2VJbnQiLCJkYiIsImViIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiaGFzQ2xhc3MiLCJmYiIsInZhbCIsInZhbEhvb2tzIiwib3B0aW9ucyIsImdiIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm9jdXNpbiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwid3JhcCIsInVud3JhcCIsImhpZGRlbiIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwidXNpbmciLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0IiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvbGRSZWFkeSIsInBhcnNlSlNPTiIsImRlZmluZSIsImFtZCIsIm1iIiwialF1ZXJ5IiwibmIiLCJub0NvbmZsaWN0IiwiZmFjdG9yeSIsInJlcXVpcmUiLCJaZXB0byIsIkNMT1NFX0VWRU5UIiwiQkVGT1JFX0NMT1NFX0VWRU5UIiwiQUZURVJfQ0xPU0VfRVZFTlQiLCJCRUZPUkVfQVBQRU5EX0VWRU5UIiwiTUFSS1VQX1BBUlNFX0VWRU5UIiwiT1BFTl9FVkVOVCIsIkNIQU5HRV9FVkVOVCIsIk5TIiwiRVZFTlRfTlMiLCJSRUFEWV9DTEFTUyIsIlJFTU9WSU5HX0NMQVNTIiwiUFJFVkVOVF9DTE9TRV9DTEFTUyIsIm1mcCIsIk1hZ25pZmljUG9wdXAiLCJfaXNKUSIsIl9wcmV2U3RhdHVzIiwiX3dpbmRvdyIsIl9kb2N1bWVudCIsIl9wcmV2Q29udGVudFR5cGUiLCJfd3JhcENsYXNzZXMiLCJfY3VyclBvcHVwVHlwZSIsIl9tZnBPbiIsImV2IiwiX2dldEVsIiwicmF3IiwiZWwiLCJfbWZwVHJpZ2dlciIsInN0IiwiY2FsbGJhY2tzIiwiY2hhckF0IiwiX2dldENsb3NlQnRuIiwiY3VyclRlbXBsYXRlIiwiY2xvc2VCdG4iLCJjbG9zZU1hcmt1cCIsInRDbG9zZSIsIl9jaGVja0luc3RhbmNlIiwibWFnbmlmaWNQb3B1cCIsImluc3RhbmNlIiwic3VwcG9ydHNUcmFuc2l0aW9ucyIsInVuZGVmaW5lZCIsImFwcFZlcnNpb24iLCJuYXZpZ2F0b3IiLCJpc0xvd0lFIiwiaXNJRTgiLCJhbGwiLCJpc0FuZHJvaWQiLCJpc0lPUyIsInN1cHBvcnRzVHJhbnNpdGlvbiIsInByb2JhYmx5TW9iaWxlIiwidXNlckFnZW50IiwicG9wdXBzQ2FjaGUiLCJvcGVuIiwiaXNPYmoiLCJpdGVtcyIsIml0ZW0iLCJwYXJzZWQiLCJpc09wZW4iLCJ1cGRhdGVJdGVtSFRNTCIsInR5cGVzIiwibWFpbkVsIiwiZGVmYXVsdHMiLCJmaXhlZENvbnRlbnRQb3MiLCJtb2RhbCIsImNsb3NlT25Db250ZW50Q2xpY2siLCJjbG9zZU9uQmdDbGljayIsInNob3dDbG9zZUJ0biIsImVuYWJsZUVzY2FwZUtleSIsImJnT3ZlcmxheSIsImNsb3NlIiwiX2NoZWNrSWZDbG9zZSIsImNvbnRhaW5lciIsImNvbnRlbnRDb250YWluZXIiLCJwcmVsb2FkZXIiLCJ0TG9hZGluZyIsIm1vZHVsZXMiLCJjbG9zZUJ0bkluc2lkZSIsInRlbXBsYXRlIiwidmFsdWVzIiwiY2xvc2VfcmVwbGFjZVdpdGgiLCJhbGlnblRvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiZml4ZWRCZ1BvcyIsImhlaWdodCIsInVwZGF0ZVNpemUiLCJ3aW5kb3dIZWlnaHQiLCJ3SCIsIndpbmRvd1N0eWxlcyIsIl9oYXNTY3JvbGxCYXIiLCJfZ2V0U2Nyb2xsYmFyU2l6ZSIsImlzSUU3IiwiY2xhc3Nlc1RvYWRkIiwibWFpbkNsYXNzIiwiX2FkZENsYXNzVG9NRlAiLCJfbGFzdEZvY3VzZWRFbCIsIl9zZXRGb2N1cyIsIl9vbkZvY3VzSW4iLCJyZW1vdmFsRGVsYXkiLCJfY2xvc2UiLCJjbGFzc2VzVG9SZW1vdmUiLCJfcmVtb3ZlQ2xhc3NGcm9tTUZQIiwiY3Vyckl0ZW0iLCJhdXRvRm9jdXNMYXN0IiwicHJldkhlaWdodCIsIndpbkhlaWdodCIsInpvb21MZXZlbCIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicGFyc2VFbCIsIm1hcmt1cCIsIm5ld0NvbnRlbnQiLCJhcHBlbmRDb250ZW50IiwicHJlbG9hZGVkIiwidGFnTmFtZSIsImFkZEdyb3VwIiwiZUhhbmRsZXIiLCJtZnBFbCIsIl9vcGVuQ2xpY2siLCJlTmFtZSIsIm1pZENsaWNrIiwiZGlzYWJsZU9uIiwidXBkYXRlU3RhdHVzIiwic3RhdHVzIiwiY2xvc2VPbkNvbnRlbnQiLCJjbG9zZU9uQmciLCJjTmFtZSIsInNjcm9sbEhlaWdodCIsIl9wYXJzZU1hcmt1cCIsImFyciIsInNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJwcm90byIsInJlZ2lzdGVyTW9kdWxlIiwianFFbCIsIml0ZW1PcHRzIiwiSU5MSU5FX05TIiwiX2hpZGRlbkNsYXNzIiwiX2lubGluZVBsYWNlaG9sZGVyIiwiX2xhc3RJbmxpbmVFbGVtZW50IiwiX3B1dElubGluZUVsZW1lbnRzQmFjayIsImhpZGRlbkNsYXNzIiwidE5vdEZvdW5kIiwiaW5pdElubGluZSIsImdldElubGluZSIsImlubGluZVN0IiwiaW5saW5lIiwiaW5saW5lRWxlbWVudCIsIkFKQVhfTlMiLCJfYWpheEN1ciIsIl9yZW1vdmVBamF4Q3Vyc29yIiwiX2Rlc3Ryb3lBamF4UmVxdWVzdCIsInJlcSIsImFib3J0Iiwic2V0dGluZ3MiLCJjdXJzb3IiLCJ0RXJyb3IiLCJpbml0QWpheCIsImFqYXgiLCJnZXRBamF4Iiwib3B0cyIsInVybCIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJ0ZW1wIiwieGhyIiwiZmluaXNoZWQiLCJsb2FkRXJyb3IiLCJfaW1nSW50ZXJ2YWwiLCJfZ2V0VGl0bGUiLCJ0aXRsZSIsInRpdGxlU3JjIiwidmVydGljYWxGaXQiLCJpbml0SW1hZ2UiLCJpbWdTdCIsIm5zIiwicmVzaXplSW1hZ2UiLCJpbWciLCJkZWNyIiwiX29uSW1hZ2VIYXNTaXplIiwiaGFzU2l6ZSIsImNsZWFySW50ZXJ2YWwiLCJpc0NoZWNraW5nSW1nU2l6ZSIsImltZ0hpZGRlbiIsImZpbmRJbWFnZVNpemUiLCJjb3VudGVyIiwibWZwU2V0SW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIm5hdHVyYWxXaWR0aCIsImdldEltYWdlIiwiZ3VhcmQiLCJvbkxvYWRDb21wbGV0ZSIsImNvbXBsZXRlIiwibG9hZGVkIiwib25Mb2FkRXJyb3IiLCJhbHQiLCJpbWdfcmVwbGFjZVdpdGgiLCJsb2FkaW5nIiwiaGFzTW96VHJhbnNmb3JtIiwiZ2V0SGFzTW96VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiZWFzaW5nIiwiZHVyYXRpb24iLCJlbGVtZW50IiwiaW5pdFpvb20iLCJ6b29tU3QiLCJnZXRFbFRvQW5pbWF0ZSIsIm5ld0ltZyIsInRyYW5zaXRpb24iLCJjc3NPYmoiLCJzaG93TWFpbkNvbnRlbnQiLCJvcGVuVGltZW91dCIsImFuaW1hdGVkSW1nIiwiX2FsbG93Wm9vbSIsIl9nZXRJdGVtVG9ab29tIiwiX2dldE9mZnNldCIsImlzTGFyZ2UiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm9iaiIsIklGUkFNRV9OUyIsIl9lbXB0eVBhZ2UiLCJfZml4SWZyYW1lQnVncyIsImlzU2hvd2luZyIsInNyY0FjdGlvbiIsInBhdHRlcm5zIiwieW91dHViZSIsInZpbWVvIiwiZ21hcHMiLCJpbml0SWZyYW1lIiwicHJldlR5cGUiLCJuZXdUeXBlIiwiZ2V0SWZyYW1lIiwiZW1iZWRTcmMiLCJpZnJhbWVTdCIsImlmcmFtZSIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiZGF0YU9iaiIsIl9nZXRMb29wZWRJZCIsIm51bVNsaWRlcyIsIl9yZXBsYWNlQ3VyclRvdGFsIiwiY3VyciIsInRvdGFsIiwiYXJyb3dNYXJrdXAiLCJwcmVsb2FkIiwibmF2aWdhdGVCeUltZ0NsaWNrIiwiYXJyb3dzIiwidFByZXYiLCJ0TmV4dCIsInRDb3VudGVyIiwiaW5pdEdhbGxlcnkiLCJnU3QiLCJnYWxsZXJ5IiwiZGlyZWN0aW9uIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsIl9wcmVsb2FkVGltZW91dCIsInByZWxvYWROZWFyYnlJbWFnZXMiLCJnb1RvIiwibmV3SW5kZXgiLCJwcmVsb2FkQmVmb3JlIiwibWluIiwicHJlbG9hZEFmdGVyIiwiX3ByZWxvYWRJdGVtIiwiUkVUSU5BX05TIiwicmVwbGFjZVNyYyIsInJhdGlvIiwiaW5pdFJldGluYSIsImRldmljZVBpeGVsUmF0aW8iLCJyZXRpbmEiLCJibG9ja3MiLCJmb3JFYWNoIiwiY2xhc3NMaXN0IiwibG9nIiwibmF2YmFyIiwicXVlcnlTZWxlY3RvciIsIm1lbnVCdG4iLCJjaXR5QnRuIiwiZHJvcGRvd25zIiwic2hvd05hdmJhckJnIiwiaGlkZU5hdmJhckJnIiwic2hvd0Ryb3Bkb3duIiwiZHJvcGRvd24iLCJoaWRlRHJvcGRvd24iLCJwb2ludGVyIiwicG9pbnRlclNoaWZ0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxDQUFBLFVBQUFBLENBQUEsRUFBQUMsQ0FBQSxFQUFBO0FBQUE7O0FBQUEsc0JBQUFDLE1BQUEseUNBQUFBLE1BQUEsTUFBQSxvQkFBQUEsTUFBQSxDQUFBQyxPQUFBLENBQUEsR0FBQUQsTUFBQSxDQUFBQyxPQUFBLEdBQUFILENBQUEsQ0FBQUksUUFBQSxHQUFBSCxDQUFBLENBQUFELENBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLFVBQUFBLENBQUEsRUFBQTtBQUFBLFFBQUEsQ0FBQUEsQ0FBQSxDQUFBSSxRQUFBLEVBQUEsTUFBQSxJQUFBQyxLQUFBLENBQUEsMENBQUEsQ0FBQTtBQUFBLFdBQUFKLENBQUEsQ0FBQUQsQ0FBQSxDQUFBO0FBQUEsR0FBQSxHQUFBQyxDQUFBLENBQUFELENBQUEsQ0FBQTtBQUFBLENBQUEsQ0FBQSxlQUFBLE9BQUFNLE1BQUEsR0FBQUEsTUFBQSxTQUFBLEVBQUEsVUFBQU4sQ0FBQSxFQUFBQyxDQUFBLEVBQUE7QUFBQTs7QUFBQSxNQUFBTSxDQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUFDLENBQUEsR0FBQVIsQ0FBQSxDQUFBSSxRQUFBO0FBQUEsTUFBQUssQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUE7QUFBQSxNQUFBQyxDQUFBLEdBQUFMLENBQUEsQ0FBQU0sS0FBQTtBQUFBLE1BQUFDLENBQUEsR0FBQVAsQ0FBQSxDQUFBUSxNQUFBO0FBQUEsTUFBQUMsQ0FBQSxHQUFBVCxDQUFBLENBQUFVLElBQUE7QUFBQSxNQUFBQyxDQUFBLEdBQUFYLENBQUEsQ0FBQVksT0FBQTtBQUFBLE1B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QUUsQ0FBQSxHQUFBLElBQUFDLE1BQUEsQ0FBQUwsQ0FBQSxHQUFBLEdBQUEsRUFBQSxHQUFBLENBQUE7QUFBQSxRQUFBTSxDQUFBLEdBQUEsSUFBQUQsTUFBQSxDQUFBLE1BQUFMLENBQUEsR0FBQSw2QkFBQSxHQUFBQSxDQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFPLENBQUEsR0FBQSxJQUFBRixNQUFBLENBQUEsTUFBQUwsQ0FBQSxHQUFBLElBQUEsR0FBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFRLENBQUEsR0FBQSxJQUFBSCxNQUFBLENBQUEsTUFBQUwsQ0FBQSxHQUFBLFVBQUEsR0FBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFTLENBQUEsR0FBQSxJQUFBSixNQUFBLENBQUEsTUFBQUwsQ0FBQSxHQUFBLGdCQUFBLEdBQUFBLENBQUEsR0FBQSxNQUFBLEVBQUEsR0FBQSxDQUFBO0FBQUEsUUFBQVUsQ0FBQSxHQUFBLElBQUFMLE1BQUEsQ0FBQUYsQ0FBQSxDQUFBO0FBQUEsUUFBQVEsQ0FBQSxHQUFBLElBQUFOLE1BQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUEsR0FBQSxDQUFBO0FBQUEsUUFBQVcsQ0FBQSxHQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxJQUFBUixNQUFBLENBQUEsUUFBQUosQ0FBQSxHQUFBLEdBQUEsQ0FBQTtBQUFBYSxNQUFBQSxLQUFBLEVBQUEsSUFBQVQsTUFBQSxDQUFBLFVBQUFKLENBQUEsR0FBQSxHQUFBLENBQUE7QUFBQWMsTUFBQUEsR0FBQSxFQUFBLElBQUFWLE1BQUEsQ0FBQSxPQUFBSixDQUFBLEdBQUEsT0FBQSxDQUFBO0FBQUFlLE1BQUFBLElBQUEsRUFBQSxJQUFBWCxNQUFBLENBQUEsTUFBQUgsQ0FBQSxDQUFBO0FBQUFlLE1BQUFBLE1BQUEsRUFBQSxJQUFBWixNQUFBLENBQUEsTUFBQUYsQ0FBQSxDQUFBO0FBQUFlLE1BQUFBLEtBQUEsRUFBQSxJQUFBYixN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QXZDLFFBQUFBLEtBQUEsRUFBQStILEVBQUEsQ0FBQSxZQUFBO0FBQUEsaUJBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxTQUFBLENBQUE7QUFBQTdILFFBQUFBLElBQUEsRUFBQTZILEVBQUEsQ0FBQSxVQUFBekwsQ0FBQSxFQUFBQyxDQUFBLEVBQUE7QUFBQSxpQkFBQSxDQUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQUEsU0FBQSxDQUFBO0FBQUEwRCxRQUFBQSxFQUFBLEVBQUE4SCxFQUFBLENBQUEsVUFBQXpMLENBQUEsRUFBQUMsQ0FBQSxFQUFBTSxDQUFBLEVBQUE7QUFBQSxpQkFBQSxDQUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBQSxDQUFBLEdBQUFOLENBQUEsR0FBQU0sQ0FBQSxDQUFBO0FBQUEsU0FBQSxDQUFBO0FBQUF3UCxRQUFBQSxJQUFBLEVBQUF0RSxFQUFBLENBQUEsVUFBQXpMLENBQUEsRUFBQUMsQ0FBQSxFQUFBO0FBQUEsZUFBQSxJQUFBTSxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUFOLENBQUEsRUFBQU0sQ0FBQSxJQUFBLENBQUE7QUFBQVAsWUFBQUEsQ0FBQSxDQUFBaUIsSUFBQSxDQUFBVixDQUFBO0FBQUE7O0FBQUEsaUJBQUFQLENBQUE7QUFBQSxTQUFBLENBQUE7QUFBQWdRLFFBQUFBLEdBQUEsRUFBQXZFLEVBQUEsQ0FBQSxVQUFBekwsQ0FBQSxFQUFBQyxDQUFBLEVBQUE7QUFBQSxlQUFBLElBQUFNLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQU4sQ0FBQSxFQUFBTSxDQUFBLElBQUEsQ0FBQTtBQUFBUCxZQUFBQSxDQUFBLENBQUFpQixJQUFBLENBQUFWLENBQUE7QUFBQTs7QUFBQSxpQkFBQVAsQ0FBQTtBQUFBLFNBQUEsQ0FBQTtBQUFBaVEsUUFBQUEsRUFBQSxFQUFBeEUsRUFBQSxDQUFBLFVBQUF6TCxDQUFBLEVBQUFDLENBQUEsRUFBQU0sQ0FBQSxFQUFBO0FBQUEsZUFBQSxJQUFBQyxDQUFBLEdBQUFELENBQUEsR0FBQSxDQUFBLEdB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QUEsWUFBQSxFQUFBc3VCLFlBQUE7QUFDQU4sSUFBQUEsT0FBQSxDQUFBaHVCLGdCQUFBLENBQUEsWUFBQSxFQUFBc3VCLFlBQUE7QUFDQSxHQVZBLE1BV0E7QUFDQVQsSUFBQUEsTUFBQSxDQUFBcmtCLG1CQUFBLENBQUEsV0FBQSxFQUFBMGtCLFlBQUE7QUFDQUgsSUFBQUEsT0FBQSxDQUFBdmtCLG1CQUFBLENBQUEsV0FBQSxFQUFBNGtCLFlBQUE7QUFDQUosSUFBQUEsT0FBQSxDQUFBeGtCLG1CQUFBLENBQUEsV0FBQSxFQUFBNGtCLFlBQUE7QUFDQTtBQUNBOztBQUVBNTNCLElBQUE7QUFDQWpDLE1BQUEsQ0FBQXlMLGdCQUFBLENBQUEsUUFBQSxFQUFBLFlBQUE7QUFDQXhKLEVBQUFBLElBQUE7QUFDQSxDQUZBO0FBTUEsSUFBQSszQixPQUFBLEdBQUFsNkIsUUFBQSxDQUFBeTVCLGFBQUEsQ0FBQSxlQUFBLENBQUE7QUFDQSxJQUFBVSxZQUFBLEdBQUEsQ0FBQTtBQUNBbkcsV0FBQSxDQUFBLFlBQUE7QUFDQW1HLEVBQUFBLFlBQUEsSUFBQSxFQUFBO0FBQ0FBLEVBQUFBLFlBQUEsR0FBQSxDQUFBLEdBQUEsR0FBQUEsWUFBQSxHQUFBLENBQUEsR0FBQSxFQUFBO0FBQ0FELEVBQUFBLE9BQUEsQ0FBQXpqQixLQUFBLENBQUFrTSxJQUFBLEdBQUF3WCxZQUFBLEdBQUEsSUFBQTtBQUNBLENBSkEsRUFJQSxJQUpBLENBQUEiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgalF1ZXJ5IHYzLjIuMSAtYWpheCwtYWpheC9qc29ucCwtYWpheC9sb2FkLC1hamF4L3BhcnNlWE1MLC1hamF4L3NjcmlwdCwtYWpheC92YXIvbG9jYXRpb24sLWFqYXgvdmFyL25vbmNlLC1hamF4L3Zhci9ycXVlcnksLWFqYXgveGhyLC1tYW5pcHVsYXRpb24vX2V2YWxVcmwsLWV2ZW50L2FqYXgsLWVmZmVjdHMsLWVmZmVjdHMvVHdlZW4sLWVmZmVjdHMvYW5pbWF0ZWRTZWxlY3RvciB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1hLmRvY3VtZW50P2IoYSwhMCk6ZnVuY3Rpb24oYSl7aWYoIWEuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gYihhKX06YihhKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO3ZhciBjPVtdLGQ9YS5kb2N1bWVudCxlPU9iamVjdC5nZXRQcm90b3R5cGVPZixmPWMuc2xpY2UsZz1jLmNvbmNhdCxoPWMucHVzaCxpPWMuaW5kZXhPZixqPXt9LGs9ai50b1N0cmluZyxsPWouaGFzT3duUHJvcGVydHksbT1sLnRvU3RyaW5nLG49bS5jYWxsKE9iamVjdCksbz17fTtmdW5jdGlvbiBwKGEsYil7Yj1ifHxkO3ZhciBjPWIuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtjLnRleHQ9YSxiLmhlYWQuYXBwZW5kQ2hpbGQoYykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKX12YXIgcT1cIjMuMi4xIC1hamF4LC1hamF4L2pzb25wLC1hamF4L2xvYWQsLWFqYXgvcGFyc2VYTUwsLWFqYXgvc2NyaXB0LC1hamF4L3Zhci9sb2NhdGlvbiwtYWpheC92YXIvbm9uY2UsLWFqYXgvdmFyL3JxdWVyeSwtYWpheC94aHIsLW1hbmlwdWxhdGlvbi9fZXZhbFVybCwtZXZlbnQvYWpheCwtZWZmZWN0cywtZWZmZWN0cy9Ud2VlbiwtZWZmZWN0cy9hbmltYXRlZFNlbGVjdG9yXCIscj1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgci5mbi5pbml0KGEsYil9LHM9L15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLHQ9L14tbXMtLyx1PS8tKFthLXpdKS9nLHY9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfTtyLmZuPXIucHJvdG90eXBlPXtqcXVlcnk6cSxjb25zdHJ1Y3RvcjpyLGxlbmd0aDowLHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gZi5jYWxsKHRoaXMpfSxnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/Zi5jYWxsKHRoaXMpOmE8MD90aGlzW2ErdGhpcy5sZW5ndGhdOnRoaXNbYV19LHB1c2hTdGFjazpmdW5jdGlvbihhKXt2YXIgYj1yLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSxhKTtyZXR1cm4gYi5wcmV2T2JqZWN0PXRoaXMsYn0sZWFjaDpmdW5jdGlvbihhKXtyZXR1cm4gci5lYWNoKHRoaXMsYSl9LG1hcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soci5tYXAodGhpcyxmdW5jdGlvbihiLGMpe3JldHVybiBhLmNhbGwoYixjLGIpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhmLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMubGVuZ3RoLGM9K2ErKGE8MD9iOjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhjPj0wJiZjPGI/W3RoaXNbY11dOltdKX0sZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJldk9iamVjdHx8dGhpcy5jb25zdHJ1Y3RvcigpfSxwdXNoOmgsc29ydDpjLnNvcnQsc3BsaWNlOmMuc3BsaWNlfSxyLmV4dGVuZD1yLmZuLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnPWFyZ3VtZW50c1swXXx8e30saD0xLGk9YXJndW1lbnRzLmxlbmd0aCxqPSExO2ZvcihcImJvb2xlYW5cIj09dHlwZW9mIGcmJihqPWcsZz1hcmd1bWVudHNbaF18fHt9LGgrKyksXCJvYmplY3RcIj09dHlwZW9mIGd8fHIuaXNGdW5jdGlvbihnKXx8KGc9e30pLGg9PT1pJiYoZz10aGlzLGgtLSk7aDxpO2grKylpZihudWxsIT0oYT1hcmd1bWVudHNbaF0pKWZvcihiIGluIGEpYz1nW2JdLGQ9YVtiXSxnIT09ZCYmKGomJmQmJihyLmlzUGxhaW5PYmplY3QoZCl8fChlPUFycmF5LmlzQXJyYXkoZCkpKT8oZT8oZT0hMSxmPWMmJkFycmF5LmlzQXJyYXkoYyk/YzpbXSk6Zj1jJiZyLmlzUGxhaW5PYmplY3QoYyk/Yzp7fSxnW2JdPXIuZXh0ZW5kKGosZixkKSk6dm9pZCAwIT09ZCYmKGdbYl09ZCkpO3JldHVybiBnfSxyLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhxK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKGEpfSxub29wOmZ1bmN0aW9uKCl7fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PXIudHlwZShhKX0saXNXaW5kb3c6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWEmJmE9PT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3ZhciBiPXIudHlwZShhKTtyZXR1cm4oXCJudW1iZXJcIj09PWJ8fFwic3RyaW5nXCI9PT1iKSYmIWlzTmFOKGEtcGFyc2VGbG9hdChhKSl9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGIsYztyZXR1cm4hKCFhfHxcIltvYmplY3QgT2JqZWN0XVwiIT09ay5jYWxsKGEpKSYmKCEoYj1lKGEpKXx8KGM9bC5jYWxsKGIsXCJjb25zdHJ1Y3RvclwiKSYmYi5jb25zdHJ1Y3RvcixcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZtLmNhbGwoYyk9PT1uKSl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7Zm9yKGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH0sdHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9hK1wiXCI6XCJvYmplY3RcIj09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGE/altrLmNhbGwoYSldfHxcIm9iamVjdFwiOnR5cGVvZiBhfSxnbG9iYWxFdmFsOmZ1bmN0aW9uKGEpe3AoYSl9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHQsXCJtcy1cIikucmVwbGFjZSh1LHYpfSxlYWNoOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0wO2lmKHcoYSkpe2ZvcihjPWEubGVuZ3RoO2Q8YztkKyspaWYoYi5jYWxsKGFbZF0sZCxhW2RdKT09PSExKWJyZWFrfWVsc2UgZm9yKGQgaW4gYSlpZihiLmNhbGwoYVtkXSxkLGFbZF0pPT09ITEpYnJlYWs7cmV0dXJuIGF9LHRyaW06ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjooYStcIlwiKS5yZXBsYWNlKHMsXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fFtdO3JldHVybiBudWxsIT1hJiYodyhPYmplY3QoYSkpP3IubWVyZ2UoYyxcInN0cmluZ1wiPT10eXBlb2YgYT9bYV06YSk6aC5jYWxsKGMsYSkpLGN9LGluQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBudWxsPT1iPy0xOmkuY2FsbChiLGEsYyl9LG1lcmdlOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPStiLmxlbmd0aCxkPTAsZT1hLmxlbmd0aDtkPGM7ZCsrKWFbZSsrXT1iW2RdO3JldHVybiBhLmxlbmd0aD1lLGF9LGdyZXA6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZCxlPVtdLGY9MCxnPWEubGVuZ3RoLGg9IWM7ZjxnO2YrKylkPSFiKGFbZl0sZiksZCE9PWgmJmUucHVzaChhW2ZdKTtyZXR1cm4gZX0sbWFwOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9MCxoPVtdO2lmKHcoYSkpZm9yKGQ9YS5sZW5ndGg7ZjxkO2YrKyllPWIoYVtmXSxmLGMpLG51bGwhPWUmJmgucHVzaChlKTtlbHNlIGZvcihmIGluIGEpZT1iKGFbZl0sZixjKSxudWxsIT1lJiZoLnB1c2goZSk7cmV0dXJuIGcuYXBwbHkoW10saCl9LGd1aWQ6MSxwcm94eTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZTtpZihcInN0cmluZ1wiPT10eXBlb2YgYiYmKGM9YVtiXSxiPWEsYT1jKSxyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIGQ9Zi5jYWxsKGFyZ3VtZW50cywyKSxlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYnx8dGhpcyxkLmNvbmNhdChmLmNhbGwoYXJndW1lbnRzKSkpfSxlLmd1aWQ9YS5ndWlkPWEuZ3VpZHx8ci5ndWlkKyssZX0sbm93OkRhdGUubm93LHN1cHBvcnQ6b30pLFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHIuZm5bU3ltYm9sLml0ZXJhdG9yXT1jW1N5bWJvbC5pdGVyYXRvcl0pLHIuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7altcIltvYmplY3QgXCIrYitcIl1cIl09Yi50b0xvd2VyQ2FzZSgpfSk7ZnVuY3Rpb24gdyhhKXt2YXIgYj0hIWEmJlwibGVuZ3RoXCJpbiBhJiZhLmxlbmd0aCxjPXIudHlwZShhKTtyZXR1cm5cImZ1bmN0aW9uXCIhPT1jJiYhci5pc1dpbmRvdyhhKSYmKFwiYXJyYXlcIj09PWN8fDA9PT1ifHxcIm51bWJlclwiPT10eXBlb2YgYiYmYj4wJiZiLTEgaW4gYSl9dmFyIHg9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaSxqLGssbCxtLG4sbyxwLHEscixzLHQsdT1cInNpenpsZVwiKzEqbmV3IERhdGUsdj1hLmRvY3VtZW50LHc9MCx4PTAseT1oYSgpLHo9aGEoKSxBPWhhKCksQj1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09YiYmKGw9ITApLDB9LEM9e30uaGFzT3duUHJvcGVydHksRD1bXSxFPUQucG9wLEY9RC5wdXNoLEc9RC5wdXNoLEg9RC5zbGljZSxJPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKWlmKGFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSxKPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixLPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixMPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixNPVwiXFxcXFtcIitLK1wiKihcIitMK1wiKSg/OlwiK0srXCIqKFsqXiR8IX5dPz0pXCIrSytcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK0wrXCIpKXwpXCIrSytcIipcXFxcXVwiLE49XCI6KFwiK0wrXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK00rXCIpKil8LiopXFxcXCl8KVwiLE89bmV3IFJlZ0V4cChLK1wiK1wiLFwiZ1wiKSxQPW5ldyBSZWdFeHAoXCJeXCIrSytcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrSytcIiskXCIsXCJnXCIpLFE9bmV3IFJlZ0V4cChcIl5cIitLK1wiKixcIitLK1wiKlwiKSxSPW5ldyBSZWdFeHAoXCJeXCIrSytcIiooWz4rfl18XCIrSytcIilcIitLK1wiKlwiKSxTPW5ldyBSZWdFeHAoXCI9XCIrSytcIiooW15cXFxcXSdcXFwiXSo/KVwiK0srXCIqXFxcXF1cIixcImdcIiksVD1uZXcgUmVnRXhwKE4pLFU9bmV3IFJlZ0V4cChcIl5cIitMK1wiJFwiKSxWPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrTCtcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitMK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrTCtcInxbKl0pXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitNKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitOKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitLK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrSytcIiooPzooWystXXwpXCIrSytcIiooXFxcXGQrKXwpKVwiK0srXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrSitcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK0srXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK0srXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK0srXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LFc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxYPS9eaFxcZCQvaSxZPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sWj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLywkPS9bK35dLyxfPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitLK1wiP3woXCIrSytcIil8LilcIixcImlnXCIpLGFhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cIjB4XCIrYi02NTUzNjtyZXR1cm4gZCE9PWR8fGM/YjpkPDA/U3RyaW5nLmZyb21DaGFyQ29kZShkKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGQ+PjEwfDU1Mjk2LDEwMjMmZHw1NjMyMCl9LGJhPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLGNhPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/XCJcXDBcIj09PWE/XCJcXHVmZmZkXCI6YS5zbGljZSgwLC0xKStcIlxcXFxcIithLmNoYXJDb2RlQXQoYS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2F9LGRhPWZ1bmN0aW9uKCl7bSgpfSxlYT10YShmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSEwJiYoXCJmb3JtXCJpbiBhfHxcImxhYmVsXCJpbiBhKX0se2RpcjpcInBhcmVudE5vZGVcIixuZXh0OlwibGVnZW5kXCJ9KTt0cnl7Ry5hcHBseShEPUguY2FsbCh2LmNoaWxkTm9kZXMpLHYuY2hpbGROb2RlcyksRFt2LmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChmYSl7Rz17YXBwbHk6RC5sZW5ndGg/ZnVuY3Rpb24oYSxiKXtGLmFwcGx5KGEsSC5jYWxsKGIpKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aCxkPTA7d2hpbGUoYVtjKytdPWJbZCsrXSk7YS5sZW5ndGg9Yy0xfX19ZnVuY3Rpb24gZ2EoYSxiLGQsZSl7dmFyIGYsaCxqLGssbCxvLHIscz1iJiZiLm93bmVyRG9jdW1lbnQsdz1iP2Iubm9kZVR5cGU6OTtpZihkPWR8fFtdLFwic3RyaW5nXCIhPXR5cGVvZiBhfHwhYXx8MSE9PXcmJjkhPT13JiYxMSE9PXcpcmV0dXJuIGQ7aWYoIWUmJigoYj9iLm93bmVyRG9jdW1lbnR8fGI6dikhPT1uJiZtKGIpLGI9Ynx8bixwKSl7aWYoMTEhPT13JiYobD1aLmV4ZWMoYSkpKWlmKGY9bFsxXSl7aWYoOT09PXcpe2lmKCEoaj1iLmdldEVsZW1lbnRCeUlkKGYpKSlyZXR1cm4gZDtpZihqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZSBpZihzJiYoaj1zLmdldEVsZW1lbnRCeUlkKGYpKSYmdChiLGopJiZqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZXtpZihsWzJdKXJldHVybiBHLmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKSksZDtpZigoZj1sWzNdKSYmYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEcuYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZikpLGR9aWYoYy5xc2EmJiFBW2ErXCIgXCJdJiYoIXF8fCFxLnRlc3QoYSkpKXtpZigxIT09dylzPWIscj1hO2Vsc2UgaWYoXCJvYmplY3RcIiE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSl7KGs9Yi5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk/az1rLnJlcGxhY2UoYmEsY2EpOmIuc2V0QXR0cmlidXRlKFwiaWRcIixrPXUpLG89ZyhhKSxoPW8ubGVuZ3RoO3doaWxlKGgtLSlvW2hdPVwiI1wiK2srXCIgXCIrc2Eob1toXSk7cj1vLmpvaW4oXCIsXCIpLHM9JC50ZXN0KGEpJiZxYShiLnBhcmVudE5vZGUpfHxifWlmKHIpdHJ5e3JldHVybiBHLmFwcGx5KGQscy5xdWVyeVNlbGVjdG9yQWxsKHIpKSxkfWNhdGNoKHgpe31maW5hbGx5e2s9PT11JiZiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIGkoYS5yZXBsYWNlKFAsXCIkMVwiKSxiLGQsZSl9ZnVuY3Rpb24gaGEoKXt2YXIgYT1bXTtmdW5jdGlvbiBiKGMsZSl7cmV0dXJuIGEucHVzaChjK1wiIFwiKT5kLmNhY2hlTGVuZ3RoJiZkZWxldGUgYlthLnNoaWZ0KCldLGJbYytcIiBcIl09ZX1yZXR1cm4gYn1mdW5jdGlvbiBpYShhKXtyZXR1cm4gYVt1XT0hMCxhfWZ1bmN0aW9uIGphKGEpe3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWEoYil9Y2F0Y2goYyl7cmV0dXJuITF9ZmluYWxseXtiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGx9fWZ1bmN0aW9uIGthKGEsYil7dmFyIGM9YS5zcGxpdChcInxcIiksZT1jLmxlbmd0aDt3aGlsZShlLS0pZC5hdHRySGFuZGxlW2NbZV1dPWJ9ZnVuY3Rpb24gbGEoYSxiKXt2YXIgYz1iJiZhLGQ9YyYmMT09PWEubm9kZVR5cGUmJjE9PT1iLm5vZGVUeXBlJiZhLnNvdXJjZUluZGV4LWIuc291cmNlSW5kZXg7aWYoZClyZXR1cm4gZDtpZihjKXdoaWxlKGM9Yy5uZXh0U2libGluZylpZihjPT09YilyZXR1cm4tMTtyZXR1cm4gYT8xOi0xfWZ1bmN0aW9uIG1hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YyYmYi50eXBlPT09YX19ZnVuY3Rpb24gbmEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oXCJpbnB1dFwiPT09Y3x8XCJidXR0b25cIj09PWMpJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBvYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuXCJmb3JtXCJpbiBiP2IucGFyZW50Tm9kZSYmYi5kaXNhYmxlZD09PSExP1wibGFiZWxcImluIGI/XCJsYWJlbFwiaW4gYi5wYXJlbnROb2RlP2IucGFyZW50Tm9kZS5kaXNhYmxlZD09PWE6Yi5kaXNhYmxlZD09PWE6Yi5pc0Rpc2FibGVkPT09YXx8Yi5pc0Rpc2FibGVkIT09IWEmJmVhKGIpPT09YTpiLmRpc2FibGVkPT09YTpcImxhYmVsXCJpbiBiJiZiLmRpc2FibGVkPT09YX19ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGlhKGZ1bmN0aW9uKGIpe3JldHVybiBiPStiLGlhKGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKFtdLGMubGVuZ3RoLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWNbZT1mW2ddXSYmKGNbZV09IShkW2VdPWNbZV0pKX0pfSl9ZnVuY3Rpb24gcWEoYSl7cmV0dXJuIGEmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZhfWM9Z2Euc3VwcG9ydD17fSxmPWdhLmlzWE1MPWZ1bmN0aW9uKGEpe3ZhciBiPWEmJihhLm93bmVyRG9jdW1lbnR8fGEpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hIWImJlwiSFRNTFwiIT09Yi5ub2RlTmFtZX0sbT1nYS5zZXREb2N1bWVudD1mdW5jdGlvbihhKXt2YXIgYixlLGc9YT9hLm93bmVyRG9jdW1lbnR8fGE6djtyZXR1cm4gZyE9PW4mJjk9PT1nLm5vZGVUeXBlJiZnLmRvY3VtZW50RWxlbWVudD8obj1nLG89bi5kb2N1bWVudEVsZW1lbnQscD0hZihuKSx2IT09biYmKGU9bi5kZWZhdWx0VmlldykmJmUudG9wIT09ZSYmKGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixkYSwhMSk6ZS5hdHRhY2hFdmVudCYmZS5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsZGEpKSxjLmF0dHJpYnV0ZXM9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NOYW1lPVwiaVwiLCFhLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQobi5jcmVhdGVDb21tZW50KFwiXCIpKSwhYS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPVkudGVzdChuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGMuZ2V0QnlJZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gby5hcHBlbmRDaGlsZChhKS5pZD11LCFuLmdldEVsZW1lbnRzQnlOYW1lfHwhbi5nZXRFbGVtZW50c0J5TmFtZSh1KS5sZW5ndGh9KSxjLmdldEJ5SWQ/KGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKTtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT1ifX0sZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQmJnApe3ZhciBjPWIuZ2V0RWxlbWVudEJ5SWQoYSk7cmV0dXJuIGM/W2NdOltdfX0pOihkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoXyxhYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUmJmEuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBjJiZjLnZhbHVlPT09Yn19LGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRCeUlkJiZwKXt2YXIgYyxkLGUsZj1iLmdldEVsZW1lbnRCeUlkKGEpO2lmKGYpe2lmKGM9Zi5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIiksYyYmYy52YWx1ZT09PWEpcmV0dXJuW2ZdO2U9Yi5nZXRFbGVtZW50c0J5TmFtZShhKSxkPTA7d2hpbGUoZj1lW2QrK10paWYoYz1mLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSxjJiZjLnZhbHVlPT09YSlyZXR1cm5bZl19cmV0dXJuW119fSksZC5maW5kLlRBRz1jLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeVRhZ05hbWU/Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTpjLnFzYT9iLnF1ZXJ5U2VsZWN0b3JBbGwoYSk6dm9pZCAwfTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT0wLGY9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTtpZihcIipcIj09PWEpe3doaWxlKGM9ZltlKytdKTE9PT1jLm5vZGVUeXBlJiZkLnB1c2goYyk7cmV0dXJuIGR9cmV0dXJuIGZ9LGQuZmluZC5DTEFTUz1jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmcClyZXR1cm4gYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpfSxyPVtdLHE9W10sKGMucXNhPVkudGVzdChuLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGphKGZ1bmN0aW9uKGEpe28uYXBwZW5kQ2hpbGQoYSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK3UrXCInPjwvYT48c2VsZWN0IGlkPSdcIit1K1wiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsYS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZxLnB1c2goXCJbKl4kXT1cIitLK1wiKig/OicnfFxcXCJcXFwiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8cS5wdXNoKFwiXFxcXFtcIitLK1wiKig/OnZhbHVlfFwiK0orXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrdStcIi1dXCIpLmxlbmd0aHx8cS5wdXNoKFwifj1cIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxxLnB1c2goXCI6Y2hlY2tlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK3UrXCIrKlwiKS5sZW5ndGh8fHEucHVzaChcIi4jLitbK35dXCIpfSksamEoZnVuY3Rpb24oYSl7YS5pbm5lckhUTUw9XCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjt2YXIgYj1uLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtiLnNldEF0dHJpYnV0ZShcInR5cGVcIixcImhpZGRlblwiKSxhLmFwcGVuZENoaWxkKGIpLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcIkRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoJiZxLnB1c2goXCJuYW1lXCIrSytcIipbKl4kfCF+XT89XCIpLDIhPT1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGgmJnEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksby5hcHBlbmRDaGlsZChhKS5kaXNhYmxlZD0hMCwyIT09YS5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCYmcS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHEucHVzaChcIiwuKjpcIil9KSksKGMubWF0Y2hlc1NlbGVjdG9yPVkudGVzdChzPW8ubWF0Y2hlc3x8by53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fG8ubW96TWF0Y2hlc1NlbGVjdG9yfHxvLm9NYXRjaGVzU2VsZWN0b3J8fG8ubXNNYXRjaGVzU2VsZWN0b3IpKSYmamEoZnVuY3Rpb24oYSl7Yy5kaXNjb25uZWN0ZWRNYXRjaD1zLmNhbGwoYSxcIipcIikscy5jYWxsKGEsXCJbcyE9JyddOnhcIiksci5wdXNoKFwiIT1cIixOKX0pLHE9cS5sZW5ndGgmJm5ldyBSZWdFeHAocS5qb2luKFwifFwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSxiPVkudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx0PWJ8fFkudGVzdChvLmNvbnRhaW5zKT9mdW5jdGlvbihhLGIpe3ZhciBjPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1kfHwhKCFkfHwxIT09ZC5ub2RlVHlwZXx8IShjLmNvbnRhaW5zP2MuY29udGFpbnMoZCk6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkKSkpfTpmdW5jdGlvbihhLGIpe2lmKGIpd2hpbGUoYj1iLnBhcmVudE5vZGUpaWYoYj09PWEpcmV0dXJuITA7cmV0dXJuITF9LEI9Yj9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGQ9IWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQ/ZDooZD0oYS5vd25lckRvY3VtZW50fHxhKT09PShiLm93bmVyRG9jdW1lbnR8fGIpP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik6MSwxJmR8fCFjLnNvcnREZXRhY2hlZCYmYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKT09PWQ/YT09PW58fGEub3duZXJEb2N1bWVudD09PXYmJnQodixhKT8tMTpiPT09bnx8Yi5vd25lckRvY3VtZW50PT09diYmdCh2LGIpPzE6az9JKGssYSktSShrLGIpOjA6NCZkPy0xOjEpfTpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGMsZD0wLGU9YS5wYXJlbnROb2RlLGY9Yi5wYXJlbnROb2RlLGc9W2FdLGg9W2JdO2lmKCFlfHwhZilyZXR1cm4gYT09PW4/LTE6Yj09PW4/MTplPy0xOmY/MTprP0koayxhKS1JKGssYik6MDtpZihlPT09ZilyZXR1cm4gbGEoYSxiKTtjPWE7d2hpbGUoYz1jLnBhcmVudE5vZGUpZy51bnNoaWZ0KGMpO2M9Yjt3aGlsZShjPWMucGFyZW50Tm9kZSloLnVuc2hpZnQoYyk7d2hpbGUoZ1tkXT09PWhbZF0pZCsrO3JldHVybiBkP2xhKGdbZF0saFtkXSk6Z1tkXT09PXY/LTE6aFtkXT09PXY/MTowfSxuKTpufSxnYS5tYXRjaGVzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdhKGEsbnVsbCxudWxsLGIpfSxnYS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oYSxiKXtpZigoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksYj1iLnJlcGxhY2UoUyxcIj0nJDEnXVwiKSxjLm1hdGNoZXNTZWxlY3RvciYmcCYmIUFbYitcIiBcIl0mJighcnx8IXIudGVzdChiKSkmJighcXx8IXEudGVzdChiKSkpdHJ5e3ZhciBkPXMuY2FsbChhLGIpO2lmKGR8fGMuZGlzY29ubmVjdGVkTWF0Y2h8fGEuZG9jdW1lbnQmJjExIT09YS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gZH1jYXRjaChlKXt9cmV0dXJuIGdhKGIsbixudWxsLFthXSkubGVuZ3RoPjB9LGdhLmNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLHQoYSxiKX0sZ2EuYXR0cj1mdW5jdGlvbihhLGIpeyhhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKTt2YXIgZT1kLmF0dHJIYW5kbGVbYi50b0xvd2VyQ2FzZSgpXSxmPWUmJkMuY2FsbChkLmF0dHJIYW5kbGUsYi50b0xvd2VyQ2FzZSgpKT9lKGEsYiwhcCk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1mP2Y6Yy5hdHRyaWJ1dGVzfHwhcD9hLmdldEF0dHJpYnV0ZShiKTooZj1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZmLnNwZWNpZmllZD9mLnZhbHVlOm51bGx9LGdhLmVzY2FwZT1mdW5jdGlvbihhKXtyZXR1cm4oYStcIlwiKS5yZXBsYWNlKGJhLGNhKX0sZ2EuZXJyb3I9ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrYSl9LGdhLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZD1bXSxlPTAsZj0wO2lmKGw9IWMuZGV0ZWN0RHVwbGljYXRlcyxrPSFjLnNvcnRTdGFibGUmJmEuc2xpY2UoMCksYS5zb3J0KEIpLGwpe3doaWxlKGI9YVtmKytdKWI9PT1hW2ZdJiYoZT1kLnB1c2goZikpO3doaWxlKGUtLSlhLnNwbGljZShkW2VdLDEpfXJldHVybiBrPW51bGwsYX0sZT1nYS5nZXRUZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9XCJcIixkPTAsZj1hLm5vZGVUeXBlO2lmKGYpe2lmKDE9PT1mfHw5PT09Znx8MTE9PT1mKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYS50ZXh0Q29udGVudClyZXR1cm4gYS50ZXh0Q29udGVudDtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpYys9ZShhKX1lbHNlIGlmKDM9PT1mfHw0PT09ZilyZXR1cm4gYS5ub2RlVmFsdWV9ZWxzZSB3aGlsZShiPWFbZCsrXSljKz1lKGIpO3JldHVybiBjfSxkPWdhLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmlhLG1hdGNoOlYsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnJlcGxhY2UoXyxhYSksYVszXT0oYVszXXx8YVs0XXx8YVs1XXx8XCJcIikucmVwbGFjZShfLGFhKSxcIn49XCI9PT1hWzJdJiYoYVszXT1cIiBcIithWzNdK1wiIFwiKSxhLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09YVsxXS5zbGljZSgwLDMpPyhhWzNdfHxnYS5lcnJvcihhWzBdKSxhWzRdPSsoYVs0XT9hWzVdKyhhWzZdfHwxKToyKihcImV2ZW5cIj09PWFbM118fFwib2RkXCI9PT1hWzNdKSksYVs1XT0rKGFbN10rYVs4XXx8XCJvZGRcIj09PWFbM10pKTphWzNdJiZnYS5lcnJvcihhWzBdKSxhfSxQU0VVRE86ZnVuY3Rpb24oYSl7dmFyIGIsYz0hYVs2XSYmYVsyXTtyZXR1cm4gVi5DSElMRC50ZXN0KGFbMF0pP251bGw6KGFbM10/YVsyXT1hWzRdfHxhWzVdfHxcIlwiOmMmJlQudGVzdChjKSYmKGI9ZyhjLCEwKSkmJihiPWMuaW5kZXhPZihcIilcIixjLmxlbmd0aC1iKS1jLmxlbmd0aCkmJihhWzBdPWFbMF0uc2xpY2UoMCxiKSxhWzJdPWMuc2xpY2UoMCxiKSksYS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09YT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yn19LENMQVNTOmZ1bmN0aW9uKGEpe3ZhciBiPXlbYStcIiBcIl07cmV0dXJuIGJ8fChiPW5ldyBSZWdFeHAoXCIoXnxcIitLK1wiKVwiK2ErXCIoXCIrSytcInwkKVwiKSkmJnkoYSxmdW5jdGlvbihhKXtyZXR1cm4gYi50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBhLmNsYXNzTmFtZSYmYS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWdhLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT9cIiE9XCI9PT1iOiFifHwoZSs9XCJcIixcIj1cIj09PWI/ZT09PWM6XCIhPVwiPT09Yj9lIT09YzpcIl49XCI9PT1iP2MmJjA9PT1lLmluZGV4T2YoYyk6XCIqPVwiPT09Yj9jJiZlLmluZGV4T2YoYyk+LTE6XCIkPVwiPT09Yj9jJiZlLnNsaWNlKC1jLmxlbmd0aCk9PT1jOlwifj1cIj09PWI/KFwiIFwiK2UucmVwbGFjZShPLFwiIFwiKStcIiBcIikuaW5kZXhPZihjKT4tMTpcInw9XCI9PT1iJiYoZT09PWN8fGUuc2xpY2UoMCxjLmxlbmd0aCsxKT09PWMrXCItXCIpKX19LENISUxEOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJudGhcIiE9PWEuc2xpY2UoMCwzKSxnPVwibGFzdFwiIT09YS5zbGljZSgtNCksaD1cIm9mLXR5cGVcIj09PWI7cmV0dXJuIDE9PT1kJiYwPT09ZT9mdW5jdGlvbihhKXtyZXR1cm4hIWEucGFyZW50Tm9kZX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtLG4sbyxwPWYhPT1nP1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLHE9Yi5wYXJlbnROb2RlLHI9aCYmYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHM9IWkmJiFoLHQ9ITE7aWYocSl7aWYoZil7d2hpbGUocCl7bT1iO3doaWxlKG09bVtwXSlpZihoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpcmV0dXJuITE7bz1wPVwib25seVwiPT09YSYmIW8mJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihvPVtnP3EuZmlyc3RDaGlsZDpxLmxhc3RDaGlsZF0sZyYmcyl7bT1xLGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSx0PW4mJmpbMl0sbT1uJiZxLmNoaWxkTm9kZXNbbl07d2hpbGUobT0rK24mJm0mJm1bcF18fCh0PW49MCl8fG8ucG9wKCkpaWYoMT09PW0ubm9kZVR5cGUmJisrdCYmbT09PWIpe2tbYV09W3csbix0XTticmVha319ZWxzZSBpZihzJiYobT1iLGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSx0PW4pLHQ9PT0hMSl3aGlsZShtPSsrbiYmbSYmbVtwXXx8KHQ9bj0wKXx8by5wb3AoKSlpZigoaD9tLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1tLm5vZGVUeXBlKSYmKyt0JiYocyYmKGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGtbYV09W3csdF0pLG09PT1iKSlicmVhaztyZXR1cm4gdC09ZSx0PT09ZHx8dCVkPT09MCYmdC9kPj0wfX19LFBTRVVETzpmdW5jdGlvbihhLGIpe3ZhciBjLGU9ZC5wc2V1ZG9zW2FdfHxkLnNldEZpbHRlcnNbYS50b0xvd2VyQ2FzZSgpXXx8Z2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2EpO3JldHVybiBlW3VdP2UoYik6ZS5sZW5ndGg+MT8oYz1bYSxhLFwiXCIsYl0sZC5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGEudG9Mb3dlckNhc2UoKSk/aWEoZnVuY3Rpb24oYSxjKXt2YXIgZCxmPWUoYSxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSlkPUkoYSxmW2ddKSxhW2RdPSEoY1tkXT1mW2ddKX0pOmZ1bmN0aW9uKGEpe3JldHVybiBlKGEsMCxjKX0pOmV9fSxwc2V1ZG9zOntub3Q6aWEoZnVuY3Rpb24oYSl7dmFyIGI9W10sYz1bXSxkPWgoYS5yZXBsYWNlKFAsXCIkMVwiKSk7cmV0dXJuIGRbdV0/aWEoZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsZz1kKGEsbnVsbCxlLFtdKSxoPWEubGVuZ3RoO3doaWxlKGgtLSkoZj1nW2hdKSYmKGFbaF09IShiW2hdPWYpKX0pOmZ1bmN0aW9uKGEsZSxmKXtyZXR1cm4gYlswXT1hLGQoYixudWxsLGYsYyksYlswXT1udWxsLCFjLnBvcCgpfX0pLGhhczppYShmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGdhKGEsYikubGVuZ3RoPjB9fSksY29udGFpbnM6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIGE9YS5yZXBsYWNlKF8sYWEpLGZ1bmN0aW9uKGIpe3JldHVybihiLnRleHRDb250ZW50fHxiLmlubmVyVGV4dHx8ZShiKSkuaW5kZXhPZihhKT4tMX19KSxsYW5nOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBVLnRlc3QoYXx8XCJcIil8fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrYSksYT1hLnJlcGxhY2UoXyxhYSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihiKXt2YXIgYztkbyBpZihjPXA/Yi5sYW5nOmIuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIil8fGIuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlyZXR1cm4gYz1jLnRvTG93ZXJDYXNlKCksYz09PWF8fDA9PT1jLmluZGV4T2YoYStcIi1cIik7d2hpbGUoKGI9Yi5wYXJlbnROb2RlKSYmMT09PWIubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihiKXt2YXIgYz1hLmxvY2F0aW9uJiZhLmxvY2F0aW9uLmhhc2g7cmV0dXJuIGMmJmMuc2xpY2UoMSk9PT1iLmlkfSxyb290OmZ1bmN0aW9uKGEpe3JldHVybiBhPT09b30sZm9jdXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1uLmFjdGl2ZUVsZW1lbnQmJighbi5oYXNGb2N1c3x8bi5oYXNGb2N1cygpKSYmISEoYS50eXBlfHxhLmhyZWZ8fH5hLnRhYkluZGV4KX0sZW5hYmxlZDpvYSghMSksZGlzYWJsZWQ6b2EoITApLGNoZWNrZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJiEhYS5jaGVja2VkfHxcIm9wdGlvblwiPT09YiYmISFhLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxhLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZylpZihhLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4hZC5wc2V1ZG9zLmVtcHR5KGEpfSxoZWFkZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIFgudGVzdChhLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFcudGVzdChhLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiZcImJ1dHRvblwiPT09YS50eXBlfHxcImJ1dHRvblwiPT09Yn0sdGV4dDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm5cImlucHV0XCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09YS50eXBlJiYobnVsbD09KGI9YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT1iLnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpwYShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6cGEoZnVuY3Rpb24oYSxiKXtyZXR1cm5bYi0xXX0pLGVxOnBhKGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5bYzwwP2MrYjpjXX0pLGV2ZW46cGEoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtjPGI7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxvZGQ6cGEoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtjPGI7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxsdDpwYShmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWM8MD9jK2I6YzstLWQ+PTA7KWEucHVzaChkKTtyZXR1cm4gYX0pLGd0OnBhKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YzwwP2MrYjpjOysrZDxiOylhLnB1c2goZCk7cmV0dXJuIGF9KX19LGQucHNldWRvcy5udGg9ZC5wc2V1ZG9zLmVxO2ZvcihiIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWQucHNldWRvc1tiXT1tYShiKTtmb3IoYiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWQucHNldWRvc1tiXT1uYShiKTtmdW5jdGlvbiByYSgpe31yYS5wcm90b3R5cGU9ZC5maWx0ZXJzPWQucHNldWRvcyxkLnNldEZpbHRlcnM9bmV3IHJhLGc9Z2EudG9rZW5pemU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGYsZyxoLGksaixrPXpbYStcIiBcIl07aWYoaylyZXR1cm4gYj8wOmsuc2xpY2UoMCk7aD1hLGk9W10saj1kLnByZUZpbHRlcjt3aGlsZShoKXtjJiYhKGU9US5leGVjKGgpKXx8KGUmJihoPWguc2xpY2UoZVswXS5sZW5ndGgpfHxoKSxpLnB1c2goZj1bXSkpLGM9ITEsKGU9Ui5leGVjKGgpKSYmKGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmVbMF0ucmVwbGFjZShQLFwiIFwiKX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2ZvcihnIGluIGQuZmlsdGVyKSEoZT1WW2ddLmV4ZWMoaCkpfHxqW2ddJiYhKGU9altnXShlKSl8fChjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTpnLG1hdGNoZXM6ZX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2lmKCFjKWJyZWFrfXJldHVybiBiP2gubGVuZ3RoOmg/Z2EuZXJyb3IoYSk6eihhLGkpLnNsaWNlKDApfTtmdW5jdGlvbiBzYShhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoLGQ9XCJcIjtiPGM7YisrKWQrPWFbYl0udmFsdWU7cmV0dXJuIGR9ZnVuY3Rpb24gdGEoYSxiLGMpe3ZhciBkPWIuZGlyLGU9Yi5uZXh0LGY9ZXx8ZCxnPWMmJlwicGFyZW50Tm9kZVwiPT09ZixoPXgrKztyZXR1cm4gYi5maXJzdD9mdW5jdGlvbihiLGMsZSl7d2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxnKXJldHVybiBhKGIsYyxlKTtyZXR1cm4hMX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtPVt3LGhdO2lmKGkpe3doaWxlKGI9YltkXSlpZigoMT09PWIubm9kZVR5cGV8fGcpJiZhKGIsYyxpKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZylpZihsPWJbdV18fChiW3VdPXt9KSxrPWxbYi51bmlxdWVJRF18fChsW2IudW5pcXVlSURdPXt9KSxlJiZlPT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKWI9YltkXXx8YjtlbHNle2lmKChqPWtbZl0pJiZqWzBdPT09dyYmalsxXT09PWgpcmV0dXJuIG1bMl09alsyXTtpZihrW2ZdPW0sbVsyXT1hKGIsYyxpKSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24gdWEoYSl7cmV0dXJuIGEubGVuZ3RoPjE/ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWEubGVuZ3RoO3doaWxlKGUtLSlpZighYVtlXShiLGMsZCkpcmV0dXJuITE7cmV0dXJuITB9OmFbMF19ZnVuY3Rpb24gdmEoYSxiLGMpe2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKylnYShhLGJbZF0sYyk7cmV0dXJuIGN9ZnVuY3Rpb24gd2EoYSxiLGMsZCxlKXtmb3IodmFyIGYsZz1bXSxoPTAsaT1hLmxlbmd0aCxqPW51bGwhPWI7aDxpO2grKykoZj1hW2hdKSYmKGMmJiFjKGYsZCxlKXx8KGcucHVzaChmKSxqJiZiLnB1c2goaCkpKTtyZXR1cm4gZ31mdW5jdGlvbiB4YShhLGIsYyxkLGUsZil7cmV0dXJuIGQmJiFkW3VdJiYoZD14YShkKSksZSYmIWVbdV0mJihlPXhhKGUsZikpLGlhKGZ1bmN0aW9uKGYsZyxoLGkpe3ZhciBqLGssbCxtPVtdLG49W10sbz1nLmxlbmd0aCxwPWZ8fHZhKGJ8fFwiKlwiLGgubm9kZVR5cGU/W2hdOmgsW10pLHE9IWF8fCFmJiZiP3A6d2EocCxtLGEsaCxpKSxyPWM/ZXx8KGY/YTpvfHxkKT9bXTpnOnE7aWYoYyYmYyhxLHIsaCxpKSxkKXtqPXdhKHIsbiksZChqLFtdLGgsaSksaz1qLmxlbmd0aDt3aGlsZShrLS0pKGw9altrXSkmJihyW25ba11dPSEocVtuW2tdXT1sKSl9aWYoZil7aWYoZXx8YSl7aWYoZSl7aj1bXSxrPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmai5wdXNoKHFba109bCk7ZShudWxsLHI9W10saixpKX1rPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmKGo9ZT9JKGYsbCk6bVtrXSk+LTEmJihmW2pdPSEoZ1tqXT1sKSl9fWVsc2Ugcj13YShyPT09Zz9yLnNwbGljZShvLHIubGVuZ3RoKTpyKSxlP2UobnVsbCxnLHIsaSk6Ry5hcHBseShnLHIpfSl9ZnVuY3Rpb24geWEoYSl7Zm9yKHZhciBiLGMsZSxmPWEubGVuZ3RoLGc9ZC5yZWxhdGl2ZVthWzBdLnR5cGVdLGg9Z3x8ZC5yZWxhdGl2ZVtcIiBcIl0saT1nPzE6MCxrPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0saCwhMCksbD10YShmdW5jdGlvbihhKXtyZXR1cm4gSShiLGEpPi0xfSxoLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7dmFyIGU9IWcmJihkfHxjIT09ail8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSk7cmV0dXJuIGI9bnVsbCxlfV07aTxmO2krKylpZihjPWQucmVsYXRpdmVbYVtpXS50eXBlXSltPVt0YSh1YShtKSxjKV07ZWxzZXtpZihjPWQuZmlsdGVyW2FbaV0udHlwZV0uYXBwbHkobnVsbCxhW2ldLm1hdGNoZXMpLGNbdV0pe2ZvcihlPSsraTtlPGY7ZSsrKWlmKGQucmVsYXRpdmVbYVtlXS50eXBlXSlicmVhaztyZXR1cm4geGEoaT4xJiZ1YShtKSxpPjEmJnNhKGEuc2xpY2UoMCxpLTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1hW2ktMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoUCxcIiQxXCIpLGMsaTxlJiZ5YShhLnNsaWNlKGksZSkpLGU8ZiYmeWEoYT1hLnNsaWNlKGUpKSxlPGYmJnNhKGEpKX1tLnB1c2goYyl9cmV0dXJuIHVhKG0pfWZ1bmN0aW9uIHphKGEsYil7dmFyIGM9Yi5sZW5ndGg+MCxlPWEubGVuZ3RoPjAsZj1mdW5jdGlvbihmLGcsaCxpLGspe3ZhciBsLG8scSxyPTAscz1cIjBcIix0PWYmJltdLHU9W10sdj1qLHg9Znx8ZSYmZC5maW5kLlRBRyhcIipcIixrKSx5PXcrPW51bGw9PXY/MTpNYXRoLnJhbmRvbSgpfHwuMSx6PXgubGVuZ3RoO2ZvcihrJiYoaj1nPT09bnx8Z3x8ayk7cyE9PXomJm51bGwhPShsPXhbc10pO3MrKyl7aWYoZSYmbCl7bz0wLGd8fGwub3duZXJEb2N1bWVudD09PW58fChtKGwpLGg9IXApO3doaWxlKHE9YVtvKytdKWlmKHEobCxnfHxuLGgpKXtpLnB1c2gobCk7YnJlYWt9ayYmKHc9eSl9YyYmKChsPSFxJiZsKSYmci0tLGYmJnQucHVzaChsKSl9aWYocis9cyxjJiZzIT09cil7bz0wO3doaWxlKHE9YltvKytdKXEodCx1LGcsaCk7aWYoZil7aWYocj4wKXdoaWxlKHMtLSl0W3NdfHx1W3NdfHwodVtzXT1FLmNhbGwoaSkpO3U9d2EodSl9Ry5hcHBseShpLHUpLGsmJiFmJiZ1Lmxlbmd0aD4wJiZyK2IubGVuZ3RoPjEmJmdhLnVuaXF1ZVNvcnQoaSl9cmV0dXJuIGsmJih3PXksaj12KSx0fTtyZXR1cm4gYz9pYShmKTpmfXJldHVybiBoPWdhLmNvbXBpbGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9W10sZj1BW2ErXCIgXCJdO2lmKCFmKXtifHwoYj1nKGEpKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlmPXlhKGJbY10pLGZbdV0/ZC5wdXNoKGYpOmUucHVzaChmKTtmPUEoYSx6YShlLGQpKSxmLnNlbGVjdG9yPWF9cmV0dXJuIGZ9LGk9Z2Euc2VsZWN0PWZ1bmN0aW9uKGEsYixjLGUpe3ZhciBmLGksaixrLGwsbT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiZhLG49IWUmJmcoYT1tLnNlbGVjdG9yfHxhKTtpZihjPWN8fFtdLDE9PT1uLmxlbmd0aCl7aWYoaT1uWzBdPW5bMF0uc2xpY2UoMCksaS5sZW5ndGg+MiYmXCJJRFwiPT09KGo9aVswXSkudHlwZSYmOT09PWIubm9kZVR5cGUmJnAmJmQucmVsYXRpdmVbaVsxXS50eXBlXSl7aWYoYj0oZC5maW5kLklEKGoubWF0Y2hlc1swXS5yZXBsYWNlKF8sYWEpLGIpfHxbXSlbMF0sIWIpcmV0dXJuIGM7bSYmKGI9Yi5wYXJlbnROb2RlKSxhPWEuc2xpY2UoaS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9Zj1WLm5lZWRzQ29udGV4dC50ZXN0KGEpPzA6aS5sZW5ndGg7d2hpbGUoZi0tKXtpZihqPWlbZl0sZC5yZWxhdGl2ZVtrPWoudHlwZV0pYnJlYWs7aWYoKGw9ZC5maW5kW2tdKSYmKGU9bChqLm1hdGNoZXNbMF0ucmVwbGFjZShfLGFhKSwkLnRlc3QoaVswXS50eXBlKSYmcWEoYi5wYXJlbnROb2RlKXx8YikpKXtpZihpLnNwbGljZShmLDEpLGE9ZS5sZW5ndGgmJnNhKGkpLCFhKXJldHVybiBHLmFwcGx5KGMsZSksYzticmVha319fXJldHVybihtfHxoKGEsbikpKGUsYiwhcCxjLCFifHwkLnRlc3QoYSkmJnFhKGIucGFyZW50Tm9kZSl8fGIpLGN9LGMuc29ydFN0YWJsZT11LnNwbGl0KFwiXCIpLnNvcnQoQikuam9pbihcIlwiKT09PXUsYy5kZXRlY3REdXBsaWNhdGVzPSEhbCxtKCksYy5zb3J0RGV0YWNoZWQ9amEoZnVuY3Rpb24oYSl7cmV0dXJuIDEmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxrYShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihhLGIsYyl7aWYoIWMpcmV0dXJuIGEuZ2V0QXR0cmlidXRlKGIsXCJ0eXBlXCI9PT1iLnRvTG93ZXJDYXNlKCk/MToyKX0pLGMuYXR0cmlidXRlcyYmamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixhLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGthKFwidmFsdWVcIixmdW5jdGlvbihhLGIsYyl7aWYoIWMmJlwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gYS5kZWZhdWx0VmFsdWV9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxrYShKLGZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZighYylyZXR1cm4gYVtiXT09PSEwP2IudG9Mb3dlckNhc2UoKTooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZkLnNwZWNpZmllZD9kLnZhbHVlOm51bGx9KSxnYX0oYSk7ci5maW5kPXgsci5leHByPXguc2VsZWN0b3JzLHIuZXhwcltcIjpcIl09ci5leHByLnBzZXVkb3Msci51bmlxdWVTb3J0PXIudW5pcXVlPXgudW5pcXVlU29ydCxyLnRleHQ9eC5nZXRUZXh0LHIuaXNYTUxEb2M9eC5pc1hNTCxyLmNvbnRhaW5zPXguY29udGFpbnMsci5lc2NhcGVTZWxlY3Rvcj14LmVzY2FwZTt2YXIgeT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9W10sZT12b2lkIDAhPT1jO3doaWxlKChhPWFbYl0pJiY5IT09YS5ub2RlVHlwZSlpZigxPT09YS5ub2RlVHlwZSl7aWYoZSYmcihhKS5pcyhjKSlicmVhaztkLnB1c2goYSl9cmV0dXJuIGR9LHo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107YTthPWEubmV4dFNpYmxpbmcpMT09PWEubm9kZVR5cGUmJmEhPT1iJiZjLnB1c2goYSk7cmV0dXJuIGN9LEE9ci5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtmdW5jdGlvbiBCKGEsYil7cmV0dXJuIGEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWIudG9Mb3dlckNhc2UoKX12YXIgQz0vXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSxEPS9eLlteOiNcXFtcXC4sXSokLztmdW5jdGlvbiBFKGEsYixjKXtyZXR1cm4gci5pc0Z1bmN0aW9uKGIpP3IuZ3JlcChhLGZ1bmN0aW9uKGEsZCl7cmV0dXJuISFiLmNhbGwoYSxkLGEpIT09Y30pOmIubm9kZVR5cGU/ci5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1iIT09Y30pOlwic3RyaW5nXCIhPXR5cGVvZiBiP3IuZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBpLmNhbGwoYixhKT4tMSE9PWN9KTpELnRlc3QoYik/ci5maWx0ZXIoYixhLGMpOihiPXIuZmlsdGVyKGIsYSksci5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGkuY2FsbChiLGEpPi0xIT09YyYmMT09PWEubm9kZVR5cGV9KSl9ci5maWx0ZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWJbMF07cmV0dXJuIGMmJihhPVwiOm5vdChcIithK1wiKVwiKSwxPT09Yi5sZW5ndGgmJjE9PT1kLm5vZGVUeXBlP3IuZmluZC5tYXRjaGVzU2VsZWN0b3IoZCxhKT9bZF06W106ci5maW5kLm1hdGNoZXMoYSxyLmdyZXAoYixmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV9KSl9LHIuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZD10aGlzLmxlbmd0aCxlPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIHRoaXMucHVzaFN0YWNrKHIoYSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKGI9MDtiPGQ7YisrKWlmKHIuY29udGFpbnMoZVtiXSx0aGlzKSlyZXR1cm4hMH0pKTtmb3IoYz10aGlzLnB1c2hTdGFjayhbXSksYj0wO2I8ZDtiKyspci5maW5kKGEsZVtiXSxjKTtyZXR1cm4gZD4xP3IudW5pcXVlU29ydChjKTpjfSxmaWx0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKEUodGhpcyxhfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKEUodGhpcyxhfHxbXSwhMCkpfSxpczpmdW5jdGlvbihhKXtyZXR1cm4hIUUodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgYSYmQS50ZXN0KGEpP3IoYSk6YXx8W10sITEpLmxlbmd0aH19KTt2YXIgRixHPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLEg9ci5mbi5pbml0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZSxmO2lmKCFhKXJldHVybiB0aGlzO2lmKGM9Y3x8RixcInN0cmluZ1wiPT10eXBlb2YgYSl7aWYoZT1cIjxcIj09PWFbMF0mJlwiPlwiPT09YVthLmxlbmd0aC0xXSYmYS5sZW5ndGg+PTM/W251bGwsYSxudWxsXTpHLmV4ZWMoYSksIWV8fCFlWzFdJiZiKXJldHVybiFifHxiLmpxdWVyeT8oYnx8YykuZmluZChhKTp0aGlzLmNvbnN0cnVjdG9yKGIpLmZpbmQoYSk7aWYoZVsxXSl7aWYoYj1iIGluc3RhbmNlb2Ygcj9iWzBdOmIsci5tZXJnZSh0aGlzLHIucGFyc2VIVE1MKGVbMV0sYiYmYi5ub2RlVHlwZT9iLm93bmVyRG9jdW1lbnR8fGI6ZCwhMCkpLEMudGVzdChlWzFdKSYmci5pc1BsYWluT2JqZWN0KGIpKWZvcihlIGluIGIpci5pc0Z1bmN0aW9uKHRoaXNbZV0pP3RoaXNbZV0oYltlXSk6dGhpcy5hdHRyKGUsYltlXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGY9ZC5nZXRFbGVtZW50QnlJZChlWzJdKSxmJiYodGhpc1swXT1mLHRoaXMubGVuZ3RoPTEpLHRoaXN9cmV0dXJuIGEubm9kZVR5cGU/KHRoaXNbMF09YSx0aGlzLmxlbmd0aD0xLHRoaXMpOnIuaXNGdW5jdGlvbihhKT92b2lkIDAhPT1jLnJlYWR5P2MucmVhZHkoYSk6YShyKTpyLm1ha2VBcnJheShhLHRoaXMpfTtILnByb3RvdHlwZT1yLmZuLEY9cihkKTt2YXIgST0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxKPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O3IuZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oYSl7dmFyIGI9cihhLHRoaXMpLGM9Yi5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTxjO2ErKylpZihyLmNvbnRhaW5zKHRoaXMsYlthXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MCxlPXRoaXMubGVuZ3RoLGY9W10sZz1cInN0cmluZ1wiIT10eXBlb2YgYSYmcihhKTtpZighQS50ZXN0KGEpKWZvcig7ZDxlO2QrKylmb3IoYz10aGlzW2RdO2MmJmMhPT1iO2M9Yy5wYXJlbnROb2RlKWlmKGMubm9kZVR5cGU8MTEmJihnP2cuaW5kZXgoYyk+LTE6MT09PWMubm9kZVR5cGUmJnIuZmluZC5tYXRjaGVzU2VsZWN0b3IoYyxhKSkpe2YucHVzaChjKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2soZi5sZW5ndGg+MT9yLnVuaXF1ZVNvcnQoZik6Zil9LGluZGV4OmZ1bmN0aW9uKGEpe3JldHVybiBhP1wic3RyaW5nXCI9PXR5cGVvZiBhP2kuY2FsbChyKGEpLHRoaXNbMF0pOmkuY2FsbCh0aGlzLGEuanF1ZXJ5P2FbMF06YSk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soci51bmlxdWVTb3J0KHIubWVyZ2UodGhpcy5nZXQoKSxyKGEsYikpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWE/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoYSkpfX0pO2Z1bmN0aW9uIEsoYSxiKXt3aGlsZSgoYT1hW2JdKSYmMSE9PWEubm9kZVR5cGUpO3JldHVybiBhfXIuZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmMTEhPT1iLm5vZGVUeXBlP2I6bnVsbH0scGFyZW50czpmdW5jdGlvbihhKXtyZXR1cm4geShhLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geShhLFwicGFyZW50Tm9kZVwiLGMpfSxuZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBLKGEsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihhKXtyZXR1cm4gSyhhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0QWxsOmZ1bmN0aW9uKGEpe3JldHVybiB5KGEsXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihhKXtyZXR1cm4geShhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5KGEsXCJuZXh0U2libGluZ1wiLGMpfSxwcmV2VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5KGEsXCJwcmV2aW91c1NpYmxpbmdcIixjKX0sc2libGluZ3M6ZnVuY3Rpb24oYSl7cmV0dXJuIHooKGEucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsYSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGEpe3JldHVybiB6KGEuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBCKGEsXCJpZnJhbWVcIik/YS5jb250ZW50RG9jdW1lbnQ6KEIoYSxcInRlbXBsYXRlXCIpJiYoYT1hLmNvbnRlbnR8fGEpLHIubWVyZ2UoW10sYS5jaGlsZE5vZGVzKSl9fSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYyxkKXt2YXIgZT1yLm1hcCh0aGlzLGIsYyk7cmV0dXJuXCJVbnRpbFwiIT09YS5zbGljZSgtNSkmJihkPWMpLGQmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYoZT1yLmZpbHRlcihkLGUpKSx0aGlzLmxlbmd0aD4xJiYoSlthXXx8ci51bmlxdWVTb3J0KGUpLEkudGVzdChhKSYmZS5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBMPS9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBNKGEpe3ZhciBiPXt9O3JldHVybiByLmVhY2goYS5tYXRjaChMKXx8W10sZnVuY3Rpb24oYSxjKXtiW2NdPSEwfSksYn1yLkNhbGxiYWNrcz1mdW5jdGlvbihhKXthPVwic3RyaW5nXCI9PXR5cGVvZiBhP00oYSk6ci5leHRlbmQoe30sYSk7dmFyIGIsYyxkLGUsZj1bXSxnPVtdLGg9LTEsaT1mdW5jdGlvbigpe2ZvcihlPWV8fGEub25jZSxkPWI9ITA7Zy5sZW5ndGg7aD0tMSl7Yz1nLnNoaWZ0KCk7d2hpbGUoKytoPGYubGVuZ3RoKWZbaF0uYXBwbHkoY1swXSxjWzFdKT09PSExJiZhLnN0b3BPbkZhbHNlJiYoaD1mLmxlbmd0aCxjPSExKX1hLm1lbW9yeXx8KGM9ITEpLGI9ITEsZSYmKGY9Yz9bXTpcIlwiKX0saj17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihjJiYhYiYmKGg9Zi5sZW5ndGgtMSxnLnB1c2goYykpLGZ1bmN0aW9uIGQoYil7ci5lYWNoKGIsZnVuY3Rpb24oYixjKXtyLmlzRnVuY3Rpb24oYyk/YS51bmlxdWUmJmouaGFzKGMpfHxmLnB1c2goYyk6YyYmYy5sZW5ndGgmJlwic3RyaW5nXCIhPT1yLnR5cGUoYykmJmQoYyl9KX0oYXJndW1lbnRzKSxjJiYhYiYmaSgpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gci5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihhLGIpe3ZhciBjO3doaWxlKChjPXIuaW5BcnJheShiLGYsYykpPi0xKWYuc3BsaWNlKGMsMSksYzw9aCYmaC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGEpe3JldHVybiBhP3IuaW5BcnJheShhLGYpPi0xOmYubGVuZ3RoPjB9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihmPVtdKSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGU9Zz1bXSxmPWM9XCJcIix0aGlzfSxkaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiFmfSxsb2NrOmZ1bmN0aW9uKCl7cmV0dXJuIGU9Zz1bXSxjfHxifHwoZj1jPVwiXCIpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiEhZX0sZmlyZVdpdGg6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gZXx8KGM9Y3x8W10sYz1bYSxjLnNsaWNlP2Muc2xpY2UoKTpjXSxnLnB1c2goYyksYnx8aSgpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGouZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFkfX07cmV0dXJuIGp9O2Z1bmN0aW9uIE4oYSl7cmV0dXJuIGF9ZnVuY3Rpb24gTyhhKXt0aHJvdyBhfWZ1bmN0aW9uIFAoYSxiLGMsZCl7dmFyIGU7dHJ5e2EmJnIuaXNGdW5jdGlvbihlPWEucHJvbWlzZSk/ZS5jYWxsKGEpLmRvbmUoYikuZmFpbChjKTphJiZyLmlzRnVuY3Rpb24oZT1hLnRoZW4pP2UuY2FsbChhLGIsYyk6Yi5hcHBseSh2b2lkIDAsW2FdLnNsaWNlKGQpKX1jYXRjaChhKXtjLmFwcGx5KHZvaWQgMCxbYV0pfX1yLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oYil7dmFyIGM9W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixyLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxkPVwicGVuZGluZ1wiLGU9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBmLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGEpe3JldHVybiBlLnRoZW4obnVsbCxhKX0scGlwZTpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50cztyZXR1cm4gci5EZWZlcnJlZChmdW5jdGlvbihiKXtyLmVhY2goYyxmdW5jdGlvbihjLGQpe3ZhciBlPXIuaXNGdW5jdGlvbihhW2RbNF1dKSYmYVtkWzRdXTtmW2RbMV1dKGZ1bmN0aW9uKCl7dmFyIGE9ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YSYmci5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/YS5wcm9taXNlKCkucHJvZ3Jlc3MoYi5ub3RpZnkpLmRvbmUoYi5yZXNvbHZlKS5mYWlsKGIucmVqZWN0KTpiW2RbMF0rXCJXaXRoXCJdKHRoaXMsZT9bYV06YXJndW1lbnRzKX0pfSksYT1udWxsfSkucHJvbWlzZSgpfSx0aGVuOmZ1bmN0aW9uKGIsZCxlKXt2YXIgZj0wO2Z1bmN0aW9uIGcoYixjLGQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGg9dGhpcyxpPWFyZ3VtZW50cyxqPWZ1bmN0aW9uKCl7dmFyIGEsajtpZighKGI8Zikpe2lmKGE9ZC5hcHBseShoLGkpLGE9PT1jLnByb21pc2UoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO2o9YSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSYmYS50aGVuLHIuaXNGdW5jdGlvbihqKT9lP2ouY2FsbChhLGcoZixjLE4sZSksZyhmLGMsTyxlKSk6KGYrKyxqLmNhbGwoYSxnKGYsYyxOLGUpLGcoZixjLE8sZSksZyhmLGMsTixjLm5vdGlmeVdpdGgpKSk6KGQhPT1OJiYoaD12b2lkIDAsaT1bYV0pLChlfHxjLnJlc29sdmVXaXRoKShoLGkpKX19LGs9ZT9qOmZ1bmN0aW9uKCl7dHJ5e2ooKX1jYXRjaChhKXtyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJnIuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhhLGsuc3RhY2tUcmFjZSksYisxPj1mJiYoZCE9PU8mJihoPXZvaWQgMCxpPVthXSksYy5yZWplY3RXaXRoKGgsaSkpfX07Yj9rKCk6KHIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYoay5zdGFja1RyYWNlPXIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLGEuc2V0VGltZW91dChrKSl9fXJldHVybiByLkRlZmVycmVkKGZ1bmN0aW9uKGEpe2NbMF1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihlKT9lOk4sYS5ub3RpZnlXaXRoKSksY1sxXVszXS5hZGQoZygwLGEsci5pc0Z1bmN0aW9uKGIpP2I6TikpLGNbMl1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihkKT9kOk8pKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT9yLmV4dGVuZChhLGUpOmV9fSxmPXt9O3JldHVybiByLmVhY2goYyxmdW5jdGlvbihhLGIpe3ZhciBnPWJbMl0saD1iWzVdO2VbYlsxXV09Zy5hZGQsaCYmZy5hZGQoZnVuY3Rpb24oKXtkPWh9LGNbMy1hXVsyXS5kaXNhYmxlLGNbMF1bMl0ubG9jayksZy5hZGQoYlszXS5maXJlKSxmW2JbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIGZbYlswXStcIldpdGhcIl0odGhpcz09PWY/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxmW2JbMF0rXCJXaXRoXCJdPWcuZmlyZVdpdGh9KSxlLnByb21pc2UoZiksYiYmYi5jYWxsKGYsZiksZn0sd2hlbjpmdW5jdGlvbihhKXt2YXIgYj1hcmd1bWVudHMubGVuZ3RoLGM9YixkPUFycmF5KGMpLGU9Zi5jYWxsKGFyZ3VtZW50cyksZz1yLkRlZmVycmVkKCksaD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYyl7ZFthXT10aGlzLGVbYV09YXJndW1lbnRzLmxlbmd0aD4xP2YuY2FsbChhcmd1bWVudHMpOmMsLS1ifHxnLnJlc29sdmVXaXRoKGQsZSl9fTtpZihiPD0xJiYoUChhLGcuZG9uZShoKGMpKS5yZXNvbHZlLGcucmVqZWN0LCFiKSxcInBlbmRpbmdcIj09PWcuc3RhdGUoKXx8ci5pc0Z1bmN0aW9uKGVbY10mJmVbY10udGhlbikpKXJldHVybiBnLnRoZW4oKTt3aGlsZShjLS0pUChlW2NdLGgoYyksZy5yZWplY3QpO3JldHVybiBnLnByb21pc2UoKX19KTt2YXIgUT0vXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2s9ZnVuY3Rpb24oYixjKXthLmNvbnNvbGUmJmEuY29uc29sZS53YXJuJiZiJiZRLnRlc3QoYi5uYW1lKSYmYS5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIitiLm1lc3NhZ2UsYi5zdGFjayxjKX0sci5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihiKXthLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBifSl9O3ZhciBSPXIuRGVmZXJyZWQoKTtyLmZuLnJlYWR5PWZ1bmN0aW9uKGEpe3JldHVybiBSLnRoZW4oYSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtyLnJlYWR5RXhjZXB0aW9uKGEpO1xufSksdGhpc30sci5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEscmVhZHk6ZnVuY3Rpb24oYSl7KGE9PT0hMD8tLXIucmVhZHlXYWl0OnIuaXNSZWFkeSl8fChyLmlzUmVhZHk9ITAsYSE9PSEwJiYtLXIucmVhZHlXYWl0PjB8fFIucmVzb2x2ZVdpdGgoZCxbcl0pKX19KSxyLnJlYWR5LnRoZW49Ui50aGVuO2Z1bmN0aW9uIFMoKXtkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUyksYS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLFMpLHIucmVhZHkoKX1cImNvbXBsZXRlXCI9PT1kLnJlYWR5U3RhdGV8fFwibG9hZGluZ1wiIT09ZC5yZWFkeVN0YXRlJiYhZC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGw/YS5zZXRUaW1lb3V0KHIucmVhZHkpOihkLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUyksYS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLFMpKTt2YXIgVD1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD0wLGk9YS5sZW5ndGgsaj1udWxsPT1jO2lmKFwib2JqZWN0XCI9PT1yLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYylUKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLHIuaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChyKGEpLGMpfSkpLGIpKWZvcig7aDxpO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9LFU9ZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfHw5PT09YS5ub2RlVHlwZXx8ISthLm5vZGVUeXBlfTtmdW5jdGlvbiBWKCl7dGhpcy5leHBhbmRvPXIuZXhwYW5kbytWLnVpZCsrfVYudWlkPTEsVi5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGEpe3ZhciBiPWFbdGhpcy5leHBhbmRvXTtyZXR1cm4gYnx8KGI9e30sVShhKSYmKGEubm9kZVR5cGU/YVt0aGlzLmV4cGFuZG9dPWI6T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsdGhpcy5leHBhbmRvLHt2YWx1ZTpiLGNvbmZpZ3VyYWJsZTohMH0pKSksYn0sc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlPXRoaXMuY2FjaGUoYSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpZVtyLmNhbWVsQ2FzZShiKV09YztlbHNlIGZvcihkIGluIGIpZVtyLmNhbWVsQ2FzZShkKV09YltkXTtyZXR1cm4gZX0sZ2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHZvaWQgMD09PWI/dGhpcy5jYWNoZShhKTphW3RoaXMuZXhwYW5kb10mJmFbdGhpcy5leHBhbmRvXVtyLmNhbWVsQ2FzZShiKV19LGFjY2VzczpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHZvaWQgMD09PWJ8fGImJlwic3RyaW5nXCI9PXR5cGVvZiBiJiZ2b2lkIDA9PT1jP3RoaXMuZ2V0KGEsYik6KHRoaXMuc2V0KGEsYixjKSx2b2lkIDAhPT1jP2M6Yil9LHJlbW92ZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9YVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PWQpe2lmKHZvaWQgMCE9PWIpe0FycmF5LmlzQXJyYXkoYik/Yj1iLm1hcChyLmNhbWVsQ2FzZSk6KGI9ci5jYW1lbENhc2UoYiksYj1iIGluIGQ/W2JdOmIubWF0Y2goTCl8fFtdKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlkZWxldGUgZFtiW2NdXX0odm9pZCAwPT09Ynx8ci5pc0VtcHR5T2JqZWN0KGQpKSYmKGEubm9kZVR5cGU/YVt0aGlzLmV4cGFuZG9dPXZvaWQgMDpkZWxldGUgYVt0aGlzLmV4cGFuZG9dKX19LGhhc0RhdGE6ZnVuY3Rpb24oYSl7dmFyIGI9YVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAhPT1iJiYhci5pc0VtcHR5T2JqZWN0KGIpfX07dmFyIFc9bmV3IFYsWD1uZXcgVixZPS9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxaPS9bQS1aXS9nO2Z1bmN0aW9uICQoYSl7cmV0dXJuXCJ0cnVlXCI9PT1hfHxcImZhbHNlXCIhPT1hJiYoXCJudWxsXCI9PT1hP251bGw6YT09PSthK1wiXCI/K2E6WS50ZXN0KGEpP0pTT04ucGFyc2UoYSk6YSl9ZnVuY3Rpb24gXyhhLGIsYyl7dmFyIGQ7aWYodm9pZCAwPT09YyYmMT09PWEubm9kZVR5cGUpaWYoZD1cImRhdGEtXCIrYi5yZXBsYWNlKFosXCItJCZcIikudG9Mb3dlckNhc2UoKSxjPWEuZ2V0QXR0cmlidXRlKGQpLFwic3RyaW5nXCI9PXR5cGVvZiBjKXt0cnl7Yz0kKGMpfWNhdGNoKGUpe31YLnNldChhLGIsYyl9ZWxzZSBjPXZvaWQgMDtyZXR1cm4gY31yLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gWC5oYXNEYXRhKGEpfHxXLmhhc0RhdGEoYSl9LGRhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBYLmFjY2VzcyhhLGIsYyl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtYLnJlbW92ZShhLGIpfSxfZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcuYWNjZXNzKGEsYixjKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtXLnJlbW92ZShhLGIpfX0pLHIuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9dGhpc1swXSxnPWYmJmYuYXR0cmlidXRlcztpZih2b2lkIDA9PT1hKXtpZih0aGlzLmxlbmd0aCYmKGU9WC5nZXQoZiksMT09PWYubm9kZVR5cGUmJiFXLmdldChmLFwiaGFzRGF0YUF0dHJzXCIpKSl7Yz1nLmxlbmd0aDt3aGlsZShjLS0pZ1tjXSYmKGQ9Z1tjXS5uYW1lLDA9PT1kLmluZGV4T2YoXCJkYXRhLVwiKSYmKGQ9ci5jYW1lbENhc2UoZC5zbGljZSg1KSksXyhmLGQsZVtkXSkpKTtXLnNldChmLFwiaGFzRGF0YUF0dHJzXCIsITApfXJldHVybiBlfXJldHVyblwib2JqZWN0XCI9PXR5cGVvZiBhP3RoaXMuZWFjaChmdW5jdGlvbigpe1guc2V0KHRoaXMsYSl9KTpUKHRoaXMsZnVuY3Rpb24oYil7dmFyIGM7aWYoZiYmdm9pZCAwPT09Yil7aWYoYz1YLmdldChmLGEpLHZvaWQgMCE9PWMpcmV0dXJuIGM7aWYoYz1fKGYsYSksdm9pZCAwIT09YylyZXR1cm4gY31lbHNlIHRoaXMuZWFjaChmdW5jdGlvbigpe1guc2V0KHRoaXMsYSxiKX0pfSxudWxsLGIsYXJndW1lbnRzLmxlbmd0aD4xLG51bGwsITApfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtYLnJlbW92ZSh0aGlzLGEpfSl9fSksci5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZihhKXJldHVybiBiPShifHxcImZ4XCIpK1wicXVldWVcIixkPVcuZ2V0KGEsYiksYyYmKCFkfHxBcnJheS5pc0FycmF5KGMpP2Q9Vy5hY2Nlc3MoYSxiLHIubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdfSxkZXF1ZXVlOmZ1bmN0aW9uKGEsYil7Yj1ifHxcImZ4XCI7dmFyIGM9ci5xdWV1ZShhLGIpLGQ9Yy5sZW5ndGgsZT1jLnNoaWZ0KCksZj1yLl9xdWV1ZUhvb2tzKGEsYiksZz1mdW5jdGlvbigpe3IuZGVxdWV1ZShhLGIpfTtcImlucHJvZ3Jlc3NcIj09PWUmJihlPWMuc2hpZnQoKSxkLS0pLGUmJihcImZ4XCI9PT1iJiZjLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBmLnN0b3AsZS5jYWxsKGEsZyxmKSksIWQmJmYmJmYuZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihhLGIpe3ZhciBjPWIrXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIFcuZ2V0KGEsYyl8fFcuYWNjZXNzKGEsYyx7ZW1wdHk6ci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXtXLnJlbW92ZShhLFtiK1wicXVldWVcIixjXSl9KX0pfX0pLHIuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT1cImZ4XCIsYy0tKSxhcmd1bWVudHMubGVuZ3RoPGM/ci5xdWV1ZSh0aGlzWzBdLGEpOnZvaWQgMD09PWI/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1yLnF1ZXVlKHRoaXMsYSxiKTtyLl9xdWV1ZUhvb2tzKHRoaXMsYSksXCJmeFwiPT09YSYmXCJpbnByb2dyZXNzXCIhPT1jWzBdJiZyLmRlcXVldWUodGhpcyxhKX0pfSxkZXF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmRlcXVldWUodGhpcyxhKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnF1ZXVlKGF8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTEsZT1yLkRlZmVycmVkKCksZj10aGlzLGc9dGhpcy5sZW5ndGgsaD1mdW5jdGlvbigpey0tZHx8ZS5yZXNvbHZlV2l0aChmLFtmXSl9O1wic3RyaW5nXCIhPXR5cGVvZiBhJiYoYj1hLGE9dm9pZCAwKSxhPWF8fFwiZnhcIjt3aGlsZShnLS0pYz1XLmdldChmW2ddLGErXCJxdWV1ZUhvb2tzXCIpLGMmJmMuZW1wdHkmJihkKyssYy5lbXB0eS5hZGQoaCkpO3JldHVybiBoKCksZS5wcm9taXNlKGIpfX0pO3ZhciBhYT0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsYmE9bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIrYWErXCIpKFthLXolXSopJFwiLFwiaVwiKSxjYT1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sZGE9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1ifHxhLFwibm9uZVwiPT09YS5zdHlsZS5kaXNwbGF5fHxcIlwiPT09YS5zdHlsZS5kaXNwbGF5JiZyLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKSYmXCJub25lXCI9PT1yLmNzcyhhLFwiZGlzcGxheVwiKX0sZWE9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXt9O2ZvcihmIGluIGIpZ1tmXT1hLnN0eWxlW2ZdLGEuc3R5bGVbZl09YltmXTtlPWMuYXBwbHkoYSxkfHxbXSk7Zm9yKGYgaW4gYilhLnN0eWxlW2ZdPWdbZl07cmV0dXJuIGV9O2Z1bmN0aW9uIGZhKGEsYixjLGQpe3ZhciBlLGY9MSxnPTIwLGg9ZD9mdW5jdGlvbigpe3JldHVybiBkLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiByLmNzcyhhLGIsXCJcIil9LGk9aCgpLGo9YyYmY1szXXx8KHIuY3NzTnVtYmVyW2JdP1wiXCI6XCJweFwiKSxrPShyLmNzc051bWJlcltiXXx8XCJweFwiIT09aiYmK2kpJiZiYS5leGVjKHIuY3NzKGEsYikpO2lmKGsmJmtbM10hPT1qKXtqPWp8fGtbM10sYz1jfHxbXSxrPStpfHwxO2RvIGY9Znx8XCIuNVwiLGsvPWYsci5zdHlsZShhLGIsaytqKTt3aGlsZShmIT09KGY9aCgpL2kpJiYxIT09ZiYmLS1nKX1yZXR1cm4gYyYmKGs9K2t8fCtpfHwwLGU9Y1sxXT9rKyhjWzFdKzEpKmNbMl06K2NbMl0sZCYmKGQudW5pdD1qLGQuc3RhcnQ9ayxkLmVuZD1lKSksZX12YXIgZ2E9e307ZnVuY3Rpb24gaGEoYSl7dmFyIGIsYz1hLm93bmVyRG9jdW1lbnQsZD1hLm5vZGVOYW1lLGU9Z2FbZF07cmV0dXJuIGU/ZTooYj1jLmJvZHkuYXBwZW5kQ2hpbGQoYy5jcmVhdGVFbGVtZW50KGQpKSxlPXIuY3NzKGIsXCJkaXNwbGF5XCIpLGIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxcIm5vbmVcIj09PWUmJihlPVwiYmxvY2tcIiksZ2FbZF09ZSxlKX1mdW5jdGlvbiBpYShhLGIpe2Zvcih2YXIgYyxkLGU9W10sZj0wLGc9YS5sZW5ndGg7ZjxnO2YrKylkPWFbZl0sZC5zdHlsZSYmKGM9ZC5zdHlsZS5kaXNwbGF5LGI/KFwibm9uZVwiPT09YyYmKGVbZl09Vy5nZXQoZCxcImRpc3BsYXlcIil8fG51bGwsZVtmXXx8KGQuc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PWQuc3R5bGUuZGlzcGxheSYmZGEoZCkmJihlW2ZdPWhhKGQpKSk6XCJub25lXCIhPT1jJiYoZVtmXT1cIm5vbmVcIixXLnNldChkLFwiZGlzcGxheVwiLGMpKSk7Zm9yKGY9MDtmPGc7ZisrKW51bGwhPWVbZl0mJihhW2ZdLnN0eWxlLmRpc3BsYXk9ZVtmXSk7cmV0dXJuIGF9ci5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gaWEodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gaWEodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihhKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGE/YT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtkYSh0aGlzKT9yKHRoaXMpLnNob3coKTpyKHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBqYT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxrYT0vPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2ksbGE9L14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxtYT17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLHRoZWFkOlsxLFwiPHRhYmxlPlwiLFwiPC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdHI6WzIsXCI8dGFibGU+PHRib2R5PlwiLFwiPC90Ym9keT48L3RhYmxlPlwiXSx0ZDpbMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLF9kZWZhdWx0OlswLFwiXCIsXCJcIl19O21hLm9wdGdyb3VwPW1hLm9wdGlvbixtYS50Ym9keT1tYS50Zm9vdD1tYS5jb2xncm91cD1tYS5jYXB0aW9uPW1hLnRoZWFkLG1hLnRoPW1hLnRkO2Z1bmN0aW9uIG5hKGEsYil7dmFyIGM7cmV0dXJuIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWU/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHxcIipcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucXVlcnlTZWxlY3RvckFsbD9hLnF1ZXJ5U2VsZWN0b3JBbGwoYnx8XCIqXCIpOltdLHZvaWQgMD09PWJ8fGImJkIoYSxiKT9yLm1lcmdlKFthXSxjKTpjfWZ1bmN0aW9uIG9hKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKVcuc2V0KGFbY10sXCJnbG9iYWxFdmFsXCIsIWJ8fFcuZ2V0KGJbY10sXCJnbG9iYWxFdmFsXCIpKX12YXIgcGE9Lzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHFhKGEsYixjLGQsZSl7Zm9yKHZhciBmLGcsaCxpLGosayxsPWIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLG09W10sbj0wLG89YS5sZW5ndGg7bjxvO24rKylpZihmPWFbbl0sZnx8MD09PWYpaWYoXCJvYmplY3RcIj09PXIudHlwZShmKSlyLm1lcmdlKG0sZi5ub2RlVHlwZT9bZl06Zik7ZWxzZSBpZihwYS50ZXN0KGYpKXtnPWd8fGwuYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxoPShrYS5leGVjKGYpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSxpPW1hW2hdfHxtYS5fZGVmYXVsdCxnLmlubmVySFRNTD1pWzFdK3IuaHRtbFByZWZpbHRlcihmKStpWzJdLGs9aVswXTt3aGlsZShrLS0pZz1nLmxhc3RDaGlsZDtyLm1lcmdlKG0sZy5jaGlsZE5vZGVzKSxnPWwuZmlyc3RDaGlsZCxnLnRleHRDb250ZW50PVwiXCJ9ZWxzZSBtLnB1c2goYi5jcmVhdGVUZXh0Tm9kZShmKSk7bC50ZXh0Q29udGVudD1cIlwiLG49MDt3aGlsZShmPW1bbisrXSlpZihkJiZyLmluQXJyYXkoZixkKT4tMSllJiZlLnB1c2goZik7ZWxzZSBpZihqPXIuY29udGFpbnMoZi5vd25lckRvY3VtZW50LGYpLGc9bmEobC5hcHBlbmRDaGlsZChmKSxcInNjcmlwdFwiKSxqJiZvYShnKSxjKXtrPTA7d2hpbGUoZj1nW2srK10pbGEudGVzdChmLnR5cGV8fFwiXCIpJiZjLnB1c2goZil9cmV0dXJuIGx9IWZ1bmN0aW9uKCl7dmFyIGE9ZC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksYj1hLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksYz1kLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtjLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLGMuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLFwiY2hlY2tlZFwiKSxjLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksYi5hcHBlbmRDaGlsZChjKSxvLmNoZWNrQ2xvbmU9Yi5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsYi5pbm5lckhUTUw9XCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsby5ub0Nsb25lQ2hlY2tlZD0hIWIuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlfSgpO3ZhciByYT1kLmRvY3VtZW50RWxlbWVudCxzYT0vXmtleS8sdGE9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLHVhPS9eKFteLl0qKSg/OlxcLiguKyl8KS87ZnVuY3Rpb24gdmEoKXtyZXR1cm4hMH1mdW5jdGlvbiB3YSgpe3JldHVybiExfWZ1bmN0aW9uIHhhKCl7dHJ5e3JldHVybiBkLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goYSl7fX1mdW5jdGlvbiB5YShhLGIsYyxkLGUsZil7dmFyIGcsaDtpZihcIm9iamVjdFwiPT10eXBlb2YgYil7XCJzdHJpbmdcIiE9dHlwZW9mIGMmJihkPWR8fGMsYz12b2lkIDApO2ZvcihoIGluIGIpeWEoYSxoLGMsZCxiW2hdLGYpO3JldHVybiBhfWlmKG51bGw9PWQmJm51bGw9PWU/KGU9YyxkPWM9dm9pZCAwKTpudWxsPT1lJiYoXCJzdHJpbmdcIj09dHlwZW9mIGM/KGU9ZCxkPXZvaWQgMCk6KGU9ZCxkPWMsYz12b2lkIDApKSxlPT09ITEpZT13YTtlbHNlIGlmKCFlKXJldHVybiBhO3JldHVybiAxPT09ZiYmKGc9ZSxlPWZ1bmN0aW9uKGEpe3JldHVybiByKCkub2ZmKGEpLGcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlLmd1aWQ9Zy5ndWlkfHwoZy5ndWlkPXIuZ3VpZCsrKSksYS5lYWNoKGZ1bmN0aW9uKCl7ci5ldmVudC5hZGQodGhpcyxiLGUsZCxjKX0pfXIuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG4sbyxwLHE9Vy5nZXQoYSk7aWYocSl7Yy5oYW5kbGVyJiYoZj1jLGM9Zi5oYW5kbGVyLGU9Zi5zZWxlY3RvciksZSYmci5maW5kLm1hdGNoZXNTZWxlY3RvcihyYSxlKSxjLmd1aWR8fChjLmd1aWQ9ci5ndWlkKyspLChpPXEuZXZlbnRzKXx8KGk9cS5ldmVudHM9e30pLChnPXEuaGFuZGxlKXx8KGc9cS5oYW5kbGU9ZnVuY3Rpb24oYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHImJnIuZXZlbnQudHJpZ2dlcmVkIT09Yi50eXBlP3IuZXZlbnQuZGlzcGF0Y2guYXBwbHkoYSxhcmd1bWVudHMpOnZvaWQgMH0pLGI9KGJ8fFwiXCIpLm1hdGNoKEwpfHxbXCJcIl0saj1iLmxlbmd0aDt3aGlsZShqLS0paD11YS5leGVjKGJbal0pfHxbXSxuPXA9aFsxXSxvPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG4mJihsPXIuZXZlbnQuc3BlY2lhbFtuXXx8e30sbj0oZT9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8bixsPXIuZXZlbnQuc3BlY2lhbFtuXXx8e30saz1yLmV4dGVuZCh7dHlwZTpuLG9yaWdUeXBlOnAsZGF0YTpkLGhhbmRsZXI6YyxndWlkOmMuZ3VpZCxzZWxlY3RvcjplLG5lZWRzQ29udGV4dDplJiZyLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoZSksbmFtZXNwYWNlOm8uam9pbihcIi5cIil9LGYpLChtPWlbbl0pfHwobT1pW25dPVtdLG0uZGVsZWdhdGVDb3VudD0wLGwuc2V0dXAmJmwuc2V0dXAuY2FsbChhLGQsbyxnKSE9PSExfHxhLmFkZEV2ZW50TGlzdGVuZXImJmEuYWRkRXZlbnRMaXN0ZW5lcihuLGcpKSxsLmFkZCYmKGwuYWRkLmNhbGwoYSxrKSxrLmhhbmRsZXIuZ3VpZHx8KGsuaGFuZGxlci5ndWlkPWMuZ3VpZCkpLGU/bS5zcGxpY2UobS5kZWxlZ2F0ZUNvdW50KyssMCxrKTptLnB1c2goayksci5ldmVudC5nbG9iYWxbbl09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxuLG8scCxxPVcuaGFzRGF0YShhKSYmVy5nZXQoYSk7aWYocSYmKGk9cS5ldmVudHMpKXtiPShifHxcIlwiKS5tYXRjaChMKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9dWEuZXhlYyhiW2pdKXx8W10sbj1wPWhbMV0sbz0oaFsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxuKXtsPXIuZXZlbnQuc3BlY2lhbFtuXXx8e30sbj0oZD9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8bixtPWlbbl18fFtdLGg9aFsyXSYmbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK28uam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpLGc9Zj1tLmxlbmd0aDt3aGlsZShmLS0paz1tW2ZdLCFlJiZwIT09ay5vcmlnVHlwZXx8YyYmYy5ndWlkIT09ay5ndWlkfHxoJiYhaC50ZXN0KGsubmFtZXNwYWNlKXx8ZCYmZCE9PWsuc2VsZWN0b3ImJihcIioqXCIhPT1kfHwhay5zZWxlY3Rvcil8fChtLnNwbGljZShmLDEpLGsuc2VsZWN0b3ImJm0uZGVsZWdhdGVDb3VudC0tLGwucmVtb3ZlJiZsLnJlbW92ZS5jYWxsKGEsaykpO2cmJiFtLmxlbmd0aCYmKGwudGVhcmRvd24mJmwudGVhcmRvd24uY2FsbChhLG8scS5oYW5kbGUpIT09ITF8fHIucmVtb3ZlRXZlbnQoYSxuLHEuaGFuZGxlKSxkZWxldGUgaVtuXSl9ZWxzZSBmb3IobiBpbiBpKXIuZXZlbnQucmVtb3ZlKGEsbitiW2pdLGMsZCwhMCk7ci5pc0VtcHR5T2JqZWN0KGkpJiZXLnJlbW92ZShhLFwiaGFuZGxlIGV2ZW50c1wiKX19LGRpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZhciBiPXIuZXZlbnQuZml4KGEpLGMsZCxlLGYsZyxoLGk9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLGo9KFcuZ2V0KHRoaXMsXCJldmVudHNcIil8fHt9KVtiLnR5cGVdfHxbXSxrPXIuZXZlbnQuc3BlY2lhbFtiLnR5cGVdfHx7fTtmb3IoaVswXT1iLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWlbY109YXJndW1lbnRzW2NdO2lmKGIuZGVsZWdhdGVUYXJnZXQ9dGhpcywhay5wcmVEaXNwYXRjaHx8ay5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsYikhPT0hMSl7aD1yLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxiLGopLGM9MDt3aGlsZSgoZj1oW2MrK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXtiLmN1cnJlbnRUYXJnZXQ9Zi5lbGVtLGQ9MDt3aGlsZSgoZz1mLmhhbmRsZXJzW2QrK10pJiYhYi5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKWIucm5hbWVzcGFjZSYmIWIucm5hbWVzcGFjZS50ZXN0KGcubmFtZXNwYWNlKXx8KGIuaGFuZGxlT2JqPWcsYi5kYXRhPWcuZGF0YSxlPSgoci5ldmVudC5zcGVjaWFsW2cub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxnLmhhbmRsZXIpLmFwcGx5KGYuZWxlbSxpKSx2b2lkIDAhPT1lJiYoYi5yZXN1bHQ9ZSk9PT0hMSYmKGIucHJldmVudERlZmF1bHQoKSxiLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGsucG9zdERpc3BhdGNoJiZrLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsYiksYi5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGcsaD1bXSxpPWIuZGVsZWdhdGVDb3VudCxqPWEudGFyZ2V0O2lmKGkmJmoubm9kZVR5cGUmJiEoXCJjbGlja1wiPT09YS50eXBlJiZhLmJ1dHRvbj49MSkpZm9yKDtqIT09dGhpcztqPWoucGFyZW50Tm9kZXx8dGhpcylpZigxPT09ai5ub2RlVHlwZSYmKFwiY2xpY2tcIiE9PWEudHlwZXx8ai5kaXNhYmxlZCE9PSEwKSl7Zm9yKGY9W10sZz17fSxjPTA7YzxpO2MrKylkPWJbY10sZT1kLnNlbGVjdG9yK1wiIFwiLHZvaWQgMD09PWdbZV0mJihnW2VdPWQubmVlZHNDb250ZXh0P3IoZSx0aGlzKS5pbmRleChqKT4tMTpyLmZpbmQoZSx0aGlzLG51bGwsW2pdKS5sZW5ndGgpLGdbZV0mJmYucHVzaChkKTtmLmxlbmd0aCYmaC5wdXNoKHtlbGVtOmosaGFuZGxlcnM6Zn0pfXJldHVybiBqPXRoaXMsaTxiLmxlbmd0aCYmaC5wdXNoKHtlbGVtOmosaGFuZGxlcnM6Yi5zbGljZShpKX0pLGh9LGFkZFByb3A6ZnVuY3Rpb24oYSxiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoci5FdmVudC5wcm90b3R5cGUsYSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OnIuaXNGdW5jdGlvbihiKT9mdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gYih0aGlzLm9yaWdpbmFsRXZlbnQpfTpmdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W2FdfSxzZXQ6ZnVuY3Rpb24oYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX0pfSxmaXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbci5leHBhbmRvXT9hOm5ldyByLkV2ZW50KGEpfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09eGEoKSYmdGhpcy5mb2N1cylyZXR1cm4gdGhpcy5mb2N1cygpLCExfSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c2luXCJ9LGJsdXI6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzPT09eGEoKSYmdGhpcy5ibHVyKXJldHVybiB0aGlzLmJsdXIoKSwhMX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZihcImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2smJkIodGhpcyxcImlucHV0XCIpKXJldHVybiB0aGlzLmNsaWNrKCksITF9LF9kZWZhdWx0OmZ1bmN0aW9uKGEpe3JldHVybiBCKGEudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEucmVzdWx0JiZhLm9yaWdpbmFsRXZlbnQmJihhLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9YS5yZXN1bHQpfX19fSxyLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGEsYixjKXthLnJlbW92ZUV2ZW50TGlzdGVuZXImJmEucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMpfSxyLkV2ZW50PWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiByLkV2ZW50PyhhJiZhLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1hLHRoaXMudHlwZT1hLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YS5kZWZhdWx0UHJldmVudGVkfHx2b2lkIDA9PT1hLmRlZmF1bHRQcmV2ZW50ZWQmJmEucmV0dXJuVmFsdWU9PT0hMT92YTp3YSx0aGlzLnRhcmdldD1hLnRhcmdldCYmMz09PWEudGFyZ2V0Lm5vZGVUeXBlP2EudGFyZ2V0LnBhcmVudE5vZGU6YS50YXJnZXQsdGhpcy5jdXJyZW50VGFyZ2V0PWEuY3VycmVudFRhcmdldCx0aGlzLnJlbGF0ZWRUYXJnZXQ9YS5yZWxhdGVkVGFyZ2V0KTp0aGlzLnR5cGU9YSxiJiZyLmV4dGVuZCh0aGlzLGIpLHRoaXMudGltZVN0YW1wPWEmJmEudGltZVN0YW1wfHxyLm5vdygpLHZvaWQodGhpc1tyLmV4cGFuZG9dPSEwKSk6bmV3IHIuRXZlbnQoYSxiKX0sci5FdmVudC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnIuRXZlbnQsaXNEZWZhdWx0UHJldmVudGVkOndhLGlzUHJvcGFnYXRpb25TdG9wcGVkOndhLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOndhLGlzU2ltdWxhdGVkOiExLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPXZhLGEmJiF0aGlzLmlzU2ltdWxhdGVkJiZhLnByZXZlbnREZWZhdWx0KCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXZhLGEmJiF0aGlzLmlzU2ltdWxhdGVkJiZhLnN0b3BQcm9wYWdhdGlvbigpfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD12YSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0sci5lYWNoKHthbHRLZXk6ITAsYnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNoYW5nZWRUb3VjaGVzOiEwLGN0cmxLZXk6ITAsZGV0YWlsOiEwLGV2ZW50UGhhc2U6ITAsbWV0YUtleTohMCxwYWdlWDohMCxwYWdlWTohMCxzaGlmdEtleTohMCx2aWV3OiEwLFwiY2hhclwiOiEwLGNoYXJDb2RlOiEwLGtleTohMCxrZXlDb2RlOiEwLGJ1dHRvbjohMCxidXR0b25zOiEwLGNsaWVudFg6ITAsY2xpZW50WTohMCxvZmZzZXRYOiEwLG9mZnNldFk6ITAscG9pbnRlcklkOiEwLHBvaW50ZXJUeXBlOiEwLHNjcmVlblg6ITAsc2NyZWVuWTohMCx0YXJnZXRUb3VjaGVzOiEwLHRvRWxlbWVudDohMCx0b3VjaGVzOiEwLHdoaWNoOmZ1bmN0aW9uKGEpe3ZhciBiPWEuYnV0dG9uO3JldHVybiBudWxsPT1hLndoaWNoJiZzYS50ZXN0KGEudHlwZSk/bnVsbCE9YS5jaGFyQ29kZT9hLmNoYXJDb2RlOmEua2V5Q29kZTohYS53aGljaCYmdm9pZCAwIT09YiYmdGEudGVzdChhLnR5cGUpPzEmYj8xOjImYj8zOjQmYj8yOjA6YS53aGljaH19LHIuZXZlbnQuYWRkUHJvcCksci5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIscG9pbnRlcmVudGVyOlwicG9pbnRlcm92ZXJcIixwb2ludGVybGVhdmU6XCJwb2ludGVyb3V0XCJ9LGZ1bmN0aW9uKGEsYil7ci5ldmVudC5zcGVjaWFsW2FdPXtkZWxlZ2F0ZVR5cGU6YixiaW5kVHlwZTpiLGhhbmRsZTpmdW5jdGlvbihhKXt2YXIgYyxkPXRoaXMsZT1hLnJlbGF0ZWRUYXJnZXQsZj1hLmhhbmRsZU9iajtyZXR1cm4gZSYmKGU9PT1kfHxyLmNvbnRhaW5zKGQsZSkpfHwoYS50eXBlPWYub3JpZ1R5cGUsYz1mLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGEudHlwZT1iKSxjfX19KSxyLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHlhKHRoaXMsYSxiLGMsZCl9LG9uZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4geWEodGhpcyxhLGIsYyxkLDEpfSxvZmY6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU7aWYoYSYmYS5wcmV2ZW50RGVmYXVsdCYmYS5oYW5kbGVPYmopcmV0dXJuIGQ9YS5oYW5kbGVPYmoscihhLmRlbGVnYXRlVGFyZ2V0KS5vZmYoZC5uYW1lc3BhY2U/ZC5vcmlnVHlwZStcIi5cIitkLm5hbWVzcGFjZTpkLm9yaWdUeXBlLGQuc2VsZWN0b3IsZC5oYW5kbGVyKSx0aGlzO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXtmb3IoZSBpbiBhKXRoaXMub2ZmKGUsYixhW2VdKTtyZXR1cm4gdGhpc31yZXR1cm4gYiE9PSExJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBifHwoYz1iLGI9dm9pZCAwKSxjPT09ITEmJihjPXdhKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmV2ZW50LnJlbW92ZSh0aGlzLGEsYyxiKX0pfX0pO3ZhciB6YT0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxBYT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxCYT0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLENhPS9edHJ1ZVxcLyguKikvLERhPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztmdW5jdGlvbiBFYShhLGIpe3JldHVybiBCKGEsXCJ0YWJsZVwiKSYmQigxMSE9PWIubm9kZVR5cGU/YjpiLmZpcnN0Q2hpbGQsXCJ0clwiKT9yKFwiPnRib2R5XCIsYSlbMF18fGE6YX1mdW5jdGlvbiBGYShhKXtyZXR1cm4gYS50eXBlPShudWxsIT09YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIithLnR5cGUsYX1mdW5jdGlvbiBHYShhKXt2YXIgYj1DYS5leGVjKGEudHlwZSk7cmV0dXJuIGI/YS50eXBlPWJbMV06YS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGF9ZnVuY3Rpb24gSGEoYSxiKXt2YXIgYyxkLGUsZixnLGgsaSxqO2lmKDE9PT1iLm5vZGVUeXBlKXtpZihXLmhhc0RhdGEoYSkmJihmPVcuYWNjZXNzKGEpLGc9Vy5zZXQoYixmKSxqPWYuZXZlbnRzKSl7ZGVsZXRlIGcuaGFuZGxlLGcuZXZlbnRzPXt9O2ZvcihlIGluIGopZm9yKGM9MCxkPWpbZV0ubGVuZ3RoO2M8ZDtjKyspci5ldmVudC5hZGQoYixlLGpbZV1bY10pfVguaGFzRGF0YShhKSYmKGg9WC5hY2Nlc3MoYSksaT1yLmV4dGVuZCh7fSxoKSxYLnNldChiLGkpKX19ZnVuY3Rpb24gSWEoYSxiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJpbnB1dFwiPT09YyYmamEudGVzdChhLnR5cGUpP2IuY2hlY2tlZD1hLmNoZWNrZWQ6XCJpbnB1dFwiIT09YyYmXCJ0ZXh0YXJlYVwiIT09Y3x8KGIuZGVmYXVsdFZhbHVlPWEuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBKYShhLGIsYyxkKXtiPWcuYXBwbHkoW10sYik7dmFyIGUsZixoLGksaixrLGw9MCxtPWEubGVuZ3RoLG49bS0xLHE9YlswXSxzPXIuaXNGdW5jdGlvbihxKTtpZihzfHxtPjEmJlwic3RyaW5nXCI9PXR5cGVvZiBxJiYhby5jaGVja0Nsb25lJiZCYS50ZXN0KHEpKXJldHVybiBhLmVhY2goZnVuY3Rpb24oZSl7dmFyIGY9YS5lcShlKTtzJiYoYlswXT1xLmNhbGwodGhpcyxlLGYuaHRtbCgpKSksSmEoZixiLGMsZCl9KTtpZihtJiYoZT1xYShiLGFbMF0ub3duZXJEb2N1bWVudCwhMSxhLGQpLGY9ZS5maXJzdENoaWxkLDE9PT1lLmNoaWxkTm9kZXMubGVuZ3RoJiYoZT1mKSxmfHxkKSl7Zm9yKGg9ci5tYXAobmEoZSxcInNjcmlwdFwiKSxGYSksaT1oLmxlbmd0aDtsPG07bCsrKWo9ZSxsIT09biYmKGo9ci5jbG9uZShqLCEwLCEwKSxpJiZyLm1lcmdlKGgsbmEoaixcInNjcmlwdFwiKSkpLGMuY2FsbChhW2xdLGosbCk7aWYoaSlmb3Ioaz1oW2gubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsci5tYXAoaCxHYSksbD0wO2w8aTtsKyspaj1oW2xdLGxhLnRlc3Qoai50eXBlfHxcIlwiKSYmIVcuYWNjZXNzKGosXCJnbG9iYWxFdmFsXCIpJiZyLmNvbnRhaW5zKGssaikmJihqLnNyYz9yLl9ldmFsVXJsJiZyLl9ldmFsVXJsKGouc3JjKTpwKGoudGV4dENvbnRlbnQucmVwbGFjZShEYSxcIlwiKSxrKSl9cmV0dXJuIGF9ZnVuY3Rpb24gS2EoYSxiLGMpe2Zvcih2YXIgZCxlPWI/ci5maWx0ZXIoYixhKTphLGY9MDtudWxsIT0oZD1lW2ZdKTtmKyspY3x8MSE9PWQubm9kZVR5cGV8fHIuY2xlYW5EYXRhKG5hKGQpKSxkLnBhcmVudE5vZGUmJihjJiZyLmNvbnRhaW5zKGQub3duZXJEb2N1bWVudCxkKSYmb2EobmEoZCxcInNjcmlwdFwiKSksZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGQpKTtyZXR1cm4gYX1yLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHphLFwiPCQxPjwvJDI+XCIpfSxjbG9uZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNsb25lTm9kZSghMCksaT1yLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZighKG8ubm9DbG9uZUNoZWNrZWR8fDEhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGV8fHIuaXNYTUxEb2MoYSkpKWZvcihnPW5hKGgpLGY9bmEoYSksZD0wLGU9Zi5sZW5ndGg7ZDxlO2QrKylJYShmW2RdLGdbZF0pO2lmKGIpaWYoYylmb3IoZj1mfHxuYShhKSxnPWd8fG5hKGgpLGQ9MCxlPWYubGVuZ3RoO2Q8ZTtkKyspSGEoZltkXSxnW2RdKTtlbHNlIEhhKGEsaCk7cmV0dXJuIGc9bmEoaCxcInNjcmlwdFwiKSxnLmxlbmd0aD4wJiZvYShnLCFpJiZuYShhLFwic2NyaXB0XCIpKSxofSxjbGVhbkRhdGE6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiLGMsZCxlPXIuZXZlbnQuc3BlY2lhbCxmPTA7dm9pZCAwIT09KGM9YVtmXSk7ZisrKWlmKFUoYykpe2lmKGI9Y1tXLmV4cGFuZG9dKXtpZihiLmV2ZW50cylmb3IoZCBpbiBiLmV2ZW50cyllW2RdP3IuZXZlbnQucmVtb3ZlKGMsZCk6ci5yZW1vdmVFdmVudChjLGQsYi5oYW5kbGUpO2NbVy5leHBhbmRvXT12b2lkIDB9Y1tYLmV4cGFuZG9dJiYoY1tYLmV4cGFuZG9dPXZvaWQgMCl9fX0pLHIuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIEthKHRoaXMsYSwhMCl9LHJlbW92ZTpmdW5jdGlvbihhKXtyZXR1cm4gS2EodGhpcyxhKX0sdGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hP3IudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1hKX0pfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9RWEodGhpcyxhKTtiLmFwcGVuZENoaWxkKGEpfX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj1FYSh0aGlzLGEpO2IuaW5zZXJ0QmVmb3JlKGEsYi5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGI9MDtudWxsIT0oYT10aGlzW2JdKTtiKyspMT09PWEubm9kZVR5cGUmJihyLmNsZWFuRGF0YShuYShhLCExKSksYS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1udWxsIT1hJiZhLGI9bnVsbD09Yj9hOmIsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gci5jbG9uZSh0aGlzLGEsYil9KX0saHRtbDpmdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXNbMF18fHt9LGM9MCxkPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWEmJjE9PT1iLm5vZGVUeXBlKXJldHVybiBiLmlubmVySFRNTDtpZihcInN0cmluZ1wiPT10eXBlb2YgYSYmIUFhLnRlc3QoYSkmJiFtYVsoa2EuZXhlYyhhKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKXthPXIuaHRtbFByZWZpbHRlcihhKTt0cnl7Zm9yKDtjPGQ7YysrKWI9dGhpc1tjXXx8e30sMT09PWIubm9kZVR5cGUmJihyLmNsZWFuRGF0YShuYShiLCExKSksYi5pbm5lckhUTUw9YSk7Yj0wfWNhdGNoKGUpe319YiYmdGhpcy5lbXB0eSgpLmFwcGVuZChhKX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBhPVtdO3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihiKXt2YXIgYz10aGlzLnBhcmVudE5vZGU7ci5pbkFycmF5KHRoaXMsYSk8MCYmKHIuY2xlYW5EYXRhKG5hKHRoaXMpKSxjJiZjLnJlcGxhY2VDaGlsZChiLHRoaXMpKX0sYSl9fSksci5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGEsYil7ci5mblthXT1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD1bXSxlPXIoYSksZj1lLmxlbmd0aC0xLGc9MDtnPD1mO2crKyljPWc9PT1mP3RoaXM6dGhpcy5jbG9uZSghMCkscihlW2ddKVtiXShjKSxoLmFwcGx5KGQsYy5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQpfX0pO3ZhciBMYT0vXm1hcmdpbi8sTWE9bmV3IFJlZ0V4cChcIl4oXCIrYWErXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksTmE9ZnVuY3Rpb24oYil7dmFyIGM9Yi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiBjJiZjLm9wZW5lcnx8KGM9YSksYy5nZXRDb21wdXRlZFN0eWxlKGIpfTshZnVuY3Rpb24oKXtmdW5jdGlvbiBiKCl7aWYoaSl7aS5zdHlsZS5jc3NUZXh0PVwiYm94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7bWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt0b3A6MSU7d2lkdGg6NTAlXCIsaS5pbm5lckhUTUw9XCJcIixyYS5hcHBlbmRDaGlsZChoKTt2YXIgYj1hLmdldENvbXB1dGVkU3R5bGUoaSk7Yz1cIjElXCIhPT1iLnRvcCxnPVwiMnB4XCI9PT1iLm1hcmdpbkxlZnQsZT1cIjRweFwiPT09Yi53aWR0aCxpLnN0eWxlLm1hcmdpblJpZ2h0PVwiNTAlXCIsZj1cIjRweFwiPT09Yi5tYXJnaW5SaWdodCxyYS5yZW1vdmVDaGlsZChoKSxpPW51bGx9fXZhciBjLGUsZixnLGg9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGk9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuc3R5bGUmJihpLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIixpLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIixvLmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT1pLnN0eWxlLmJhY2tncm91bmRDbGlwLGguc3R5bGUuY3NzVGV4dD1cImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7cGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCIsaC5hcHBlbmRDaGlsZChpKSxyLmV4dGVuZChvLHtwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxjfSxib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBiKCksZX0scGl4ZWxNYXJnaW5SaWdodDpmdW5jdGlvbigpe3JldHVybiBiKCksZn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxnfX0pKX0oKTtmdW5jdGlvbiBPYShhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fE5hKGEpLGMmJihnPWMuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXSxcIlwiIT09Z3x8ci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSl8fChnPXIuc3R5bGUoYSxiKSksIW8ucGl4ZWxNYXJnaW5SaWdodCgpJiZNYS50ZXN0KGcpJiZMYS50ZXN0KGIpJiYoZD1oLndpZHRoLGU9aC5taW5XaWR0aCxmPWgubWF4V2lkdGgsaC5taW5XaWR0aD1oLm1heFdpZHRoPWgud2lkdGg9ZyxnPWMud2lkdGgsaC53aWR0aD1kLGgubWluV2lkdGg9ZSxoLm1heFdpZHRoPWYpKSx2b2lkIDAhPT1nP2crXCJcIjpnfWZ1bmN0aW9uIFBhKGEsYil7cmV0dXJue2dldDpmdW5jdGlvbigpe3JldHVybiBhKCk/dm9pZCBkZWxldGUgdGhpcy5nZXQ6KHRoaXMuZ2V0PWIpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fXZhciBRYT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sUmE9L14tLS8sU2E9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LFRhPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn0sVWE9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLFZhPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTtmdW5jdGlvbiBXYShhKXtpZihhIGluIFZhKXJldHVybiBhO3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGM9VWEubGVuZ3RoO3doaWxlKGMtLSlpZihhPVVhW2NdK2IsYSBpbiBWYSlyZXR1cm4gYX1mdW5jdGlvbiBYYShhKXt2YXIgYj1yLmNzc1Byb3BzW2FdO3JldHVybiBifHwoYj1yLmNzc1Byb3BzW2FdPVdhKGEpfHxhKSxifWZ1bmN0aW9uIFlhKGEsYixjKXt2YXIgZD1iYS5leGVjKGIpO3JldHVybiBkP01hdGgubWF4KDAsZFsyXS0oY3x8MCkpKyhkWzNdfHxcInB4XCIpOmJ9ZnVuY3Rpb24gWmEoYSxiLGMsZCxlKXt2YXIgZixnPTA7Zm9yKGY9Yz09PShkP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpPzQ6XCJ3aWR0aFwiPT09Yj8xOjA7Zjw0O2YrPTIpXCJtYXJnaW5cIj09PWMmJihnKz1yLmNzcyhhLGMrY2FbZl0sITAsZSkpLGQ/KFwiY29udGVudFwiPT09YyYmKGctPXIuY3NzKGEsXCJwYWRkaW5nXCIrY2FbZl0sITAsZSkpLFwibWFyZ2luXCIhPT1jJiYoZy09ci5jc3MoYSxcImJvcmRlclwiK2NhW2ZdK1wiV2lkdGhcIiwhMCxlKSkpOihnKz1yLmNzcyhhLFwicGFkZGluZ1wiK2NhW2ZdLCEwLGUpLFwicGFkZGluZ1wiIT09YyYmKGcrPXIuY3NzKGEsXCJib3JkZXJcIitjYVtmXStcIldpZHRoXCIsITAsZSkpKTtyZXR1cm4gZ31mdW5jdGlvbiAkYShhLGIsYyl7dmFyIGQsZT1OYShhKSxmPU9hKGEsYixlKSxnPVwiYm9yZGVyLWJveFwiPT09ci5jc3MoYSxcImJveFNpemluZ1wiLCExLGUpO3JldHVybiBNYS50ZXN0KGYpP2Y6KGQ9ZyYmKG8uYm94U2l6aW5nUmVsaWFibGUoKXx8Zj09PWEuc3R5bGVbYl0pLFwiYXV0b1wiPT09ZiYmKGY9YVtcIm9mZnNldFwiK2JbMF0udG9VcHBlckNhc2UoKStiLnNsaWNlKDEpXSksZj1wYXJzZUZsb2F0KGYpfHwwLGYrWmEoYSxiLGN8fChnP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGQsZSkrXCJweFwiKX1yLmV4dGVuZCh7Y3NzSG9va3M6e29wYWNpdHk6e2dldDpmdW5jdGlvbihhLGIpe2lmKGIpe3ZhciBjPU9hKGEsXCJvcGFjaXR5XCIpO3JldHVyblwiXCI9PT1jP1wiMVwiOmN9fX19LGNzc051bWJlcjp7YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsY29sdW1uQ291bnQ6ITAsZmlsbE9wYWNpdHk6ITAsZmxleEdyb3c6ITAsZmxleFNocmluazohMCxmb250V2VpZ2h0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e1wiZmxvYXRcIjpcImNzc0Zsb2F0XCJ9LHN0eWxlOmZ1bmN0aW9uKGEsYixjLGQpe2lmKGEmJjMhPT1hLm5vZGVUeXBlJiY4IT09YS5ub2RlVHlwZSYmYS5zdHlsZSl7dmFyIGUsZixnLGg9ci5jYW1lbENhc2UoYiksaT1SYS50ZXN0KGIpLGo9YS5zdHlsZTtyZXR1cm4gaXx8KGI9WGEoaCkpLGc9ci5jc3NIb29rc1tiXXx8ci5jc3NIb29rc1toXSx2b2lkIDA9PT1jP2cmJlwiZ2V0XCJpbiBnJiZ2b2lkIDAhPT0oZT1nLmdldChhLCExLGQpKT9lOmpbYl06KGY9dHlwZW9mIGMsXCJzdHJpbmdcIj09PWYmJihlPWJhLmV4ZWMoYykpJiZlWzFdJiYoYz1mYShhLGIsZSksZj1cIm51bWJlclwiKSxudWxsIT1jJiZjPT09YyYmKFwibnVtYmVyXCI9PT1mJiYoYys9ZSYmZVszXXx8KHIuY3NzTnVtYmVyW2hdP1wiXCI6XCJweFwiKSksby5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1jfHwwIT09Yi5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGpbYl09XCJpbmhlcml0XCIpLGcmJlwic2V0XCJpbiBnJiZ2b2lkIDA9PT0oYz1nLnNldChhLGMsZCkpfHwoaT9qLnNldFByb3BlcnR5KGIsYyk6altiXT1jKSksdm9pZCAwKX19LGNzczpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGcsaD1yLmNhbWVsQ2FzZShiKSxpPVJhLnRlc3QoYik7cmV0dXJuIGl8fChiPVhhKGgpKSxnPXIuY3NzSG9va3NbYl18fHIuY3NzSG9va3NbaF0sZyYmXCJnZXRcImluIGcmJihlPWcuZ2V0KGEsITAsYykpLHZvaWQgMD09PWUmJihlPU9hKGEsYixkKSksXCJub3JtYWxcIj09PWUmJmIgaW4gVGEmJihlPVRhW2JdKSxcIlwiPT09Y3x8Yz8oZj1wYXJzZUZsb2F0KGUpLGM9PT0hMHx8aXNGaW5pdGUoZik/Znx8MDplKTplfX0pLHIuZWFjaChbXCJoZWlnaHRcIixcIndpZHRoXCJdLGZ1bmN0aW9uKGEsYil7ci5jc3NIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEsYyxkKXtpZihjKXJldHVybiFRYS50ZXN0KHIuY3NzKGEsXCJkaXNwbGF5XCIpKXx8YS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aD8kYShhLGIsZCk6ZWEoYSxTYSxmdW5jdGlvbigpe3JldHVybiAkYShhLGIsZCl9KX0sc2V0OmZ1bmN0aW9uKGEsYyxkKXt2YXIgZSxmPWQmJk5hKGEpLGc9ZCYmWmEoYSxiLGQsXCJib3JkZXItYm94XCI9PT1yLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZiksZik7cmV0dXJuIGcmJihlPWJhLmV4ZWMoYykpJiZcInB4XCIhPT0oZVszXXx8XCJweFwiKSYmKGEuc3R5bGVbYl09YyxjPXIuY3NzKGEsYikpLFlhKGEsYyxnKX19fSksci5jc3NIb29rcy5tYXJnaW5MZWZ0PVBhKG8ucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGEsYil7aWYoYilyZXR1cm4ocGFyc2VGbG9hdChPYShhLFwibWFyZ2luTGVmdFwiKSl8fGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1lYShhLHttYXJnaW5MZWZ0OjB9LGZ1bmN0aW9uKCl7cmV0dXJuIGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0pKStcInB4XCJ9KSxyLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYStiXT17ZXhwYW5kOmZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9e30sZj1cInN0cmluZ1wiPT10eXBlb2YgYz9jLnNwbGl0KFwiIFwiKTpbY107ZDw0O2QrKyllW2ErY2FbZF0rYl09ZltkXXx8ZltkLTJdfHxmWzBdO3JldHVybiBlfX0sTGEudGVzdChhKXx8KHIuY3NzSG9va3NbYStiXS5zZXQ9WWEpfSksci5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj17fSxnPTA7aWYoQXJyYXkuaXNBcnJheShiKSl7Zm9yKGQ9TmEoYSksZT1iLmxlbmd0aDtnPGU7ZysrKWZbYltnXV09ci5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP3Iuc3R5bGUoYSxiLGMpOnIuY3NzKGEsYil9LGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfX0pLHIuZm4uZGVsYXk9ZnVuY3Rpb24oYixjKXtyZXR1cm4gYj1yLmZ4P3IuZnguc3BlZWRzW2JdfHxiOmIsYz1jfHxcImZ4XCIsdGhpcy5xdWV1ZShjLGZ1bmN0aW9uKGMsZCl7dmFyIGU9YS5zZXRUaW1lb3V0KGMsYik7ZC5zdG9wPWZ1bmN0aW9uKCl7YS5jbGVhclRpbWVvdXQoZSl9fSl9LGZ1bmN0aW9uKCl7dmFyIGE9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYj1kLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiksYz1iLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7YS50eXBlPVwiY2hlY2tib3hcIixvLmNoZWNrT249XCJcIiE9PWEudmFsdWUsby5vcHRTZWxlY3RlZD1jLnNlbGVjdGVkLGE9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS52YWx1ZT1cInRcIixhLnR5cGU9XCJyYWRpb1wiLG8ucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIF9hLGFiPXIuZXhwci5hdHRySGFuZGxlO3IuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxyLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3IucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksci5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKDMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuZ2V0QXR0cmlidXRlP3IucHJvcChhLGIsYyk6KDE9PT1mJiZyLmlzWE1MRG9jKGEpfHwoZT1yLmF0dHJIb29rc1tiLnRvTG93ZXJDYXNlKCldfHwoci5leHByLm1hdGNoLmJvb2wudGVzdChiKT9fYTp2b2lkIDApKSx2b2lkIDAhPT1jP251bGw9PT1jP3ZvaWQgci5yZW1vdmVBdHRyKGEsYik6ZSYmXCJzZXRcImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDooYS5zZXRBdHRyaWJ1dGUoYixjK1wiXCIpLGMpOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDooZD1yLmZpbmQuYXR0cihhLGIpLG51bGw9PWQ/dm9pZCAwOmQpKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oYSxiKXtpZighby5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT1iJiZCKGEsXCJpbnB1dFwiKSl7dmFyIGM9YS52YWx1ZTtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsYiksYyYmKGEudmFsdWU9YyksYn19fX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MCxlPWImJmIubWF0Y2goTCk7aWYoZSYmMT09PWEubm9kZVR5cGUpd2hpbGUoYz1lW2QrK10pYS5yZW1vdmVBdHRyaWJ1dGUoYyl9fSksX2E9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGI9PT0hMT9yLnJlbW92ZUF0dHIoYSxjKTphLnNldEF0dHJpYnV0ZShjLGMpLGN9fSxyLmVhY2goci5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGEsYil7dmFyIGM9YWJbYl18fHIuZmluZC5hdHRyO2FiW2JdPWZ1bmN0aW9uKGEsYixkKXt2YXIgZSxmLGc9Yi50b0xvd2VyQ2FzZSgpO3JldHVybiBkfHwoZj1hYltnXSxhYltnXT1lLGU9bnVsbCE9YyhhLGIsZCk/ZzpudWxsLGFiW2ddPWYpLGV9fSk7dmFyIGJiPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksY2I9L14oPzphfGFyZWEpJC9pO3IuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxyLnByb3AsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW3IucHJvcEZpeFthXXx8YV19KX19KSxyLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm4gMT09PWYmJnIuaXNYTUxEb2MoYSl8fChiPXIucHJvcEZpeFtiXXx8YixlPXIucHJvcEhvb2tzW2JdKSx2b2lkIDAhPT1jP2UmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6YVtiXT1jOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDphW2JdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9ci5maW5kLmF0dHIoYSxcInRhYmluZGV4XCIpO3JldHVybiBiP3BhcnNlSW50KGIsMTApOmJiLnRlc3QoYS5ub2RlTmFtZSl8fGNiLnRlc3QoYS5ub2RlTmFtZSkmJmEuaHJlZj8wOi0xfX19LHByb3BGaXg6e1wiZm9yXCI6XCJodG1sRm9yXCIsXCJjbGFzc1wiOlwiY2xhc3NOYW1lXCJ9fSksby5vcHRTZWxlY3RlZHx8KHIucHJvcEhvb2tzLnNlbGVjdGVkPXtnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiZiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9LHNldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7YiYmKGIuc2VsZWN0ZWRJbmRleCxiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KX19KSxyLmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7ci5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO2Z1bmN0aW9uIGRiKGEpe3ZhciBiPWEubWF0Y2goTCl8fFtdO3JldHVybiBiLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIGViKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn1yLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaT0wO2lmKHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykuYWRkQ2xhc3MoYS5jYWxsKHRoaXMsYixlYih0aGlzKSkpfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmEpe2I9YS5tYXRjaChMKXx8W107d2hpbGUoYz10aGlzW2krK10paWYoZT1lYihjKSxkPTE9PT1jLm5vZGVUeXBlJiZcIiBcIitkYihlKStcIiBcIil7Zz0wO3doaWxlKGY9YltnKytdKWQuaW5kZXhPZihcIiBcIitmK1wiIFwiKTwwJiYoZCs9ZitcIiBcIik7aD1kYihkKSxlIT09aCYmYy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGgpfX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaT0wO2lmKHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykucmVtb3ZlQ2xhc3MoYS5jYWxsKHRoaXMsYixlYih0aGlzKSkpfSk7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsXCJcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmEpe2I9YS5tYXRjaChMKXx8W107d2hpbGUoYz10aGlzW2krK10paWYoZT1lYihjKSxkPTE9PT1jLm5vZGVUeXBlJiZcIiBcIitkYihlKStcIiBcIil7Zz0wO3doaWxlKGY9YltnKytdKXdoaWxlKGQuaW5kZXhPZihcIiBcIitmK1wiIFwiKT4tMSlkPWQucmVwbGFjZShcIiBcIitmK1wiIFwiLFwiIFwiKTtoPWRiKGQpLGUhPT1oJiZjLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsaCl9fXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPXR5cGVvZiBhO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYiYmXCJzdHJpbmdcIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6ci5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihjKXtyKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMsZWIodGhpcyksYiksYil9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixkLGUsZjtpZihcInN0cmluZ1wiPT09Yyl7ZD0wLGU9cih0aGlzKSxmPWEubWF0Y2goTCl8fFtdO3doaWxlKGI9ZltkKytdKWUuaGFzQ2xhc3MoYik/ZS5yZW1vdmVDbGFzcyhiKTplLmFkZENsYXNzKGIpfWVsc2Ugdm9pZCAwIT09YSYmXCJib29sZWFuXCIhPT1jfHwoYj1lYih0aGlzKSxiJiZXLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLGIpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsYnx8YT09PSExP1wiXCI6Vy5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQ9MDtiPVwiIFwiK2ErXCIgXCI7d2hpbGUoYz10aGlzW2QrK10paWYoMT09PWMubm9kZVR5cGUmJihcIiBcIitkYihlYihjKSkrXCIgXCIpLmluZGV4T2YoYik+LTEpcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIGZiPS9cXHIvZztyLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQ9ci5pc0Z1bmN0aW9uKGEpLHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZTsxPT09dGhpcy5ub2RlVHlwZSYmKGU9ZD9hLmNhbGwodGhpcyxjLHIodGhpcykudmFsKCkpOmEsbnVsbD09ZT9lPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIGU/ZSs9XCJcIjpBcnJheS5pc0FycmF5KGUpJiYoZT1yLm1hcChlLGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1wiXCI6YStcIlwifSkpLGI9ci52YWxIb29rc1t0aGlzLnR5cGVdfHxyLnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJzZXRcImluIGImJnZvaWQgMCE9PWIuc2V0KHRoaXMsZSxcInZhbHVlXCIpfHwodGhpcy52YWx1ZT1lKSl9KTtpZihlKXJldHVybiBiPXIudmFsSG9va3NbZS50eXBlXXx8ci52YWxIb29rc1tlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLGImJlwiZ2V0XCJpbiBiJiZ2b2lkIDAhPT0oYz1iLmdldChlLFwidmFsdWVcIikpP2M6KGM9ZS52YWx1ZSxcInN0cmluZ1wiPT10eXBlb2YgYz9jLnJlcGxhY2UoZmIsXCJcIik6bnVsbD09Yz9cIlwiOmMpfX19KSxyLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXIuZmluZC5hdHRyKGEsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9Yj9iOmRiKHIudGV4dChhKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXt2YXIgYixjLGQsZT1hLm9wdGlvbnMsZj1hLnNlbGVjdGVkSW5kZXgsZz1cInNlbGVjdC1vbmVcIj09PWEudHlwZSxoPWc/bnVsbDpbXSxpPWc/ZisxOmUubGVuZ3RoO2ZvcihkPWY8MD9pOmc/ZjowO2Q8aTtkKyspaWYoYz1lW2RdLChjLnNlbGVjdGVkfHxkPT09ZikmJiFjLmRpc2FibGVkJiYoIWMucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUIoYy5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZihiPXIoYykudmFsKCksZylyZXR1cm4gYjtoLnB1c2goYil9cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZT1hLm9wdGlvbnMsZj1yLm1ha2VBcnJheShiKSxnPWUubGVuZ3RoO3doaWxlKGctLSlkPWVbZ10sKGQuc2VsZWN0ZWQ9ci5pbkFycmF5KHIudmFsSG9va3Mub3B0aW9uLmdldChkKSxmKT4tMSkmJihjPSEwKTtyZXR1cm4gY3x8KGEuc2VsZWN0ZWRJbmRleD0tMSksZn19fX0pLHIuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtyLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oYSxiKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLmNoZWNrZWQ9ci5pbkFycmF5KHIoYSkudmFsKCksYik+LTF9fSxvLmNoZWNrT258fChyLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09PWEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmEudmFsdWV9KX0pO3ZhciBnYj0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87ci5leHRlbmQoci5ldmVudCx7dHJpZ2dlcjpmdW5jdGlvbihiLGMsZSxmKXt2YXIgZyxoLGksaixrLG0sbixvPVtlfHxkXSxwPWwuY2FsbChiLFwidHlwZVwiKT9iLnR5cGU6YixxPWwuY2FsbChiLFwibmFtZXNwYWNlXCIpP2IubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihoPWk9ZT1lfHxkLDMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmIWdiLnRlc3QocCtyLmV2ZW50LnRyaWdnZXJlZCkmJihwLmluZGV4T2YoXCIuXCIpPi0xJiYocT1wLnNwbGl0KFwiLlwiKSxwPXEuc2hpZnQoKSxxLnNvcnQoKSksaz1wLmluZGV4T2YoXCI6XCIpPDAmJlwib25cIitwLGI9YltyLmV4cGFuZG9dP2I6bmV3IHIuRXZlbnQocCxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksYi5pc1RyaWdnZXI9Zj8yOjMsYi5uYW1lc3BhY2U9cS5qb2luKFwiLlwiKSxiLnJuYW1lc3BhY2U9Yi5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK3Euam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsYi5yZXN1bHQ9dm9pZCAwLGIudGFyZ2V0fHwoYi50YXJnZXQ9ZSksYz1udWxsPT1jP1tiXTpyLm1ha2VBcnJheShjLFtiXSksbj1yLmV2ZW50LnNwZWNpYWxbcF18fHt9LGZ8fCFuLnRyaWdnZXJ8fG4udHJpZ2dlci5hcHBseShlLGMpIT09ITEpKXtpZighZiYmIW4ubm9CdWJibGUmJiFyLmlzV2luZG93KGUpKXtmb3Ioaj1uLmRlbGVnYXRlVHlwZXx8cCxnYi50ZXN0KGorcCl8fChoPWgucGFyZW50Tm9kZSk7aDtoPWgucGFyZW50Tm9kZSlvLnB1c2goaCksaT1oO2k9PT0oZS5vd25lckRvY3VtZW50fHxkKSYmby5wdXNoKGkuZGVmYXVsdFZpZXd8fGkucGFyZW50V2luZG93fHxhKX1nPTA7d2hpbGUoKGg9b1tnKytdKSYmIWIuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSliLnR5cGU9Zz4xP2o6bi5iaW5kVHlwZXx8cCxtPShXLmdldChoLFwiZXZlbnRzXCIpfHx7fSlbYi50eXBlXSYmVy5nZXQoaCxcImhhbmRsZVwiKSxtJiZtLmFwcGx5KGgsYyksbT1rJiZoW2tdLG0mJm0uYXBwbHkmJlUoaCkmJihiLnJlc3VsdD1tLmFwcGx5KGgsYyksYi5yZXN1bHQ9PT0hMSYmYi5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gYi50eXBlPXAsZnx8Yi5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8bi5fZGVmYXVsdCYmbi5fZGVmYXVsdC5hcHBseShvLnBvcCgpLGMpIT09ITF8fCFVKGUpfHxrJiZyLmlzRnVuY3Rpb24oZVtwXSkmJiFyLmlzV2luZG93KGUpJiYoaT1lW2tdLGkmJihlW2tdPW51bGwpLHIuZXZlbnQudHJpZ2dlcmVkPXAsZVtwXSgpLHIuZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxpJiYoZVtrXT1pKSksYi5yZXN1bHR9fSxzaW11bGF0ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9ci5leHRlbmQobmV3IHIuRXZlbnQsYyx7dHlwZTphLGlzU2ltdWxhdGVkOiEwfSk7ci5ldmVudC50cmlnZ2VyKGQsbnVsbCxiKX19KSxyLmZuLmV4dGVuZCh7dHJpZ2dlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmV2ZW50LnRyaWdnZXIoYSxiLHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpc1swXTtpZihjKXJldHVybiByLmV2ZW50LnRyaWdnZXIoYSxiLGMsITApfX0pLHIuZWFjaChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtyLmZuW2JdPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKGIsbnVsbCxhLGMpOnRoaXMudHJpZ2dlcihiKX19KSxyLmZuLmV4dGVuZCh7aG92ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGEpLm1vdXNlbGVhdmUoYnx8YSl9fSksby5mb2N1c2luPVwib25mb2N1c2luXCJpbiBhLG8uZm9jdXNpbnx8ci5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbihhKXtyLmV2ZW50LnNpbXVsYXRlKGIsYS50YXJnZXQsci5ldmVudC5maXgoYSkpfTtyLmV2ZW50LnNwZWNpYWxbYl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9Vy5hY2Nlc3MoZCxiKTtlfHxkLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKSxXLmFjY2VzcyhkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPVcuYWNjZXNzKGQsYiktMTtlP1cuYWNjZXNzKGQsYixlKTooZC5yZW1vdmVFdmVudExpc3RlbmVyKGEsYywhMCksVy5yZW1vdmUoZCxiKSl9fX0pO3ZhciBoYj0vXFxbXFxdJC8saWI9L1xccj9cXG4vZyxqYj0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksa2I9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIGxiKGEsYixjLGQpe3ZhciBlO2lmKEFycmF5LmlzQXJyYXkoYikpci5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHxoYi50ZXN0KGEpP2QoYSxlKTpsYihhK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZT9iOlwiXCIpK1wiXVwiLGUsYyxkKTtcbn0pO2Vsc2UgaWYoY3x8XCJvYmplY3RcIiE9PXIudHlwZShiKSlkKGEsYik7ZWxzZSBmb3IoZSBpbiBiKWxiKGErXCJbXCIrZStcIl1cIixiW2VdLGMsZCl9ci5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe3ZhciBjPXIuaXNGdW5jdGlvbihiKT9iKCk6YjtkW2QubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG51bGw9PWM/XCJcIjpjKX07aWYoQXJyYXkuaXNBcnJheShhKXx8YS5qcXVlcnkmJiFyLmlzUGxhaW5PYmplY3QoYSkpci5lYWNoKGEsZnVuY3Rpb24oKXtlKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKGMgaW4gYSlsYihjLGFbY10sYixlKTtyZXR1cm4gZC5qb2luKFwiJlwiKX0sci5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiByLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9ci5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gYT9yLm1ha2VBcnJheShhKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFyKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZrYi50ZXN0KHRoaXMubm9kZU5hbWUpJiYhamIudGVzdChhKSYmKHRoaXMuY2hlY2tlZHx8IWphLnRlc3QoYSkpfSkubWFwKGZ1bmN0aW9uKGEsYil7dmFyIGM9cih0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09Yz9udWxsOkFycmF5LmlzQXJyYXkoYyk/ci5tYXAoYyxmdW5jdGlvbihhKXtyZXR1cm57bmFtZTpiLm5hbWUsdmFsdWU6YS5yZXBsYWNlKGliLFwiXFxyXFxuXCIpfX0pOntuYW1lOmIubmFtZSx2YWx1ZTpjLnJlcGxhY2UoaWIsXCJcXHJcXG5cIil9fSkuZ2V0KCl9fSksci5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIHRoaXNbMF0mJihyLmlzRnVuY3Rpb24oYSkmJihhPWEuY2FsbCh0aGlzWzBdKSksYj1yKGEsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZiLmluc2VydEJlZm9yZSh0aGlzWzBdKSxiLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXM7d2hpbGUoYS5maXJzdEVsZW1lbnRDaGlsZClhPWEuZmlyc3RFbGVtZW50Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcykpLHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gci5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1yKHRoaXMpLGM9Yi5jb250ZW50cygpO2MubGVuZ3RoP2Mud3JhcEFsbChhKTpiLmFwcGVuZChhKX0pfSx3cmFwOmZ1bmN0aW9uKGEpe3ZhciBiPXIuaXNGdW5jdGlvbihhKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3IodGhpcykud3JhcEFsbChiP2EuY2FsbCh0aGlzLGMpOmEpfSl9LHVud3JhcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wYXJlbnQoYSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7cih0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxyLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oYSl7cmV0dXJuIXIuZXhwci5wc2V1ZG9zLnZpc2libGUoYSl9LHIuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oYSl7cmV0dXJuISEoYS5vZmZzZXRXaWR0aHx8YS5vZmZzZXRIZWlnaHR8fGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxvLmNyZWF0ZUhUTUxEb2N1bWVudD1mdW5jdGlvbigpe3ZhciBhPWQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwyPT09YS5jaGlsZE5vZGVzLmxlbmd0aH0oKSxyLnBhcnNlSFRNTD1mdW5jdGlvbihhLGIsYyl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuW107XCJib29sZWFuXCI9PXR5cGVvZiBiJiYoYz1iLGI9ITEpO3ZhciBlLGYsZztyZXR1cm4gYnx8KG8uY3JlYXRlSFRNTERvY3VtZW50PyhiPWQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLGU9Yi5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKSxlLmhyZWY9ZC5sb2NhdGlvbi5ocmVmLGIuaGVhZC5hcHBlbmRDaGlsZChlKSk6Yj1kKSxmPUMuZXhlYyhhKSxnPSFjJiZbXSxmP1tiLmNyZWF0ZUVsZW1lbnQoZlsxXSldOihmPXFhKFthXSxiLGcpLGcmJmcubGVuZ3RoJiZyKGcpLnJlbW92ZSgpLHIubWVyZ2UoW10sZi5jaGlsZE5vZGVzKSl9LHIub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGs9ci5jc3MoYSxcInBvc2l0aW9uXCIpLGw9cihhKSxtPXt9O1wic3RhdGljXCI9PT1rJiYoYS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLGg9bC5vZmZzZXQoKSxmPXIuY3NzKGEsXCJ0b3BcIiksaT1yLmNzcyhhLFwibGVmdFwiKSxqPShcImFic29sdXRlXCI9PT1rfHxcImZpeGVkXCI9PT1rKSYmKGYraSkuaW5kZXhPZihcImF1dG9cIik+LTEsaj8oZD1sLnBvc2l0aW9uKCksZz1kLnRvcCxlPWQubGVmdCk6KGc9cGFyc2VGbG9hdChmKXx8MCxlPXBhcnNlRmxvYXQoaSl8fDApLHIuaXNGdW5jdGlvbihiKSYmKGI9Yi5jYWxsKGEsYyxyLmV4dGVuZCh7fSxoKSkpLG51bGwhPWIudG9wJiYobS50b3A9Yi50b3AtaC50b3ArZyksbnVsbCE9Yi5sZWZ0JiYobS5sZWZ0PWIubGVmdC1oLmxlZnQrZSksXCJ1c2luZ1wiaW4gYj9iLnVzaW5nLmNhbGwoYSxtKTpsLmNzcyhtKX19LHIuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXtyLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkLGUsZj10aGlzWzBdO2lmKGYpcmV0dXJuIGYuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg/KGQ9Zi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxiPWYub3duZXJEb2N1bWVudCxjPWIuZG9jdW1lbnRFbGVtZW50LGU9Yi5kZWZhdWx0Vmlldyx7dG9wOmQudG9wK2UucGFnZVlPZmZzZXQtYy5jbGllbnRUb3AsbGVmdDpkLmxlZnQrZS5wYWdlWE9mZnNldC1jLmNsaWVudExlZnR9KTp7dG9wOjAsbGVmdDowfX0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgYSxiLGM9dGhpc1swXSxkPXt0b3A6MCxsZWZ0OjB9O3JldHVyblwiZml4ZWRcIj09PXIuY3NzKGMsXCJwb3NpdGlvblwiKT9iPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KGE9dGhpcy5vZmZzZXRQYXJlbnQoKSxiPXRoaXMub2Zmc2V0KCksQihhWzBdLFwiaHRtbFwiKXx8KGQ9YS5vZmZzZXQoKSksZD17dG9wOmQudG9wK3IuY3NzKGFbMF0sXCJib3JkZXJUb3BXaWR0aFwiLCEwKSxsZWZ0OmQubGVmdCtyLmNzcyhhWzBdLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApfSkse3RvcDpiLnRvcC1kLnRvcC1yLmNzcyhjLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6Yi5sZWZ0LWQubGVmdC1yLmNzcyhjLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudDt3aGlsZShhJiZcInN0YXRpY1wiPT09ci5jc3MoYSxcInBvc2l0aW9uXCIpKWE9YS5vZmZzZXRQYXJlbnQ7cmV0dXJuIGF8fHJhfSl9fSksci5lYWNoKHtzY3JvbGxMZWZ0OlwicGFnZVhPZmZzZXRcIixzY3JvbGxUb3A6XCJwYWdlWU9mZnNldFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPVwicGFnZVlPZmZzZXRcIj09PWI7ci5mblthXT1mdW5jdGlvbihkKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEsZCxlKXt2YXIgZjtyZXR1cm4gci5pc1dpbmRvdyhhKT9mPWE6OT09PWEubm9kZVR5cGUmJihmPWEuZGVmYXVsdFZpZXcpLHZvaWQgMD09PWU/Zj9mW2JdOmFbZF06dm9pZChmP2Yuc2Nyb2xsVG8oYz9mLnBhZ2VYT2Zmc2V0OmUsYz9lOmYucGFnZVlPZmZzZXQpOmFbZF09ZSl9LGEsZCxhcmd1bWVudHMubGVuZ3RoKX19KSxyLmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGEsYil7ci5jc3NIb29rc1tiXT1QYShvLnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oYSxjKXtpZihjKXJldHVybiBjPU9hKGEsYiksTWEudGVzdChjKT9yKGEpLnBvc2l0aW9uKClbYl0rXCJweFwiOmN9KX0pLHIuZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihhLGIpe3IuZWFjaCh7cGFkZGluZzpcImlubmVyXCIrYSxjb250ZW50OmIsXCJcIjpcIm91dGVyXCIrYX0sZnVuY3Rpb24oYyxkKXtyLmZuW2RdPWZ1bmN0aW9uKGUsZil7dmFyIGc9YXJndW1lbnRzLmxlbmd0aCYmKGN8fFwiYm9vbGVhblwiIT10eXBlb2YgZSksaD1jfHwoZT09PSEwfHxmPT09ITA/XCJtYXJnaW5cIjpcImJvcmRlclwiKTtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGIsYyxlKXt2YXIgZjtyZXR1cm4gci5pc1dpbmRvdyhiKT8wPT09ZC5pbmRleE9mKFwib3V0ZXJcIik/YltcImlubmVyXCIrYV06Yi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIithXTo5PT09Yi5ub2RlVHlwZT8oZj1iLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChiLmJvZHlbXCJzY3JvbGxcIithXSxmW1wic2Nyb2xsXCIrYV0sYi5ib2R5W1wib2Zmc2V0XCIrYV0sZltcIm9mZnNldFwiK2FdLGZbXCJjbGllbnRcIithXSkpOnZvaWQgMD09PWU/ci5jc3MoYixjLGgpOnIuc3R5bGUoYixjLGUsaCl9LGIsZz9lOnZvaWQgMCxnKX19KX0pLHIuZm4uZXh0ZW5kKHtiaW5kOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5vbihhLG51bGwsYixjKX0sdW5iaW5kOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMub2ZmKGEsbnVsbCxiKX0sZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYixhLGMsZCl9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihhLFwiKipcIik6dGhpcy5vZmYoYixhfHxcIioqXCIsYyl9fSksci5ob2xkUmVhZHk9ZnVuY3Rpb24oYSl7YT9yLnJlYWR5V2FpdCsrOnIucmVhZHkoITApfSxyLmlzQXJyYXk9QXJyYXkuaXNBcnJheSxyLnBhcnNlSlNPTj1KU09OLnBhcnNlLHIubm9kZU5hbWU9QixcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZShcImpxdWVyeVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHJ9KTt2YXIgbWI9YS5qUXVlcnksbmI9YS4kO3JldHVybiByLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oYil7cmV0dXJuIGEuJD09PXImJihhLiQ9bmIpLGImJmEualF1ZXJ5PT09ciYmKGEualF1ZXJ5PW1iKSxyfSxifHwoYS5qUXVlcnk9YS4kPXIpLHJ9KTtcbiIsIi8qISBNYWduaWZpYyBQb3B1cCAtIHYxLjEuMCAtIDIwMTYtMDItMjBcbiogaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvXG4qIENvcHlyaWdodCAoYykgMjAxNiBEbWl0cnkgU2VtZW5vdjsgKi9cbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHsgXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7IFxuIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4gXG4gZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpOyBcbiB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykgeyBcbiAvLyBOb2RlL0NvbW1vbkpTIFxuIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpOyBcbiB9IGVsc2UgeyBcbiAvLyBCcm93c2VyIGdsb2JhbHMgXG4gZmFjdG9yeSh3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0byk7IFxuIH0gXG4gfShmdW5jdGlvbigkKSB7IFxuXG4vKj4+Y29yZSovXG4vKipcbiAqIFxuICogTWFnbmlmaWMgUG9wdXAgQ29yZSBKUyBmaWxlXG4gKiBcbiAqL1xuXG5cbi8qKlxuICogUHJpdmF0ZSBzdGF0aWMgY29uc3RhbnRzXG4gKi9cbnZhciBDTE9TRV9FVkVOVCA9ICdDbG9zZScsXG5cdEJFRk9SRV9DTE9TRV9FVkVOVCA9ICdCZWZvcmVDbG9zZScsXG5cdEFGVEVSX0NMT1NFX0VWRU5UID0gJ0FmdGVyQ2xvc2UnLFxuXHRCRUZPUkVfQVBQRU5EX0VWRU5UID0gJ0JlZm9yZUFwcGVuZCcsXG5cdE1BUktVUF9QQVJTRV9FVkVOVCA9ICdNYXJrdXBQYXJzZScsXG5cdE9QRU5fRVZFTlQgPSAnT3BlbicsXG5cdENIQU5HRV9FVkVOVCA9ICdDaGFuZ2UnLFxuXHROUyA9ICdtZnAnLFxuXHRFVkVOVF9OUyA9ICcuJyArIE5TLFxuXHRSRUFEWV9DTEFTUyA9ICdtZnAtcmVhZHknLFxuXHRSRU1PVklOR19DTEFTUyA9ICdtZnAtcmVtb3ZpbmcnLFxuXHRQUkVWRU5UX0NMT1NFX0NMQVNTID0gJ21mcC1wcmV2ZW50LWNsb3NlJztcblxuXG4vKipcbiAqIFByaXZhdGUgdmFycyBcbiAqL1xuLypqc2hpbnQgLVcwNzkgKi9cbnZhciBtZnAsIC8vIEFzIHdlIGhhdmUgb25seSBvbmUgaW5zdGFuY2Ugb2YgTWFnbmlmaWNQb3B1cCBvYmplY3QsIHdlIGRlZmluZSBpdCBsb2NhbGx5IHRvIG5vdCB0byB1c2UgJ3RoaXMnXG5cdE1hZ25pZmljUG9wdXAgPSBmdW5jdGlvbigpe30sXG5cdF9pc0pRID0gISEod2luZG93LmpRdWVyeSksXG5cdF9wcmV2U3RhdHVzLFxuXHRfd2luZG93ID0gJCh3aW5kb3cpLFxuXHRfZG9jdW1lbnQsXG5cdF9wcmV2Q29udGVudFR5cGUsXG5cdF93cmFwQ2xhc3Nlcyxcblx0X2N1cnJQb3B1cFR5cGU7XG5cblxuLyoqXG4gKiBQcml2YXRlIGZ1bmN0aW9uc1xuICovXG52YXIgX21mcE9uID0gZnVuY3Rpb24obmFtZSwgZikge1xuXHRcdG1mcC5ldi5vbihOUyArIG5hbWUgKyBFVkVOVF9OUywgZik7XG5cdH0sXG5cdF9nZXRFbCA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgYXBwZW5kVG8sIGh0bWwsIHJhdykge1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGVsLmNsYXNzTmFtZSA9ICdtZnAtJytjbGFzc05hbWU7XG5cdFx0aWYoaHRtbCkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gaHRtbDtcblx0XHR9XG5cdFx0aWYoIXJhdykge1xuXHRcdFx0ZWwgPSAkKGVsKTtcblx0XHRcdGlmKGFwcGVuZFRvKSB7XG5cdFx0XHRcdGVsLmFwcGVuZFRvKGFwcGVuZFRvKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYoYXBwZW5kVG8pIHtcblx0XHRcdGFwcGVuZFRvLmFwcGVuZENoaWxkKGVsKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsO1xuXHR9LFxuXHRfbWZwVHJpZ2dlciA9IGZ1bmN0aW9uKGUsIGRhdGEpIHtcblx0XHRtZnAuZXYudHJpZ2dlckhhbmRsZXIoTlMgKyBlLCBkYXRhKTtcblxuXHRcdGlmKG1mcC5zdC5jYWxsYmFja3MpIHtcblx0XHRcdC8vIGNvbnZlcnRzIFwibWZwRXZlbnROYW1lXCIgdG8gXCJldmVudE5hbWVcIiBjYWxsYmFjayBhbmQgdHJpZ2dlcnMgaXQgaWYgaXQncyBwcmVzZW50XG5cdFx0XHRlID0gZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGUuc2xpY2UoMSk7XG5cdFx0XHRpZihtZnAuc3QuY2FsbGJhY2tzW2VdKSB7XG5cdFx0XHRcdG1mcC5zdC5jYWxsYmFja3NbZV0uYXBwbHkobWZwLCAkLmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9nZXRDbG9zZUJ0biA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRpZih0eXBlICE9PSBfY3VyclBvcHVwVHlwZSB8fCAhbWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bikge1xuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0biA9ICQoIG1mcC5zdC5jbG9zZU1hcmt1cC5yZXBsYWNlKCcldGl0bGUlJywgbWZwLnN0LnRDbG9zZSApICk7XG5cdFx0XHRfY3VyclBvcHVwVHlwZSA9IHR5cGU7XG5cdFx0fVxuXHRcdHJldHVybiBtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuO1xuXHR9LFxuXHQvLyBJbml0aWFsaXplIE1hZ25pZmljIFBvcHVwIG9ubHkgd2hlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRfY2hlY2tJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCEkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UpIHtcblx0XHRcdC8qanNoaW50IC1XMDIwICovXG5cdFx0XHRtZnAgPSBuZXcgTWFnbmlmaWNQb3B1cCgpO1xuXHRcdFx0bWZwLmluaXQoKTtcblx0XHRcdCQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSA9IG1mcDtcblx0XHR9XG5cdH0sXG5cdC8vIENTUyB0cmFuc2l0aW9uIGRldGVjdGlvbiwgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjY0ODk5L2RldGVjdC1jc3MtdHJhbnNpdGlvbnMtdXNpbmctamF2YXNjcmlwdC1hbmQtd2l0aG91dC1tb2Rlcm5penJcblx0c3VwcG9ydHNUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLCAvLyAncycgZm9yIHN0eWxlLiBiZXR0ZXIgdG8gY3JlYXRlIGFuIGVsZW1lbnQgaWYgYm9keSB5ZXQgdG8gZXhpc3Rcblx0XHRcdHYgPSBbJ21zJywnTycsJ01veicsJ1dlYmtpdCddOyAvLyAndicgZm9yIHZlbmRvclxuXG5cdFx0aWYoIHNbJ3RyYW5zaXRpb24nXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRydWU7IFxuXHRcdH1cblx0XHRcdFxuXHRcdHdoaWxlKCB2Lmxlbmd0aCApIHtcblx0XHRcdGlmKCB2LnBvcCgpICsgJ1RyYW5zaXRpb24nIGluIHMgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cblxuLyoqXG4gKiBQdWJsaWMgZnVuY3Rpb25zXG4gKi9cbk1hZ25pZmljUG9wdXAucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBNYWduaWZpY1BvcHVwLFxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyBNYWduaWZpYyBQb3B1cCBwbHVnaW4uIFxuXHQgKiBUaGlzIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZCBvbmx5IG9uY2Ugd2hlbiAkLmZuLm1hZ25pZmljUG9wdXAgb3IgJC5tYWduaWZpY1BvcHVwIGlzIGV4ZWN1dGVkXG5cdCAqL1xuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXBwVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuXHRcdG1mcC5pc0xvd0lFID0gbWZwLmlzSUU4ID0gZG9jdW1lbnQuYWxsICYmICFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyO1xuXHRcdG1mcC5pc0FuZHJvaWQgPSAoL2FuZHJvaWQvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLmlzSU9TID0gKC9pcGhvbmV8aXBhZHxpcG9kL2dpKS50ZXN0KGFwcFZlcnNpb24pO1xuXHRcdG1mcC5zdXBwb3J0c1RyYW5zaXRpb24gPSBzdXBwb3J0c1RyYW5zaXRpb25zKCk7XG5cblx0XHQvLyBXZSBkaXNhYmxlIGZpeGVkIHBvc2l0aW9uZWQgbGlnaHRib3ggb24gZGV2aWNlcyB0aGF0IGRvbid0IGhhbmRsZSBpdCBuaWNlbHkuXG5cdFx0Ly8gSWYgeW91IGtub3cgYSBiZXR0ZXIgd2F5IG9mIGRldGVjdGluZyB0aGlzIC0gbGV0IG1lIGtub3cuXG5cdFx0bWZwLnByb2JhYmx5TW9iaWxlID0gKG1mcC5pc0FuZHJvaWQgfHwgbWZwLmlzSU9TIHx8IC8oT3BlcmEgTWluaSl8S2luZGxlfHdlYk9TfEJsYWNrQmVycnl8KE9wZXJhIE1vYmkpfChXaW5kb3dzIFBob25lKXxJRU1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgKTtcblx0XHRfZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuXHRcdG1mcC5wb3B1cHNDYWNoZSA9IHt9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBPcGVucyBwb3B1cFxuXHQgKiBAcGFyYW0gIGRhdGEgW2Rlc2NyaXB0aW9uXVxuXHQgKi9cblx0b3BlbjogZnVuY3Rpb24oZGF0YSkge1xuXG5cdFx0dmFyIGk7XG5cblx0XHRpZihkYXRhLmlzT2JqID09PSBmYWxzZSkgeyBcblx0XHRcdC8vIGNvbnZlcnQgalF1ZXJ5IGNvbGxlY3Rpb24gdG8gYXJyYXkgdG8gYXZvaWQgY29uZmxpY3RzIGxhdGVyXG5cdFx0XHRtZnAuaXRlbXMgPSBkYXRhLml0ZW1zLnRvQXJyYXkoKTtcblxuXHRcdFx0bWZwLmluZGV4ID0gMDtcblx0XHRcdHZhciBpdGVtcyA9IGRhdGEuaXRlbXMsXG5cdFx0XHRcdGl0ZW07XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpdGVtID0gaXRlbXNbaV07XG5cdFx0XHRcdGlmKGl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRcdFx0aXRlbSA9IGl0ZW0uZWxbMF07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoaXRlbSA9PT0gZGF0YS5lbFswXSkge1xuXHRcdFx0XHRcdG1mcC5pbmRleCA9IGk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLml0ZW1zID0gJC5pc0FycmF5KGRhdGEuaXRlbXMpID8gZGF0YS5pdGVtcyA6IFtkYXRhLml0ZW1zXTtcblx0XHRcdG1mcC5pbmRleCA9IGRhdGEuaW5kZXggfHwgMDtcblx0XHR9XG5cblx0XHQvLyBpZiBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZCAtIHdlIGp1c3QgdXBkYXRlIHRoZSBjb250ZW50XG5cdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdG1mcC50eXBlcyA9IFtdOyBcblx0XHRfd3JhcENsYXNzZXMgPSAnJztcblx0XHRpZihkYXRhLm1haW5FbCAmJiBkYXRhLm1haW5FbC5sZW5ndGgpIHtcblx0XHRcdG1mcC5ldiA9IGRhdGEubWFpbkVsLmVxKDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuZXYgPSBfZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0aWYoZGF0YS5rZXkpIHtcblx0XHRcdGlmKCFtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldKSB7XG5cdFx0XHRcdG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0gPSB7fTtcblx0XHRcdH1cblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSBtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlID0ge307XG5cdFx0fVxuXG5cblxuXHRcdG1mcC5zdCA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMsIGRhdGEgKTsgXG5cdFx0bWZwLmZpeGVkQ29udGVudFBvcyA9IG1mcC5zdC5maXhlZENvbnRlbnRQb3MgPT09ICdhdXRvJyA/ICFtZnAucHJvYmFibHlNb2JpbGUgOiBtZnAuc3QuZml4ZWRDb250ZW50UG9zO1xuXG5cdFx0aWYobWZwLnN0Lm1vZGFsKSB7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljayA9IGZhbHNlO1xuXHRcdFx0bWZwLnN0LmNsb3NlT25CZ0NsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3Quc2hvd0Nsb3NlQnRuID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuZW5hYmxlRXNjYXBlS2V5ID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXG5cdFx0Ly8gQnVpbGRpbmcgbWFya3VwXG5cdFx0Ly8gbWFpbiBjb250YWluZXJzIGFyZSBjcmVhdGVkIG9ubHkgb25jZVxuXHRcdGlmKCFtZnAuYmdPdmVybGF5KSB7XG5cblx0XHRcdC8vIERhcmsgb3ZlcmxheVxuXHRcdFx0bWZwLmJnT3ZlcmxheSA9IF9nZXRFbCgnYmcnKS5vbignY2xpY2snK0VWRU5UX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLndyYXAgPSBfZ2V0RWwoJ3dyYXAnKS5hdHRyKCd0YWJpbmRleCcsIC0xKS5vbignY2xpY2snK0VWRU5UX05TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmKG1mcC5fY2hlY2tJZkNsb3NlKGUudGFyZ2V0KSkge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLmNvbnRhaW5lciA9IF9nZXRFbCgnY29udGFpbmVyJywgbWZwLndyYXApO1xuXHRcdH1cblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyID0gX2dldEVsKCdjb250ZW50Jyk7XG5cdFx0aWYobWZwLnN0LnByZWxvYWRlcikge1xuXHRcdFx0bWZwLnByZWxvYWRlciA9IF9nZXRFbCgncHJlbG9hZGVyJywgbWZwLmNvbnRhaW5lciwgbWZwLnN0LnRMb2FkaW5nKTtcblx0XHR9XG5cblxuXHRcdC8vIEluaXRpYWxpemluZyBtb2R1bGVzXG5cdFx0dmFyIG1vZHVsZXMgPSAkLm1hZ25pZmljUG9wdXAubW9kdWxlcztcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgbiA9IG1vZHVsZXNbaV07XG5cdFx0XHRuID0gbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG4uc2xpY2UoMSk7XG5cdFx0XHRtZnBbJ2luaXQnK25dLmNhbGwobWZwKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZU9wZW4nKTtcblxuXG5cdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0bikge1xuXHRcdFx0Ly8gQ2xvc2UgYnV0dG9uXG5cdFx0XHRpZighbWZwLnN0LmNsb3NlQnRuSW5zaWRlKSB7XG5cdFx0XHRcdG1mcC53cmFwLmFwcGVuZCggX2dldENsb3NlQnRuKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQsIGZ1bmN0aW9uKGUsIHRlbXBsYXRlLCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHRcdFx0XHR2YWx1ZXMuY2xvc2VfcmVwbGFjZVdpdGggPSBfZ2V0Q2xvc2VCdG4oaXRlbS50eXBlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdF93cmFwQ2xhc3NlcyArPSAnIG1mcC1jbG9zZS1idG4taW4nO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKG1mcC5zdC5hbGlnblRvcCkge1xuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWFsaWduLXRvcCc7XG5cdFx0fVxuXG5cdFxuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKHtcblx0XHRcdFx0b3ZlcmZsb3c6IG1mcC5zdC5vdmVyZmxvd1ksXG5cdFx0XHRcdG92ZXJmbG93WDogJ2hpZGRlbicsXG5cdFx0XHRcdG92ZXJmbG93WTogbWZwLnN0Lm92ZXJmbG93WVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC53cmFwLmNzcyh7IFxuXHRcdFx0XHR0b3A6IF93aW5kb3cuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYoIG1mcC5zdC5maXhlZEJnUG9zID09PSBmYWxzZSB8fCAobWZwLnN0LmZpeGVkQmdQb3MgPT09ICdhdXRvJyAmJiAhbWZwLmZpeGVkQ29udGVudFBvcykgKSB7XG5cdFx0XHRtZnAuYmdPdmVybGF5LmNzcyh7XG5cdFx0XHRcdGhlaWdodDogX2RvY3VtZW50LmhlaWdodCgpLFxuXHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0XG5cblx0XHRpZihtZnAuc3QuZW5hYmxlRXNjYXBlS2V5KSB7XG5cdFx0XHQvLyBDbG9zZSBvbiBFU0Mga2V5XG5cdFx0XHRfZG9jdW1lbnQub24oJ2tleXVwJyArIEVWRU5UX05TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmKGUua2V5Q29kZSA9PT0gMjcpIHtcblx0XHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0X3dpbmRvdy5vbigncmVzaXplJyArIEVWRU5UX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC51cGRhdGVTaXplKCk7XG5cdFx0fSk7XG5cblxuXHRcdGlmKCFtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljaykge1xuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWF1dG8tY3Vyc29yJztcblx0XHR9XG5cdFx0XG5cdFx0aWYoX3dyYXBDbGFzc2VzKVxuXHRcdFx0bWZwLndyYXAuYWRkQ2xhc3MoX3dyYXBDbGFzc2VzKTtcblxuXG5cdFx0Ly8gdGhpcyB0cmlnZ2VycyByZWNhbGN1bGF0aW9uIG9mIGxheW91dCwgc28gd2UgZ2V0IGl0IG9uY2UgdG8gbm90IHRvIHRyaWdnZXIgdHdpY2Vcblx0XHR2YXIgd2luZG93SGVpZ2h0ID0gbWZwLndIID0gX3dpbmRvdy5oZWlnaHQoKTtcblxuXHRcdFxuXHRcdHZhciB3aW5kb3dTdHlsZXMgPSB7fTtcblxuXHRcdGlmKCBtZnAuZml4ZWRDb250ZW50UG9zICkge1xuICAgICAgICAgICAgaWYobWZwLl9oYXNTY3JvbGxCYXIod2luZG93SGVpZ2h0KSl7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBtZnAuX2dldFNjcm9sbGJhclNpemUoKTtcbiAgICAgICAgICAgICAgICBpZihzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd1N0eWxlcy5tYXJnaW5SaWdodCA9IHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRpZighbWZwLmlzSUU3KSB7XG5cdFx0XHRcdHdpbmRvd1N0eWxlcy5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWU3IGRvdWJsZS1zY3JvbGwgYnVnXG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdFxuXHRcdFxuXHRcdHZhciBjbGFzc2VzVG9hZGQgPSBtZnAuc3QubWFpbkNsYXNzO1xuXHRcdGlmKG1mcC5pc0lFNykge1xuXHRcdFx0Y2xhc3Nlc1RvYWRkICs9ICcgbWZwLWllNyc7XG5cdFx0fVxuXHRcdGlmKGNsYXNzZXNUb2FkZCkge1xuXHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKCBjbGFzc2VzVG9hZGQgKTtcblx0XHR9XG5cblx0XHQvLyBhZGQgY29udGVudFxuXHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0J1aWxkQ29udHJvbHMnKTtcblxuXHRcdC8vIHJlbW92ZSBzY3JvbGxiYXIsIGFkZCBtYXJnaW4gZS50LmNcblx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0XG5cdFx0Ly8gYWRkIGV2ZXJ5dGhpbmcgdG8gRE9NXG5cdFx0bWZwLmJnT3ZlcmxheS5hZGQobWZwLndyYXApLnByZXBlbmRUbyggbWZwLnN0LnByZXBlbmRUbyB8fCAkKGRvY3VtZW50LmJvZHkpICk7XG5cblx0XHQvLyBTYXZlIGxhc3QgZm9jdXNlZCBlbGVtZW50XG5cdFx0bWZwLl9sYXN0Rm9jdXNlZEVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0XHRcblx0XHQvLyBXYWl0IGZvciBuZXh0IGN5Y2xlIHRvIGFsbG93IENTUyB0cmFuc2l0aW9uXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFxuXHRcdFx0aWYobWZwLmNvbnRlbnQpIHtcblx0XHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKFJFQURZX0NMQVNTKTtcblx0XHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWYgY29udGVudCBpcyBub3QgZGVmaW5lZCAobm90IGxvYWRlZCBlLnQuYykgd2UgYWRkIGNsYXNzIG9ubHkgZm9yIEJHXG5cdFx0XHRcdG1mcC5iZ092ZXJsYXkuYWRkQ2xhc3MoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBUcmFwIHRoZSBmb2N1cyBpbiBwb3B1cFxuXHRcdFx0X2RvY3VtZW50Lm9uKCdmb2N1c2luJyArIEVWRU5UX05TLCBtZnAuX29uRm9jdXNJbik7XG5cblx0XHR9LCAxNik7XG5cblx0XHRtZnAuaXNPcGVuID0gdHJ1ZTtcblx0XHRtZnAudXBkYXRlU2l6ZSh3aW5kb3dIZWlnaHQpO1xuXHRcdF9tZnBUcmlnZ2VyKE9QRU5fRVZFTlQpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENsb3NlcyB0aGUgcG9wdXBcblx0ICovXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRpZighbWZwLmlzT3BlbikgcmV0dXJuO1xuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9DTE9TRV9FVkVOVCk7XG5cblx0XHRtZnAuaXNPcGVuID0gZmFsc2U7XG5cdFx0Ly8gZm9yIENTUzMgYW5pbWF0aW9uXG5cdFx0aWYobWZwLnN0LnJlbW92YWxEZWxheSAmJiAhbWZwLmlzTG93SUUgJiYgbWZwLnN1cHBvcnRzVHJhbnNpdGlvbiApICB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVNT1ZJTkdfQ0xBU1MpO1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdFx0fSwgbWZwLnN0LnJlbW92YWxEZWxheSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5fY2xvc2UoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhlbHBlciBmb3IgY2xvc2UoKSBmdW5jdGlvblxuXHQgKi9cblx0X2Nsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRfbWZwVHJpZ2dlcihDTE9TRV9FVkVOVCk7XG5cblx0XHR2YXIgY2xhc3Nlc1RvUmVtb3ZlID0gUkVNT1ZJTkdfQ0xBU1MgKyAnICcgKyBSRUFEWV9DTEFTUyArICcgJztcblxuXHRcdG1mcC5iZ092ZXJsYXkuZGV0YWNoKCk7XG5cdFx0bWZwLndyYXAuZGV0YWNoKCk7XG5cdFx0bWZwLmNvbnRhaW5lci5lbXB0eSgpO1xuXG5cdFx0aWYobWZwLnN0Lm1haW5DbGFzcykge1xuXHRcdFx0Y2xhc3Nlc1RvUmVtb3ZlICs9IG1mcC5zdC5tYWluQ2xhc3MgKyAnICc7XG5cdFx0fVxuXG5cdFx0bWZwLl9yZW1vdmVDbGFzc0Zyb21NRlAoY2xhc3Nlc1RvUmVtb3ZlKTtcblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdHZhciB3aW5kb3dTdHlsZXMgPSB7bWFyZ2luUmlnaHQ6ICcnfTtcblx0XHRcdGlmKG1mcC5pc0lFNykge1xuXHRcdFx0XHQkKCdib2R5LCBodG1sJykuY3NzKCdvdmVyZmxvdycsICcnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1N0eWxlcy5vdmVyZmxvdyA9ICcnO1xuXHRcdFx0fVxuXHRcdFx0JCgnaHRtbCcpLmNzcyh3aW5kb3dTdHlsZXMpO1xuXHRcdH1cblx0XHRcblx0XHRfZG9jdW1lbnQub2ZmKCdrZXl1cCcgKyBFVkVOVF9OUyArICcgZm9jdXNpbicgKyBFVkVOVF9OUyk7XG5cdFx0bWZwLmV2Lm9mZihFVkVOVF9OUyk7XG5cblx0XHQvLyBjbGVhbiB1cCBET00gZWxlbWVudHMgdGhhdCBhcmVuJ3QgcmVtb3ZlZFxuXHRcdG1mcC53cmFwLmF0dHIoJ2NsYXNzJywgJ21mcC13cmFwJykucmVtb3ZlQXR0cignc3R5bGUnKTtcblx0XHRtZnAuYmdPdmVybGF5LmF0dHIoJ2NsYXNzJywgJ21mcC1iZycpO1xuXHRcdG1mcC5jb250YWluZXIuYXR0cignY2xhc3MnLCAnbWZwLWNvbnRhaW5lcicpO1xuXG5cdFx0Ly8gcmVtb3ZlIGNsb3NlIGJ1dHRvbiBmcm9tIHRhcmdldCBlbGVtZW50XG5cdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0biAmJlxuXHRcdCghbWZwLnN0LmNsb3NlQnRuSW5zaWRlIHx8IG1mcC5jdXJyVGVtcGxhdGVbbWZwLmN1cnJJdGVtLnR5cGVdID09PSB0cnVlKSkge1xuXHRcdFx0aWYobWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bilcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bi5kZXRhY2goKTtcblx0XHR9XG5cblxuXHRcdGlmKG1mcC5zdC5hdXRvRm9jdXNMYXN0ICYmIG1mcC5fbGFzdEZvY3VzZWRFbCkge1xuXHRcdFx0JChtZnAuX2xhc3RGb2N1c2VkRWwpLmZvY3VzKCk7IC8vIHB1dCB0YWIgZm9jdXMgYmFja1xuXHRcdH1cblx0XHRtZnAuY3Vyckl0ZW0gPSBudWxsO1x0XG5cdFx0bWZwLmNvbnRlbnQgPSBudWxsO1xuXHRcdG1mcC5jdXJyVGVtcGxhdGUgPSBudWxsO1xuXHRcdG1mcC5wcmV2SGVpZ2h0ID0gMDtcblxuXHRcdF9tZnBUcmlnZ2VyKEFGVEVSX0NMT1NFX0VWRU5UKTtcblx0fSxcblx0XG5cdHVwZGF0ZVNpemU6IGZ1bmN0aW9uKHdpbkhlaWdodCkge1xuXG5cdFx0aWYobWZwLmlzSU9TKSB7XG5cdFx0XHQvLyBmaXhlcyBpT1MgbmF2IGJhcnMgaHR0cHM6Ly9naXRodWIuY29tL2RpbXNlbWVub3YvTWFnbmlmaWMtUG9wdXAvaXNzdWVzLzJcblx0XHRcdHZhciB6b29tTGV2ZWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdHZhciBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiB6b29tTGV2ZWw7XG5cdFx0XHRtZnAud3JhcC5jc3MoJ2hlaWdodCcsIGhlaWdodCk7XG5cdFx0XHRtZnAud0ggPSBoZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC53SCA9IHdpbkhlaWdodCB8fCBfd2luZG93LmhlaWdodCgpO1xuXHRcdH1cblx0XHQvLyBGaXhlcyAjODQ6IHBvcHVwIGluY29ycmVjdGx5IHBvc2l0aW9uZWQgd2l0aCBwb3NpdGlvbjpyZWxhdGl2ZSBvbiBib2R5XG5cdFx0aWYoIW1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgbWZwLndIKTtcblx0XHR9XG5cblx0XHRfbWZwVHJpZ2dlcignUmVzaXplJyk7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0IGNvbnRlbnQgb2YgcG9wdXAgYmFzZWQgb24gY3VycmVudCBpbmRleFxuXHQgKi9cblx0dXBkYXRlSXRlbUhUTUw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtID0gbWZwLml0ZW1zW21mcC5pbmRleF07XG5cblx0XHQvLyBEZXRhY2ggYW5kIHBlcmZvcm0gbW9kaWZpY2F0aW9uc1xuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmRldGFjaCgpO1xuXG5cdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRtZnAuY29udGVudC5kZXRhY2goKTtcblxuXHRcdGlmKCFpdGVtLnBhcnNlZCkge1xuXHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBtZnAuaW5kZXggKTtcblx0XHR9XG5cblx0XHR2YXIgdHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdCZWZvcmVDaGFuZ2UnLCBbbWZwLmN1cnJJdGVtID8gbWZwLmN1cnJJdGVtLnR5cGUgOiAnJywgdHlwZV0pO1xuXHRcdC8vIEJlZm9yZUNoYW5nZSBldmVudCB3b3JrcyBsaWtlIHNvOlxuXHRcdC8vIF9tZnBPbignQmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZSwgcHJldlR5cGUsIG5ld1R5cGUpIHsgfSk7XG5cblx0XHRtZnAuY3Vyckl0ZW0gPSBpdGVtO1xuXG5cdFx0aWYoIW1mcC5jdXJyVGVtcGxhdGVbdHlwZV0pIHtcblx0XHRcdHZhciBtYXJrdXAgPSBtZnAuc3RbdHlwZV0gPyBtZnAuc3RbdHlwZV0ubWFya3VwIDogZmFsc2U7XG5cblx0XHRcdC8vIGFsbG93cyB0byBtb2RpZnkgbWFya3VwXG5cdFx0XHRfbWZwVHJpZ2dlcignRmlyc3RNYXJrdXBQYXJzZScsIG1hcmt1cCk7XG5cblx0XHRcdGlmKG1hcmt1cCkge1xuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID0gJChtYXJrdXApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gbWFya3VwIGZvdW5kIHdlIGp1c3QgZGVmaW5lIHRoYXQgdGVtcGxhdGUgaXMgcGFyc2VkXG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKF9wcmV2Q29udGVudFR5cGUgJiYgX3ByZXZDb250ZW50VHlwZSAhPT0gaXRlbS50eXBlKSB7XG5cdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtJytfcHJldkNvbnRlbnRUeXBlKyctaG9sZGVyJyk7XG5cdFx0fVxuXG5cdFx0dmFyIG5ld0NvbnRlbnQgPSBtZnBbJ2dldCcgKyB0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKV0oaXRlbSwgbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSk7XG5cdFx0bWZwLmFwcGVuZENvbnRlbnQobmV3Q29udGVudCwgdHlwZSk7XG5cblx0XHRpdGVtLnByZWxvYWRlZCA9IHRydWU7XG5cblx0XHRfbWZwVHJpZ2dlcihDSEFOR0VfRVZFTlQsIGl0ZW0pO1xuXHRcdF9wcmV2Q29udGVudFR5cGUgPSBpdGVtLnR5cGU7XG5cblx0XHQvLyBBcHBlbmQgY29udGFpbmVyIGJhY2sgYWZ0ZXIgaXRzIGNvbnRlbnQgY2hhbmdlZFxuXHRcdG1mcC5jb250YWluZXIucHJlcGVuZChtZnAuY29udGVudENvbnRhaW5lcik7XG5cblx0XHRfbWZwVHJpZ2dlcignQWZ0ZXJDaGFuZ2UnKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBTZXQgSFRNTCBjb250ZW50IG9mIHBvcHVwXG5cdCAqL1xuXHRhcHBlbmRDb250ZW50OiBmdW5jdGlvbihuZXdDb250ZW50LCB0eXBlKSB7XG5cdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXG5cdFx0aWYobmV3Q29udGVudCkge1xuXHRcdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0biAmJiBtZnAuc3QuY2xvc2VCdG5JbnNpZGUgJiZcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAsIHdlIGp1c3QgYXBwZW5kIGNsb3NlIGJ1dHRvbiBlbGVtZW50IGluc2lkZVxuXHRcdFx0XHRpZighbWZwLmNvbnRlbnQuZmluZCgnLm1mcC1jbG9zZScpLmxlbmd0aCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmFwcGVuZChfZ2V0Q2xvc2VCdG4oKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1mcC5jb250ZW50ID0gbmV3Q29udGVudDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLmNvbnRlbnQgPSAnJztcblx0XHR9XG5cblx0XHRfbWZwVHJpZ2dlcihCRUZPUkVfQVBQRU5EX0VWRU5UKTtcblx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtJyt0eXBlKyctaG9sZGVyJyk7XG5cblx0XHRtZnAuY29udGVudENvbnRhaW5lci5hcHBlbmQobWZwLmNvbnRlbnQpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgTWFnbmlmaWMgUG9wdXAgZGF0YSBvYmplY3QgYmFzZWQgb24gZ2l2ZW4gZGF0YVxuXHQgKiBAcGFyYW0gIHtpbnR9IGluZGV4IEluZGV4IG9mIGl0ZW0gdG8gcGFyc2Vcblx0ICovXG5cdHBhcnNlRWw6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbaW5kZXhdLFxuXHRcdFx0dHlwZTtcblxuXHRcdGlmKGl0ZW0udGFnTmFtZSkge1xuXHRcdFx0aXRlbSA9IHsgZWw6ICQoaXRlbSkgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dHlwZSA9IGl0ZW0udHlwZTtcblx0XHRcdGl0ZW0gPSB7IGRhdGE6IGl0ZW0sIHNyYzogaXRlbS5zcmMgfTtcblx0XHR9XG5cblx0XHRpZihpdGVtLmVsKSB7XG5cdFx0XHR2YXIgdHlwZXMgPSBtZnAudHlwZXM7XG5cblx0XHRcdC8vIGNoZWNrIGZvciAnbWZwLVRZUEUnIGNsYXNzXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYoIGl0ZW0uZWwuaGFzQ2xhc3MoJ21mcC0nK3R5cGVzW2ldKSApIHtcblx0XHRcdFx0XHR0eXBlID0gdHlwZXNbaV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2RhdGEtbWZwLXNyYycpO1xuXHRcdFx0aWYoIWl0ZW0uc3JjKSB7XG5cdFx0XHRcdGl0ZW0uc3JjID0gaXRlbS5lbC5hdHRyKCdocmVmJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aXRlbS50eXBlID0gdHlwZSB8fCBtZnAuc3QudHlwZSB8fCAnaW5saW5lJztcblx0XHRpdGVtLmluZGV4ID0gaW5kZXg7XG5cdFx0aXRlbS5wYXJzZWQgPSB0cnVlO1xuXHRcdG1mcC5pdGVtc1tpbmRleF0gPSBpdGVtO1xuXHRcdF9tZnBUcmlnZ2VyKCdFbGVtZW50UGFyc2UnLCBpdGVtKTtcblxuXHRcdHJldHVybiBtZnAuaXRlbXNbaW5kZXhdO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHNpbmdsZSBwb3B1cCBvciBhIGdyb3VwIG9mIHBvcHVwc1xuXHQgKi9cblx0YWRkR3JvdXA6IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIGVIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZS5tZnBFbCA9IHRoaXM7XG5cdFx0XHRtZnAuX29wZW5DbGljayhlLCBlbCwgb3B0aW9ucyk7XG5cdFx0fTtcblxuXHRcdGlmKCFvcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0fVxuXG5cdFx0dmFyIGVOYW1lID0gJ2NsaWNrLm1hZ25pZmljUG9wdXAnO1xuXHRcdG9wdGlvbnMubWFpbkVsID0gZWw7XG5cblx0XHRpZihvcHRpb25zLml0ZW1zKSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gdHJ1ZTtcblx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0aW9ucy5pc09iaiA9IGZhbHNlO1xuXHRcdFx0aWYob3B0aW9ucy5kZWxlZ2F0ZSkge1xuXHRcdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBvcHRpb25zLmRlbGVnYXRlICwgZUhhbmRsZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucy5pdGVtcyA9IGVsO1xuXHRcdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBlSGFuZGxlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRfb3BlbkNsaWNrOiBmdW5jdGlvbihlLCBlbCwgb3B0aW9ucykge1xuXHRcdHZhciBtaWRDbGljayA9IG9wdGlvbnMubWlkQ2xpY2sgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWlkQ2xpY2sgOiAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMubWlkQ2xpY2s7XG5cblxuXHRcdGlmKCFtaWRDbGljayAmJiAoIGUud2hpY2ggPT09IDIgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5ICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGRpc2FibGVPbiA9IG9wdGlvbnMuZGlzYWJsZU9uICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRpc2FibGVPbiA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5kaXNhYmxlT247XG5cblx0XHRpZihkaXNhYmxlT24pIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihkaXNhYmxlT24pKSB7XG5cdFx0XHRcdGlmKCAhZGlzYWJsZU9uLmNhbGwobWZwKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHsgLy8gZWxzZSBpdCdzIG51bWJlclxuXHRcdFx0XHRpZiggX3dpbmRvdy53aWR0aCgpIDwgZGlzYWJsZU9uICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoZS50eXBlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdC8vIFRoaXMgd2lsbCBwcmV2ZW50IHBvcHVwIGZyb20gY2xvc2luZyBpZiBlbGVtZW50IGlzIGluc2lkZSBhbmQgcG9wdXAgaXMgYWxyZWFkeSBvcGVuZWRcblx0XHRcdGlmKG1mcC5pc09wZW4pIHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRvcHRpb25zLmVsID0gJChlLm1mcEVsKTtcblx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRvcHRpb25zLml0ZW1zID0gZWwuZmluZChvcHRpb25zLmRlbGVnYXRlKTtcblx0XHR9XG5cdFx0bWZwLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogVXBkYXRlcyB0ZXh0IG9uIHByZWxvYWRlclxuXHQgKi9cblx0dXBkYXRlU3RhdHVzOiBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcblxuXHRcdGlmKG1mcC5wcmVsb2FkZXIpIHtcblx0XHRcdGlmKF9wcmV2U3RhdHVzICE9PSBzdGF0dXMpIHtcblx0XHRcdFx0bWZwLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnbWZwLXMtJytfcHJldlN0YXR1cyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF0ZXh0ICYmIHN0YXR1cyA9PT0gJ2xvYWRpbmcnKSB7XG5cdFx0XHRcdHRleHQgPSBtZnAuc3QudExvYWRpbmc7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkYXRhID0ge1xuXHRcdFx0XHRzdGF0dXM6IHN0YXR1cyxcblx0XHRcdFx0dGV4dDogdGV4dFxuXHRcdFx0fTtcblx0XHRcdC8vIGFsbG93cyB0byBtb2RpZnkgc3RhdHVzXG5cdFx0XHRfbWZwVHJpZ2dlcignVXBkYXRlU3RhdHVzJywgZGF0YSk7XG5cblx0XHRcdHN0YXR1cyA9IGRhdGEuc3RhdHVzO1xuXHRcdFx0dGV4dCA9IGRhdGEudGV4dDtcblxuXHRcdFx0bWZwLnByZWxvYWRlci5odG1sKHRleHQpO1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmZpbmQoJ2EnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLmNvbnRhaW5lci5hZGRDbGFzcygnbWZwLXMtJytzdGF0dXMpO1xuXHRcdFx0X3ByZXZTdGF0dXMgPSBzdGF0dXM7XG5cdFx0fVxuXHR9LFxuXG5cblx0Lypcblx0XHRcIlByaXZhdGVcIiBoZWxwZXJzIHRoYXQgYXJlbid0IHByaXZhdGUgYXQgYWxsXG5cdCAqL1xuXHQvLyBDaGVjayB0byBjbG9zZSBwb3B1cCBvciBub3Rcblx0Ly8gXCJ0YXJnZXRcIiBpcyBhbiBlbGVtZW50IHRoYXQgd2FzIGNsaWNrZWRcblx0X2NoZWNrSWZDbG9zZTogZnVuY3Rpb24odGFyZ2V0KSB7XG5cblx0XHRpZigkKHRhcmdldCkuaGFzQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgY2xvc2VPbkNvbnRlbnQgPSBtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljaztcblx0XHR2YXIgY2xvc2VPbkJnID0gbWZwLnN0LmNsb3NlT25CZ0NsaWNrO1xuXG5cdFx0aWYoY2xvc2VPbkNvbnRlbnQgJiYgY2xvc2VPbkJnKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBXZSBjbG9zZSB0aGUgcG9wdXAgaWYgY2xpY2sgaXMgb24gY2xvc2UgYnV0dG9uIG9yIG9uIHByZWxvYWRlci4gT3IgaWYgdGhlcmUgaXMgbm8gY29udGVudC5cblx0XHRcdGlmKCFtZnAuY29udGVudCB8fCAkKHRhcmdldCkuaGFzQ2xhc3MoJ21mcC1jbG9zZScpIHx8IChtZnAucHJlbG9hZGVyICYmIHRhcmdldCA9PT0gbWZwLnByZWxvYWRlclswXSkgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpZiBjbGljayBpcyBvdXRzaWRlIHRoZSBjb250ZW50XG5cdFx0XHRpZiggICh0YXJnZXQgIT09IG1mcC5jb250ZW50WzBdICYmICEkLmNvbnRhaW5zKG1mcC5jb250ZW50WzBdLCB0YXJnZXQpKSAgKSB7XG5cdFx0XHRcdGlmKGNsb3NlT25CZykge1xuXHRcdFx0XHRcdC8vIGxhc3QgY2hlY2ssIGlmIHRoZSBjbGlja2VkIGVsZW1lbnQgaXMgaW4gRE9NLCAoaW4gY2FzZSBpdCdzIHJlbW92ZWQgb25jbGljaylcblx0XHRcdFx0XHRpZiggJC5jb250YWlucyhkb2N1bWVudCwgdGFyZ2V0KSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKGNsb3NlT25Db250ZW50KSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0X2FkZENsYXNzVG9NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhjTmFtZSk7XG5cdFx0bWZwLndyYXAuYWRkQ2xhc3MoY05hbWUpO1xuXHR9LFxuXHRfcmVtb3ZlQ2xhc3NGcm9tTUZQOiBmdW5jdGlvbihjTmFtZSkge1xuXHRcdHRoaXMuYmdPdmVybGF5LnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5yZW1vdmVDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9oYXNTY3JvbGxCYXI6IGZ1bmN0aW9uKHdpbkhlaWdodCkge1xuXHRcdHJldHVybiAoICAobWZwLmlzSUU3ID8gX2RvY3VtZW50LmhlaWdodCgpIDogZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpID4gKHdpbkhlaWdodCB8fCBfd2luZG93LmhlaWdodCgpKSApO1xuXHR9LFxuXHRfc2V0Rm9jdXM6IGZ1bmN0aW9uKCkge1xuXHRcdChtZnAuc3QuZm9jdXMgPyBtZnAuY29udGVudC5maW5kKG1mcC5zdC5mb2N1cykuZXEoMCkgOiBtZnAud3JhcCkuZm9jdXMoKTtcblx0fSxcblx0X29uRm9jdXNJbjogZnVuY3Rpb24oZSkge1xuXHRcdGlmKCBlLnRhcmdldCAhPT0gbWZwLndyYXBbMF0gJiYgISQuY29udGFpbnMobWZwLndyYXBbMF0sIGUudGFyZ2V0KSApIHtcblx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cdF9wYXJzZU1hcmt1cDogZnVuY3Rpb24odGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdHZhciBhcnI7XG5cdFx0aWYoaXRlbS5kYXRhKSB7XG5cdFx0XHR2YWx1ZXMgPSAkLmV4dGVuZChpdGVtLmRhdGEsIHZhbHVlcyk7XG5cdFx0fVxuXHRcdF9tZnBUcmlnZ2VyKE1BUktVUF9QQVJTRV9FVkVOVCwgW3RlbXBsYXRlLCB2YWx1ZXMsIGl0ZW1dICk7XG5cblx0XHQkLmVhY2godmFsdWVzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRpZih2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGFyciA9IGtleS5zcGxpdCgnXycpO1xuXHRcdFx0aWYoYXJyLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJythcnJbMF0pO1xuXG5cdFx0XHRcdGlmKGVsLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgYXR0ciA9IGFyclsxXTtcblx0XHRcdFx0XHRpZihhdHRyID09PSAncmVwbGFjZVdpdGgnKSB7XG5cdFx0XHRcdFx0XHRpZihlbFswXSAhPT0gdmFsdWVbMF0pIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgodmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZihhdHRyID09PSAnaW1nJykge1xuXHRcdFx0XHRcdFx0aWYoZWwuaXMoJ2ltZycpKSB7XG5cdFx0XHRcdFx0XHRcdGVsLmF0dHIoJ3NyYycsIHZhbHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVsLnJlcGxhY2VXaXRoKCAkKCc8aW1nPicpLmF0dHIoJ3NyYycsIHZhbHVlKS5hdHRyKCdjbGFzcycsIGVsLmF0dHIoJ2NsYXNzJykpICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsLmF0dHIoYXJyWzFdLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRlbXBsYXRlLmZpbmQoRVZFTlRfTlMgKyAnLScra2V5KS5odG1sKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRfZ2V0U2Nyb2xsYmFyU2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0Ly8gdGh4IERhdmlkXG5cdFx0aWYobWZwLnNjcm9sbGJhclNpemUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRzY3JvbGxEaXYuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDogOTlweDsgaGVpZ2h0OiA5OXB4OyBvdmVyZmxvdzogc2Nyb2xsOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTk5OTlweDsnO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuXHRcdFx0bWZwLnNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG5cdFx0fVxuXHRcdHJldHVybiBtZnAuc2Nyb2xsYmFyU2l6ZTtcblx0fVxuXG59OyAvKiBNYWduaWZpY1BvcHVwIGNvcmUgcHJvdG90eXBlIGVuZCAqL1xuXG5cblxuXG4vKipcbiAqIFB1YmxpYyBzdGF0aWMgZnVuY3Rpb25zXG4gKi9cbiQubWFnbmlmaWNQb3B1cCA9IHtcblx0aW5zdGFuY2U6IG51bGwsXG5cdHByb3RvOiBNYWduaWZpY1BvcHVwLnByb3RvdHlwZSxcblx0bW9kdWxlczogW10sXG5cblx0b3BlbjogZnVuY3Rpb24ob3B0aW9ucywgaW5kZXgpIHtcblx0XHRfY2hlY2tJbnN0YW5jZSgpO1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRvcHRpb25zLmlzT2JqID0gdHJ1ZTtcblx0XHRvcHRpb25zLmluZGV4ID0gaW5kZXggfHwgMDtcblx0XHRyZXR1cm4gdGhpcy5pbnN0YW5jZS5vcGVuKG9wdGlvbnMpO1xuXHR9LFxuXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlICYmICQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZS5jbG9zZSgpO1xuXHR9LFxuXG5cdHJlZ2lzdGVyTW9kdWxlOiBmdW5jdGlvbihuYW1lLCBtb2R1bGUpIHtcblx0XHRpZihtb2R1bGUub3B0aW9ucykge1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzW25hbWVdID0gbW9kdWxlLm9wdGlvbnM7XG5cdFx0fVxuXHRcdCQuZXh0ZW5kKHRoaXMucHJvdG8sIG1vZHVsZS5wcm90byk7XG5cdFx0dGhpcy5tb2R1bGVzLnB1c2gobmFtZSk7XG5cdH0sXG5cblx0ZGVmYXVsdHM6IHtcblxuXHRcdC8vIEluZm8gYWJvdXQgb3B0aW9ucyBpcyBpbiBkb2NzOlxuXHRcdC8vIGh0dHA6Ly9kaW1zZW1lbm92LmNvbS9wbHVnaW5zL21hZ25pZmljLXBvcHVwL2RvY3VtZW50YXRpb24uaHRtbCNvcHRpb25zXG5cblx0XHRkaXNhYmxlT246IDAsXG5cblx0XHRrZXk6IG51bGwsXG5cblx0XHRtaWRDbGljazogZmFsc2UsXG5cblx0XHRtYWluQ2xhc3M6ICcnLFxuXG5cdFx0cHJlbG9hZGVyOiB0cnVlLFxuXG5cdFx0Zm9jdXM6ICcnLCAvLyBDU1Mgc2VsZWN0b3Igb2YgaW5wdXQgdG8gZm9jdXMgYWZ0ZXIgcG9wdXAgaXMgb3BlbmVkXG5cblx0XHRjbG9zZU9uQ29udGVudENsaWNrOiBmYWxzZSxcblxuXHRcdGNsb3NlT25CZ0NsaWNrOiB0cnVlLFxuXG5cdFx0Y2xvc2VCdG5JbnNpZGU6IHRydWUsXG5cblx0XHRzaG93Q2xvc2VCdG46IHRydWUsXG5cblx0XHRlbmFibGVFc2NhcGVLZXk6IHRydWUsXG5cblx0XHRtb2RhbDogZmFsc2UsXG5cblx0XHRhbGlnblRvcDogZmFsc2UsXG5cblx0XHRyZW1vdmFsRGVsYXk6IDAsXG5cblx0XHRwcmVwZW5kVG86IG51bGwsXG5cblx0XHRmaXhlZENvbnRlbnRQb3M6ICdhdXRvJyxcblxuXHRcdGZpeGVkQmdQb3M6ICdhdXRvJyxcblxuXHRcdG92ZXJmbG93WTogJ2F1dG8nLFxuXG5cdFx0Y2xvc2VNYXJrdXA6ICc8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1jbG9zZVwiPiYjMjE1OzwvYnV0dG9uPicsXG5cblx0XHR0Q2xvc2U6ICdDbG9zZSAoRXNjKScsXG5cblx0XHR0TG9hZGluZzogJ0xvYWRpbmcuLi4nLFxuXG5cdFx0YXV0b0ZvY3VzTGFzdDogdHJ1ZVxuXG5cdH1cbn07XG5cblxuXG4kLmZuLm1hZ25pZmljUG9wdXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdF9jaGVja0luc3RhbmNlKCk7XG5cblx0dmFyIGpxRWwgPSAkKHRoaXMpO1xuXG5cdC8vIFdlIGNhbGwgc29tZSBBUEkgbWV0aG9kIG9mIGZpcnN0IHBhcmFtIGlzIGEgc3RyaW5nXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdGlmKG9wdGlvbnMgPT09ICdvcGVuJykge1xuXHRcdFx0dmFyIGl0ZW1zLFxuXHRcdFx0XHRpdGVtT3B0cyA9IF9pc0pRID8ganFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJykgOiBqcUVsWzBdLm1hZ25pZmljUG9wdXAsXG5cdFx0XHRcdGluZGV4ID0gcGFyc2VJbnQoYXJndW1lbnRzWzFdLCAxMCkgfHwgMDtcblxuXHRcdFx0aWYoaXRlbU9wdHMuaXRlbXMpIHtcblx0XHRcdFx0aXRlbXMgPSBpdGVtT3B0cy5pdGVtc1tpbmRleF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpdGVtcyA9IGpxRWw7XG5cdFx0XHRcdGlmKGl0ZW1PcHRzLmRlbGVnYXRlKSB7XG5cdFx0XHRcdFx0aXRlbXMgPSBpdGVtcy5maW5kKGl0ZW1PcHRzLmRlbGVnYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmVxKCBpbmRleCApO1xuXHRcdFx0fVxuXHRcdFx0bWZwLl9vcGVuQ2xpY2soe21mcEVsOml0ZW1zfSwganFFbCwgaXRlbU9wdHMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihtZnAuaXNPcGVuKVxuXHRcdFx0XHRtZnBbb3B0aW9uc10uYXBwbHkobWZwLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBjbG9uZSBvcHRpb25zIG9ialxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XG5cblx0XHQvKlxuXHRcdCAqIEFzIFplcHRvIGRvZXNuJ3Qgc3VwcG9ydCAuZGF0YSgpIG1ldGhvZCBmb3Igb2JqZWN0c1xuXHRcdCAqIGFuZCBpdCB3b3JrcyBvbmx5IGluIG5vcm1hbCBicm93c2Vyc1xuXHRcdCAqIHdlIGFzc2lnbiBcIm9wdGlvbnNcIiBvYmplY3QgZGlyZWN0bHkgdG8gdGhlIERPTSBlbGVtZW50LiBGVFchXG5cdFx0ICovXG5cdFx0aWYoX2lzSlEpIHtcblx0XHRcdGpxRWwuZGF0YSgnbWFnbmlmaWNQb3B1cCcsIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcUVsWzBdLm1hZ25pZmljUG9wdXAgPSBvcHRpb25zO1xuXHRcdH1cblxuXHRcdG1mcC5hZGRHcm91cChqcUVsLCBvcHRpb25zKTtcblxuXHR9XG5cdHJldHVybiBqcUVsO1xufTtcblxuLyo+PmNvcmUqL1xuXG4vKj4+aW5saW5lKi9cblxudmFyIElOTElORV9OUyA9ICdpbmxpbmUnLFxuXHRfaGlkZGVuQ2xhc3MsXG5cdF9pbmxpbmVQbGFjZWhvbGRlcixcblx0X2xhc3RJbmxpbmVFbGVtZW50LFxuXHRfcHV0SW5saW5lRWxlbWVudHNCYWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2xhc3RJbmxpbmVFbGVtZW50KSB7XG5cdFx0XHRfaW5saW5lUGxhY2Vob2xkZXIuYWZ0ZXIoIF9sYXN0SW5saW5lRWxlbWVudC5hZGRDbGFzcyhfaGlkZGVuQ2xhc3MpICkuZGV0YWNoKCk7XG5cdFx0XHRfbGFzdElubGluZUVsZW1lbnQgPSBudWxsO1xuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElOTElORV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0aGlkZGVuQ2xhc3M6ICdoaWRlJywgLy8gd2lsbCBiZSBhcHBlbmRlZCB3aXRoIGBtZnAtYCBwcmVmaXhcblx0XHRtYXJrdXA6ICcnLFxuXHRcdHROb3RGb3VuZDogJ0NvbnRlbnQgbm90IGZvdW5kJ1xuXHR9LFxuXHRwcm90bzoge1xuXG5cdFx0aW5pdElubGluZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChJTkxJTkVfTlMpO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrJy4nK0lOTElORV9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9wdXRJbmxpbmVFbGVtZW50c0JhY2soKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJbmxpbmU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdF9wdXRJbmxpbmVFbGVtZW50c0JhY2soKTtcblxuXHRcdFx0aWYoaXRlbS5zcmMpIHtcblx0XHRcdFx0dmFyIGlubGluZVN0ID0gbWZwLnN0LmlubGluZSxcblx0XHRcdFx0XHRlbCA9ICQoaXRlbS5zcmMpO1xuXG5cdFx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGFyZ2V0IGVsZW1lbnQgaGFzIHBhcmVudCAtIHdlIHJlcGxhY2UgaXQgd2l0aCBwbGFjZWhvbGRlciBhbmQgcHV0IGl0IGJhY2sgYWZ0ZXIgcG9wdXAgaXMgY2xvc2VkXG5cdFx0XHRcdFx0dmFyIHBhcmVudCA9IGVsWzBdLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0aWYocGFyZW50ICYmIHBhcmVudC50YWdOYW1lKSB7XG5cdFx0XHRcdFx0XHRpZighX2lubGluZVBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0XHRcdF9oaWRkZW5DbGFzcyA9IGlubGluZVN0LmhpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0XHRfaW5saW5lUGxhY2Vob2xkZXIgPSBfZ2V0RWwoX2hpZGRlbkNsYXNzKTtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gJ21mcC0nK19oaWRkZW5DbGFzcztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIHJlcGxhY2UgdGFyZ2V0IGlubGluZSBlbGVtZW50IHdpdGggcGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IGVsLmFmdGVyKF9pbmxpbmVQbGFjZWhvbGRlcikuZGV0YWNoKCkucmVtb3ZlQ2xhc3MoX2hpZGRlbkNsYXNzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW5saW5lU3QudE5vdEZvdW5kKTtcblx0XHRcdFx0XHRlbCA9ICQoJzxkaXY+Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlubGluZUVsZW1lbnQgPSBlbDtcblx0XHRcdFx0cmV0dXJuIGVsO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge30sIGl0ZW0pO1xuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5pbmxpbmUqL1xuXG4vKj4+YWpheCovXG52YXIgQUpBWF9OUyA9ICdhamF4Jyxcblx0X2FqYXhDdXIsXG5cdF9yZW1vdmVBamF4Q3Vyc29yID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2FqYXhDdXIpIHtcblx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdH1cblx0fSxcblx0X2Rlc3Ryb3lBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cdFx0aWYobWZwLnJlcSkge1xuXHRcdFx0bWZwLnJlcS5hYm9ydCgpO1xuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKEFKQVhfTlMsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0c2V0dGluZ3M6IG51bGwsXG5cdFx0Y3Vyc29yOiAnbWZwLWFqYXgtY3VyJyxcblx0XHR0RXJyb3I6ICc8YSBocmVmPVwiJXVybCVcIj5UaGUgY29udGVudDwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0QWpheDogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChBSkFYX05TKTtcblx0XHRcdF9hamF4Q3VyID0gbWZwLnN0LmFqYXguY3Vyc29yO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrJy4nK0FKQVhfTlMsIF9kZXN0cm95QWpheFJlcXVlc3QpO1xuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UuJyArIEFKQVhfTlMsIF9kZXN0cm95QWpheFJlcXVlc3QpO1xuXHRcdH0sXG5cdFx0Z2V0QWpheDogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKF9hamF4Q3VyKTtcblx0XHRcdH1cblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnbG9hZGluZycpO1xuXG5cdFx0XHR2YXIgb3B0cyA9ICQuZXh0ZW5kKHtcblx0XHRcdFx0dXJsOiBpdGVtLnNyYyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcblx0XHRcdFx0XHR2YXIgdGVtcCA9IHtcblx0XHRcdFx0XHRcdGRhdGE6ZGF0YSxcblx0XHRcdFx0XHRcdHhocjpqcVhIUlxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignUGFyc2VBamF4JywgdGVtcCk7XG5cblx0XHRcdFx0XHRtZnAuYXBwZW5kQ29udGVudCggJCh0ZW1wLmRhdGEpLCBBSkFYX05TICk7XG5cblx0XHRcdFx0XHRpdGVtLmZpbmlzaGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cblx0XHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLndyYXAuYWRkQ2xhc3MoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRcdH0sIDE2KTtcblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignQWpheENvbnRlbnRBZGRlZCcpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRcdFx0XHRpdGVtLmZpbmlzaGVkID0gaXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgbWZwLnN0LmFqYXgudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgbWZwLnN0LmFqYXguc2V0dGluZ3MpO1xuXG5cdFx0XHRtZnAucmVxID0gJC5hamF4KG9wdHMpO1xuXG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmFqYXgqL1xuXG4vKj4+aW1hZ2UqL1xudmFyIF9pbWdJbnRlcnZhbCxcblx0X2dldFRpdGxlID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmKGl0ZW0uZGF0YSAmJiBpdGVtLmRhdGEudGl0bGUgIT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBpdGVtLmRhdGEudGl0bGU7XG5cblx0XHR2YXIgc3JjID0gbWZwLnN0LmltYWdlLnRpdGxlU3JjO1xuXG5cdFx0aWYoc3JjKSB7XG5cdFx0XHRpZigkLmlzRnVuY3Rpb24oc3JjKSkge1xuXHRcdFx0XHRyZXR1cm4gc3JjLmNhbGwobWZwLCBpdGVtKTtcblx0XHRcdH0gZWxzZSBpZihpdGVtLmVsKSB7XG5cdFx0XHRcdHJldHVybiBpdGVtLmVsLmF0dHIoc3JjKSB8fCAnJztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICcnO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ2ltYWdlJywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWZpZ3VyZVwiPicrXG5cdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtY2xvc2VcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdCc8ZmlndXJlPicrXG5cdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1pbWdcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0JzxmaWdjYXB0aW9uPicrXG5cdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWJvdHRvbS1iYXJcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLXRpdGxlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jb3VudGVyXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0JzwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPC9maWdjYXB0aW9uPicrXG5cdFx0XHRcdFx0JzwvZmlndXJlPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXHRcdGN1cnNvcjogJ21mcC16b29tLW91dC1jdXInLFxuXHRcdHRpdGxlU3JjOiAndGl0bGUnLFxuXHRcdHZlcnRpY2FsRml0OiB0cnVlLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBpbWFnZTwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0SW1hZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGltZ1N0ID0gbWZwLnN0LmltYWdlLFxuXHRcdFx0XHRucyA9ICcuaW1hZ2UnO1xuXG5cdFx0XHRtZnAudHlwZXMucHVzaCgnaW1hZ2UnKTtcblxuXHRcdFx0X21mcE9uKE9QRU5fRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuY3Vyckl0ZW0udHlwZSA9PT0gJ2ltYWdlJyAmJiBpbWdTdC5jdXJzb3IpIHtcblx0XHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKGltZ1N0LmN1cnNvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihpbWdTdC5jdXJzb3IpIHtcblx0XHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKGltZ1N0LmN1cnNvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3dpbmRvdy5vZmYoJ3Jlc2l6ZScgKyBFVkVOVF9OUyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdSZXNpemUnK25zLCBtZnAucmVzaXplSW1hZ2UpO1xuXHRcdFx0aWYobWZwLmlzTG93SUUpIHtcblx0XHRcdFx0X21mcE9uKCdBZnRlckNoYW5nZScsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZXNpemVJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5jdXJySXRlbTtcblx0XHRcdGlmKCFpdGVtIHx8ICFpdGVtLmltZykgcmV0dXJuO1xuXG5cdFx0XHRpZihtZnAuc3QuaW1hZ2UudmVydGljYWxGaXQpIHtcblx0XHRcdFx0dmFyIGRlY3IgPSAwO1xuXHRcdFx0XHQvLyBmaXggYm94LXNpemluZyBpbiBpZTcvOFxuXHRcdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRcdGRlY3IgPSBwYXJzZUludChpdGVtLmltZy5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSArIHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy1ib3R0b20nKSwxMCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbS5pbWcuY3NzKCdtYXgtaGVpZ2h0JywgbWZwLndILWRlY3IpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X29uSW1hZ2VIYXNTaXplOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRpZihpdGVtLmltZykge1xuXG5cdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cblx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSB7XG5cdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aXRlbS5pc0NoZWNraW5nSW1nU2l6ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdF9tZnBUcmlnZ2VyKCdJbWFnZUhhc1NpemUnLCBpdGVtKTtcblxuXHRcdFx0XHRpZihpdGVtLmltZ0hpZGRlbikge1xuXHRcdFx0XHRcdGlmKG1mcC5jb250ZW50KVxuXHRcdFx0XHRcdFx0bWZwLmNvbnRlbnQucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cblx0XHRcdFx0XHRpdGVtLmltZ0hpZGRlbiA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdGhhdCBsb29wcyB1bnRpbCB0aGUgaW1hZ2UgaGFzIHNpemUgdG8gZGlzcGxheSBlbGVtZW50cyB0aGF0IHJlbHkgb24gaXQgYXNhcFxuXHRcdCAqL1xuXHRcdGZpbmRJbWFnZVNpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdFx0dmFyIGNvdW50ZXIgPSAwLFxuXHRcdFx0XHRpbWcgPSBpdGVtLmltZ1swXSxcblx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwgPSBmdW5jdGlvbihkZWxheSkge1xuXG5cdFx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSB7XG5cdFx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGRlY2VsZXJhdGluZyBpbnRlcnZhbCB0aGF0IGNoZWNrcyBmb3Igc2l6ZSBvZiBhbiBpbWFnZVxuXHRcdFx0XHRcdF9pbWdJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYoaW1nLm5hdHVyYWxXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID4gMjAwKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y291bnRlcisrO1xuXHRcdFx0XHRcdFx0aWYoY291bnRlciA9PT0gMykge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCgxMCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gNDApIHtcblx0XHRcdFx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwoNTApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNvdW50ZXIgPT09IDEwMCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MDApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIGRlbGF5KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0bWZwU2V0SW50ZXJ2YWwoMSk7XG5cdFx0fSxcblxuXHRcdGdldEltYWdlOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXG5cdFx0XHR2YXIgZ3VhcmQgPSAwLFxuXG5cdFx0XHRcdC8vIGltYWdlIGxvYWQgY29tcGxldGUgaGFuZGxlclxuXHRcdFx0XHRvbkxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0pIHtcblx0XHRcdFx0XHRcdGlmIChpdGVtLmltZ1swXS5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmltZy5vZmYoJy5tZnBsb2FkZXInKTtcblxuXHRcdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRcdG1mcC5fb25JbWFnZUhhc1NpemUoaXRlbSk7XG5cblx0XHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdJbWFnZUxvYWRDb21wbGV0ZScpO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gaWYgaW1hZ2UgY29tcGxldGUgY2hlY2sgZmFpbHMgMjAwIHRpbWVzICgyMCBzZWMpLCB3ZSBhc3N1bWUgdGhhdCB0aGVyZSB3YXMgYW4gZXJyb3IuXG5cdFx0XHRcdFx0XHRcdGd1YXJkKys7XG5cdFx0XHRcdFx0XHRcdGlmKGd1YXJkIDwgMjAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChvbkxvYWRDb21wbGV0ZSwxMDApO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdG9uTG9hZEVycm9yKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gaW1hZ2UgZXJyb3IgaGFuZGxlclxuXHRcdFx0XHRvbkxvYWRFcnJvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXHRcdFx0XHRcdFx0aWYoaXRlbSA9PT0gbWZwLmN1cnJJdGVtKXtcblx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbWdTdC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGltZ1N0ID0gbWZwLnN0LmltYWdlO1xuXG5cblx0XHRcdHZhciBlbCA9IHRlbXBsYXRlLmZpbmQoJy5tZnAtaW1nJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdFx0XHRpbWcuY2xhc3NOYW1lID0gJ21mcC1pbWcnO1xuXHRcdFx0XHRpZihpdGVtLmVsICYmIGl0ZW0uZWwuZmluZCgnaW1nJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0aW1nLmFsdCA9IGl0ZW0uZWwuZmluZCgnaW1nJykuYXR0cignYWx0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbS5pbWcgPSAkKGltZykub24oJ2xvYWQubWZwbG9hZGVyJywgb25Mb2FkQ29tcGxldGUpLm9uKCdlcnJvci5tZnBsb2FkZXInLCBvbkxvYWRFcnJvcik7XG5cdFx0XHRcdGltZy5zcmMgPSBpdGVtLnNyYztcblxuXHRcdFx0XHQvLyB3aXRob3V0IGNsb25lKCkgXCJlcnJvclwiIGV2ZW50IGlzIG5vdCBmaXJpbmcgd2hlbiBJTUcgaXMgcmVwbGFjZWQgYnkgbmV3IElNR1xuXHRcdFx0XHQvLyBUT0RPOiBmaW5kIGEgd2F5IHRvIGF2b2lkIHN1Y2ggY2xvbmluZ1xuXHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRpdGVtLmltZyA9IGl0ZW0uaW1nLmNsb25lKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbWcgPSBpdGVtLmltZ1swXTtcblx0XHRcdFx0aWYoaW1nLm5hdHVyYWxXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYoIWltZy53aWR0aCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1mcC5fcGFyc2VNYXJrdXAodGVtcGxhdGUsIHtcblx0XHRcdFx0dGl0bGU6IF9nZXRUaXRsZShpdGVtKSxcblx0XHRcdFx0aW1nX3JlcGxhY2VXaXRoOiBpdGVtLmltZ1xuXHRcdFx0fSwgaXRlbSk7XG5cblx0XHRcdG1mcC5yZXNpemVJbWFnZSgpO1xuXG5cdFx0XHRpZihpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSBjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cblx0XHRcdFx0aWYoaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRlbXBsYXRlLnJlbW92ZUNsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cdFx0XHRpdGVtLmxvYWRpbmcgPSB0cnVlO1xuXG5cdFx0XHRpZighaXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0dGVtcGxhdGUuYWRkQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdG1mcC5maW5kSW1hZ2VTaXplKGl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmltYWdlKi9cblxuLyo+Pnpvb20qL1xudmFyIGhhc01velRyYW5zZm9ybSxcblx0Z2V0SGFzTW96VHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoaGFzTW96VHJhbnNmb3JtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGhhc01velRyYW5zZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIGhhc01velRyYW5zZm9ybTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCd6b29tJywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRlYXNpbmc6ICdlYXNlLWluLW91dCcsXG5cdFx0ZHVyYXRpb246IDMwMCxcblx0XHRvcGVuZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBlbGVtZW50LmlzKCdpbWcnKSA/IGVsZW1lbnQgOiBlbGVtZW50LmZpbmQoJ2ltZycpO1xuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXG5cdFx0aW5pdFpvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHpvb21TdCA9IG1mcC5zdC56b29tLFxuXHRcdFx0XHRucyA9ICcuem9vbScsXG5cdFx0XHRcdGltYWdlO1xuXG5cdFx0XHRpZighem9vbVN0LmVuYWJsZWQgfHwgIW1mcC5zdXBwb3J0c1RyYW5zaXRpb24pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZHVyYXRpb24gPSB6b29tU3QuZHVyYXRpb24sXG5cdFx0XHRcdGdldEVsVG9BbmltYXRlID0gZnVuY3Rpb24oaW1hZ2UpIHtcblx0XHRcdFx0XHR2YXIgbmV3SW1nID0gaW1hZ2UuY2xvbmUoKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2NsYXNzJykuYWRkQ2xhc3MoJ21mcC1hbmltYXRlZC1pbWFnZScpLFxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbiA9ICdhbGwgJysoem9vbVN0LmR1cmF0aW9uLzEwMDApKydzICcgKyB6b29tU3QuZWFzaW5nLFxuXHRcdFx0XHRcdFx0Y3NzT2JqID0ge1xuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogJ2ZpeGVkJyxcblx0XHRcdFx0XHRcdFx0ekluZGV4OiA5OTk5LFxuXHRcdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRcdCctd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHknOiAnaGlkZGVuJ1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHQgPSAndHJhbnNpdGlvbic7XG5cblx0XHRcdFx0XHRjc3NPYmpbJy13ZWJraXQtJyt0XSA9IGNzc09ialsnLW1vei0nK3RdID0gY3NzT2JqWyctby0nK3RdID0gY3NzT2JqW3RdID0gdHJhbnNpdGlvbjtcblxuXHRcdFx0XHRcdG5ld0ltZy5jc3MoY3NzT2JqKTtcblx0XHRcdFx0XHRyZXR1cm4gbmV3SW1nO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzaG93TWFpbkNvbnRlbnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAuY29udGVudC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvcGVuVGltZW91dCxcblx0XHRcdFx0YW5pbWF0ZWRJbWc7XG5cblx0XHRcdF9tZnBPbignQnVpbGRDb250cm9scycrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3BlblRpbWVvdXQpO1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXHRcdFx0XHRcdC8vIEJhc2ljYWxseSwgYWxsIGNvZGUgYmVsb3cgZG9lcyBpcyBjbG9uZXMgZXhpc3RpbmcgaW1hZ2UsIHB1dHMgaW4gb24gdG9wIG9mIHRoZSBjdXJyZW50IG9uZSBhbmQgYW5pbWF0ZWQgaXRcblxuXHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nID0gZ2V0RWxUb0FuaW1hdGUoaW1hZ2UpO1xuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCgpICk7XG5cblx0XHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoYW5pbWF0ZWRJbWcpO1xuXG5cdFx0XHRcdFx0b3BlblRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCggdHJ1ZSApICk7XG5cdFx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0XHRpbWFnZSA9IGFuaW1hdGVkSW1nID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHRfbWZwVHJpZ2dlcignWm9vbUFuaW1hdGlvbkVuZGVkJyk7XG5cdFx0XHRcdFx0XHRcdH0sIDE2KTsgLy8gYXZvaWQgYmxpbmsgd2hlbiBzd2l0Y2hpbmcgaW1hZ2VzXG5cblx0XHRcdFx0XHRcdH0sIGR1cmF0aW9uKTsgLy8gdGhpcyB0aW1lb3V0IGVxdWFscyBhbmltYXRpb24gZHVyYXRpb25cblxuXHRcdFx0XHRcdH0sIDE2KTsgLy8gYnkgYWRkaW5nIHRoaXMgdGltZW91dCB3ZSBhdm9pZCBzaG9ydCBnbGl0Y2ggYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb25cblxuXG5cdFx0XHRcdFx0Ly8gTG90cyBvZiB0aW1lb3V0cy4uLlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdF9tZnBPbihCRUZPUkVfQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3BlblRpbWVvdXQpO1xuXG5cdFx0XHRcdFx0bWZwLnN0LnJlbW92YWxEZWxheSA9IGR1cmF0aW9uO1xuXG5cdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRpbWFnZSA9IG1mcC5fZ2V0SXRlbVRvWm9vbSgpO1xuXHRcdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nID0gZ2V0RWxUb0FuaW1hdGUoaW1hZ2UpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQodHJ1ZSkgKTtcblx0XHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoYW5pbWF0ZWRJbWcpO1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblx0XHRcdFx0XHR9LCAxNik7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblx0XHRcdFx0XHRpZihhbmltYXRlZEltZykge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcucmVtb3ZlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGltYWdlID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdF9hbGxvd1pvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnO1xuXHRcdH0sXG5cblx0XHRfZ2V0SXRlbVRvWm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihtZnAuY3Vyckl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLmltZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gR2V0IGVsZW1lbnQgcG9zdGlvbiByZWxhdGl2ZSB0byB2aWV3cG9ydFxuXHRcdF9nZXRPZmZzZXQ6IGZ1bmN0aW9uKGlzTGFyZ2UpIHtcblx0XHRcdHZhciBlbDtcblx0XHRcdGlmKGlzTGFyZ2UpIHtcblx0XHRcdFx0ZWwgPSBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWwgPSBtZnAuc3Quem9vbS5vcGVuZXIobWZwLmN1cnJJdGVtLmVsIHx8IG1mcC5jdXJySXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvZmZzZXQgPSBlbC5vZmZzZXQoKTtcblx0XHRcdHZhciBwYWRkaW5nVG9wID0gcGFyc2VJbnQoZWwuY3NzKCdwYWRkaW5nLXRvcCcpLDEwKTtcblx0XHRcdHZhciBwYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdG9mZnNldC50b3AgLT0gKCAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSBwYWRkaW5nVG9wICk7XG5cblxuXHRcdFx0LypcblxuXHRcdFx0QW5pbWF0aW5nIGxlZnQgKyB0b3AgKyB3aWR0aC9oZWlnaHQgbG9va3MgZ2xpdGNoeSBpbiBGaXJlZm94LCBidXQgcGVyZmVjdCBpbiBDaHJvbWUuIEFuZCB2aWNlLXZlcnNhLlxuXG5cdFx0XHQgKi9cblx0XHRcdHZhciBvYmogPSB7XG5cdFx0XHRcdHdpZHRoOiBlbC53aWR0aCgpLFxuXHRcdFx0XHQvLyBmaXggWmVwdG8gaGVpZ2h0K3BhZGRpbmcgaXNzdWVcblx0XHRcdFx0aGVpZ2h0OiAoX2lzSlEgPyBlbC5pbm5lckhlaWdodCgpIDogZWxbMF0ub2Zmc2V0SGVpZ2h0KSAtIHBhZGRpbmdCb3R0b20gLSBwYWRkaW5nVG9wXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJIGhhdGUgdG8gZG8gdGhpcywgYnV0IHRoZXJlIGlzIG5vIGFub3RoZXIgb3B0aW9uXG5cdFx0XHRpZiggZ2V0SGFzTW96VHJhbnNmb3JtKCkgKSB7XG5cdFx0XHRcdG9ialsnLW1vei10cmFuc2Zvcm0nXSA9IG9ialsndHJhbnNmb3JtJ10gPSAndHJhbnNsYXRlKCcgKyBvZmZzZXQubGVmdCArICdweCwnICsgb2Zmc2V0LnRvcCArICdweCknO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2JqLmxlZnQgPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0b2JqLnRvcCA9IG9mZnNldC50b3A7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblxuXHR9XG59KTtcblxuXG5cbi8qPj56b29tKi9cblxuLyo+PmlmcmFtZSovXG5cbnZhciBJRlJBTUVfTlMgPSAnaWZyYW1lJyxcblx0X2VtcHR5UGFnZSA9ICcvL2Fib3V0OmJsYW5rJyxcblxuXHRfZml4SWZyYW1lQnVncyA9IGZ1bmN0aW9uKGlzU2hvd2luZykge1xuXHRcdGlmKG1mcC5jdXJyVGVtcGxhdGVbSUZSQU1FX05TXSkge1xuXHRcdFx0dmFyIGVsID0gbWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdLmZpbmQoJ2lmcmFtZScpO1xuXHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIHJlc2V0IHNyYyBhZnRlciB0aGUgcG9wdXAgaXMgY2xvc2VkIHRvIGF2b2lkIFwidmlkZW8ga2VlcHMgcGxheWluZyBhZnRlciBwb3B1cCBpcyBjbG9zZWRcIiBidWdcblx0XHRcdFx0aWYoIWlzU2hvd2luZykge1xuXHRcdFx0XHRcdGVsWzBdLnNyYyA9IF9lbXB0eVBhZ2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJRTggYmxhY2sgc2NyZWVuIGJ1ZyBmaXhcblx0XHRcdFx0aWYobWZwLmlzSUU4KSB7XG5cdFx0XHRcdFx0ZWwuY3NzKCdkaXNwbGF5JywgaXNTaG93aW5nID8gJ2Jsb2NrJyA6ICdub25lJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShJRlJBTUVfTlMsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0bWFya3VwOiAnPGRpdiBjbGFzcz1cIm1mcC1pZnJhbWUtc2NhbGVyXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxpZnJhbWUgY2xhc3M9XCJtZnAtaWZyYW1lXCIgc3JjPVwiLy9hYm91dDpibGFua1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nK1xuXHRcdFx0XHQnPC9kaXY+JyxcblxuXHRcdHNyY0FjdGlvbjogJ2lmcmFtZV9zcmMnLFxuXG5cdFx0Ly8gd2UgZG9uJ3QgY2FyZSBhbmQgc3VwcG9ydCBvbmx5IG9uZSBkZWZhdWx0IHR5cGUgb2YgVVJMIGJ5IGRlZmF1bHRcblx0XHRwYXR0ZXJuczoge1xuXHRcdFx0eW91dHViZToge1xuXHRcdFx0XHRpbmRleDogJ3lvdXR1YmUuY29tJyxcblx0XHRcdFx0aWQ6ICd2PScsXG5cdFx0XHRcdHNyYzogJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyVpZCU/YXV0b3BsYXk9MSdcblx0XHRcdH0sXG5cdFx0XHR2aW1lbzoge1xuXHRcdFx0XHRpbmRleDogJ3ZpbWVvLmNvbS8nLFxuXHRcdFx0XHRpZDogJy8nLFxuXHRcdFx0XHRzcmM6ICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdGdtYXBzOiB7XG5cdFx0XHRcdGluZGV4OiAnLy9tYXBzLmdvb2dsZS4nLFxuXHRcdFx0XHRzcmM6ICclaWQlJm91dHB1dD1lbWJlZCdcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0SWZyYW1lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElGUkFNRV9OUyk7XG5cblx0XHRcdF9tZnBPbignQmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZSwgcHJldlR5cGUsIG5ld1R5cGUpIHtcblx0XHRcdFx0aWYocHJldlR5cGUgIT09IG5ld1R5cGUpIHtcblx0XHRcdFx0XHRpZihwcmV2VHlwZSA9PT0gSUZSQU1FX05TKSB7XG5cdFx0XHRcdFx0XHRfZml4SWZyYW1lQnVncygpOyAvLyBpZnJhbWUgaWYgcmVtb3ZlZFxuXHRcdFx0XHRcdH0gZWxzZSBpZihuZXdUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKHRydWUpOyAvLyBpZnJhbWUgaXMgc2hvd2luZ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fS8vIGVsc2Uge1xuXHRcdFx0XHRcdC8vIGlmcmFtZSBzb3VyY2UgaXMgc3dpdGNoZWQsIGRvbid0IGRvIGFueXRoaW5nXG5cdFx0XHRcdC8vfVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCArICcuJyArIElGUkFNRV9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Z2V0SWZyYW1lOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXHRcdFx0dmFyIGVtYmVkU3JjID0gaXRlbS5zcmM7XG5cdFx0XHR2YXIgaWZyYW1lU3QgPSBtZnAuc3QuaWZyYW1lO1xuXG5cdFx0XHQkLmVhY2goaWZyYW1lU3QucGF0dGVybnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbWJlZFNyYy5pbmRleE9mKCB0aGlzLmluZGV4ICkgPiAtMSkge1xuXHRcdFx0XHRcdGlmKHRoaXMuaWQpIHtcblx0XHRcdFx0XHRcdGlmKHR5cGVvZiB0aGlzLmlkID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0XHRlbWJlZFNyYyA9IGVtYmVkU3JjLnN1YnN0cihlbWJlZFNyYy5sYXN0SW5kZXhPZih0aGlzLmlkKSt0aGlzLmlkLmxlbmd0aCwgZW1iZWRTcmMubGVuZ3RoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5pZC5jYWxsKCB0aGlzLCBlbWJlZFNyYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbWJlZFNyYyA9IHRoaXMuc3JjLnJlcGxhY2UoJyVpZCUnLCBlbWJlZFNyYyApO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgZGF0YU9iaiA9IHt9O1xuXHRcdFx0aWYoaWZyYW1lU3Quc3JjQWN0aW9uKSB7XG5cdFx0XHRcdGRhdGFPYmpbaWZyYW1lU3Quc3JjQWN0aW9uXSA9IGVtYmVkU3JjO1xuXHRcdFx0fVxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwgZGF0YU9iaiwgaXRlbSk7XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG5cblxuLyo+PmlmcmFtZSovXG5cbi8qPj5nYWxsZXJ5Ki9cbi8qKlxuICogR2V0IGxvb3BlZCBpbmRleCBkZXBlbmRpbmcgb24gbnVtYmVyIG9mIHNsaWRlc1xuICovXG52YXIgX2dldExvb3BlZElkID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbnVtU2xpZGVzID0gbWZwLml0ZW1zLmxlbmd0aDtcblx0XHRpZihpbmRleCA+IG51bVNsaWRlcyAtIDEpIHtcblx0XHRcdHJldHVybiBpbmRleCAtIG51bVNsaWRlcztcblx0XHR9IGVsc2UgIGlmKGluZGV4IDwgMCkge1xuXHRcdFx0cmV0dXJuIG51bVNsaWRlcyArIGluZGV4O1xuXHRcdH1cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cdF9yZXBsYWNlQ3VyclRvdGFsID0gZnVuY3Rpb24odGV4dCwgY3VyciwgdG90YWwpIHtcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKC8lY3VyciUvZ2ksIGN1cnIgKyAxKS5yZXBsYWNlKC8ldG90YWwlL2dpLCB0b3RhbCk7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnZ2FsbGVyeScsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0ZW5hYmxlZDogZmFsc2UsXG5cdFx0YXJyb3dNYXJrdXA6ICc8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1hcnJvdyBtZnAtYXJyb3ctJWRpciVcIj48L2J1dHRvbj4nLFxuXHRcdHByZWxvYWQ6IFswLDJdLFxuXHRcdG5hdmlnYXRlQnlJbWdDbGljazogdHJ1ZSxcblx0XHRhcnJvd3M6IHRydWUsXG5cblx0XHR0UHJldjogJ1ByZXZpb3VzIChMZWZ0IGFycm93IGtleSknLFxuXHRcdHROZXh0OiAnTmV4dCAoUmlnaHQgYXJyb3cga2V5KScsXG5cdFx0dENvdW50ZXI6ICclY3VyciUgb2YgJXRvdGFsJSdcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRHYWxsZXJ5OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGdTdCA9IG1mcC5zdC5nYWxsZXJ5LFxuXHRcdFx0XHRucyA9ICcubWZwLWdhbGxlcnknO1xuXG5cdFx0XHRtZnAuZGlyZWN0aW9uID0gdHJ1ZTsgLy8gdHJ1ZSAtIG5leHQsIGZhbHNlIC0gcHJldlxuXG5cdFx0XHRpZighZ1N0IHx8ICFnU3QuZW5hYmxlZCApIHJldHVybiBmYWxzZTtcblxuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWdhbGxlcnknO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0aWYoZ1N0Lm5hdmlnYXRlQnlJbWdDbGljaykge1xuXHRcdFx0XHRcdG1mcC53cmFwLm9uKCdjbGljaycrbnMsICcubWZwLWltZycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2RvY3VtZW50Lm9uKCdrZXlkb3duJytucywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IDM3KSB7XG5cdFx0XHRcdFx0XHRtZnAucHJldigpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzOSkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignVXBkYXRlU3RhdHVzJytucywgZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdFx0XHRpZihkYXRhLnRleHQpIHtcblx0XHRcdFx0XHRkYXRhLnRleHQgPSBfcmVwbGFjZUN1cnJUb3RhbChkYXRhLnRleHQsIG1mcC5jdXJySXRlbS5pbmRleCwgbWZwLml0ZW1zLmxlbmd0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oTUFSS1VQX1BBUlNFX0VWRU5UK25zLCBmdW5jdGlvbihlLCBlbGVtZW50LCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHRcdFx0dmFyIGwgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdFx0XHR2YWx1ZXMuY291bnRlciA9IGwgPiAxID8gX3JlcGxhY2VDdXJyVG90YWwoZ1N0LnRDb3VudGVyLCBpdGVtLmluZGV4LCBsKSA6ICcnO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignQnVpbGRDb250cm9scycgKyBucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5pdGVtcy5sZW5ndGggPiAxICYmIGdTdC5hcnJvd3MgJiYgIW1mcC5hcnJvd0xlZnQpIHtcblx0XHRcdFx0XHR2YXIgbWFya3VwID0gZ1N0LmFycm93TWFya3VwLFxuXHRcdFx0XHRcdFx0YXJyb3dMZWZ0ID0gbWZwLmFycm93TGVmdCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudFByZXYpLnJlcGxhY2UoLyVkaXIlL2dpLCAnbGVmdCcpICkuYWRkQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUyksXG5cdFx0XHRcdFx0XHRhcnJvd1JpZ2h0ID0gbWZwLmFycm93UmlnaHQgPSAkKCBtYXJrdXAucmVwbGFjZSgvJXRpdGxlJS9naSwgZ1N0LnROZXh0KS5yZXBsYWNlKC8lZGlyJS9naSwgJ3JpZ2h0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKTtcblxuXHRcdFx0XHRcdGFycm93TGVmdC5jbGljayhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YXJyb3dSaWdodC5jbGljayhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC5uZXh0KCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRtZnAuY29udGFpbmVyLmFwcGVuZChhcnJvd0xlZnQuYWRkKGFycm93UmlnaHQpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDSEFOR0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX3ByZWxvYWRUaW1lb3V0KSBjbGVhclRpbWVvdXQobWZwLl9wcmVsb2FkVGltZW91dCk7XG5cblx0XHRcdFx0bWZwLl9wcmVsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWZwLnByZWxvYWROZWFyYnlJbWFnZXMoKTtcblx0XHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gbnVsbDtcblx0XHRcdFx0fSwgMTYpO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2RvY3VtZW50Lm9mZihucyk7XG5cdFx0XHRcdG1mcC53cmFwLm9mZignY2xpY2snK25zKTtcblx0XHRcdFx0bWZwLmFycm93UmlnaHQgPSBtZnAuYXJyb3dMZWZ0ID0gbnVsbDtcblx0XHRcdH0pO1xuXG5cdFx0fSxcblx0XHRuZXh0OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCArIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRwcmV2OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSBmYWxzZTtcblx0XHRcdG1mcC5pbmRleCA9IF9nZXRMb29wZWRJZChtZnAuaW5kZXggLSAxKTtcblx0XHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXHRcdH0sXG5cdFx0Z29UbzogZnVuY3Rpb24obmV3SW5kZXgpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSAobmV3SW5kZXggPj0gbWZwLmluZGV4KTtcblx0XHRcdG1mcC5pbmRleCA9IG5ld0luZGV4O1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRwcmVsb2FkTmVhcmJ5SW1hZ2VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwID0gbWZwLnN0LmdhbGxlcnkucHJlbG9hZCxcblx0XHRcdFx0cHJlbG9hZEJlZm9yZSA9IE1hdGgubWluKHBbMF0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRwcmVsb2FkQWZ0ZXIgPSBNYXRoLm1pbihwWzFdLCBtZnAuaXRlbXMubGVuZ3RoKSxcblx0XHRcdFx0aTtcblxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEFmdGVyIDogcHJlbG9hZEJlZm9yZSk7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleCtpKTtcblx0XHRcdH1cblx0XHRcdGZvcihpID0gMTsgaSA8PSAobWZwLmRpcmVjdGlvbiA/IHByZWxvYWRCZWZvcmUgOiBwcmVsb2FkQWZ0ZXIpOyBpKyspIHtcblx0XHRcdFx0bWZwLl9wcmVsb2FkSXRlbShtZnAuaW5kZXgtaSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfcHJlbG9hZEl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHRpbmRleCA9IF9nZXRMb29wZWRJZChpbmRleCk7XG5cblx0XHRcdGlmKG1mcC5pdGVtc1tpbmRleF0ucHJlbG9hZGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbaW5kZXhdO1xuXHRcdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRcdGl0ZW0gPSBtZnAucGFyc2VFbCggaW5kZXggKTtcblx0XHRcdH1cblxuXHRcdFx0X21mcFRyaWdnZXIoJ0xhenlMb2FkJywgaXRlbSk7XG5cblx0XHRcdGlmKGl0ZW0udHlwZSA9PT0gJ2ltYWdlJykge1xuXHRcdFx0XHRpdGVtLmltZyA9ICQoJzxpbWcgY2xhc3M9XCJtZnAtaW1nXCIgLz4nKS5vbignbG9hZC5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHR9KS5vbignZXJyb3IubWZwbG9hZGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0xhenlMb2FkRXJyb3InLCBpdGVtKTtcblx0XHRcdFx0fSkuYXR0cignc3JjJywgaXRlbS5zcmMpO1xuXHRcdFx0fVxuXG5cblx0XHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+Z2FsbGVyeSovXG5cbi8qPj5yZXRpbmEqL1xuXG52YXIgUkVUSU5BX05TID0gJ3JldGluYSc7XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShSRVRJTkFfTlMsIHtcblx0b3B0aW9uczoge1xuXHRcdHJlcGxhY2VTcmM6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHJldHVybiBpdGVtLnNyYy5yZXBsYWNlKC9cXC5cXHcrJC8sIGZ1bmN0aW9uKG0pIHsgcmV0dXJuICdAMngnICsgbTsgfSk7XG5cdFx0fSxcblx0XHRyYXRpbzogMSAvLyBGdW5jdGlvbiBvciBudW1iZXIuICBTZXQgdG8gMSB0byBkaXNhYmxlLlxuXHR9LFxuXHRwcm90bzoge1xuXHRcdGluaXRSZXRpbmE6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYod2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxKSB7XG5cblx0XHRcdFx0dmFyIHN0ID0gbWZwLnN0LnJldGluYSxcblx0XHRcdFx0XHRyYXRpbyA9IHN0LnJhdGlvO1xuXG5cdFx0XHRcdHJhdGlvID0gIWlzTmFOKHJhdGlvKSA/IHJhdGlvIDogcmF0aW8oKTtcblxuXHRcdFx0XHRpZihyYXRpbyA+IDEpIHtcblx0XHRcdFx0XHRfbWZwT24oJ0ltYWdlSGFzU2l6ZScgKyAnLicgKyBSRVRJTkFfTlMsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nLmNzcyh7XG5cdFx0XHRcdFx0XHRcdCdtYXgtd2lkdGgnOiBpdGVtLmltZ1swXS5uYXR1cmFsV2lkdGggLyByYXRpbyxcblx0XHRcdFx0XHRcdFx0J3dpZHRoJzogJzEwMCUnXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRfbWZwT24oJ0VsZW1lbnRQYXJzZScgKyAnLicgKyBSRVRJTkFfTlMsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uc3JjID0gc3QucmVwbGFjZVNyYyhpdGVtLCByYXRpbyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5yZXRpbmEqL1xuIF9jaGVja0luc3RhbmNlKCk7IH0pKTsiLCJsZXQgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJsb2NrMScpO1xyXG5cclxuXHJcbi8vIC0tLSBNYWduaWZpYyBQb3B1cCBTZXR0aW5ncyAtLS1cclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgJCgnLnBvcHVwLXdpdGgtZm9ybScpLm1hZ25pZmljUG9wdXAoe1xyXG4gICAgICB0eXBlOiAnaW5saW5lJyxcclxuICAgICAgcHJlbG9hZGVyOiB0cnVlLFxyXG4gICAgICBtYWluQ2xhc3M6ICdjdXN0b20tbWZwLWJnJyxcclxuICAgICAgcmVtb3ZhbERlbGF5OiAzMDAsXHJcblxyXG4gICAgICBjYWxsYmFja3M6IHtcclxuICAgICAgICAgb3BlbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgYmxvY2tzLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgfSxcclxuICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYmxvY2tzLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgfSxcclxuICAgICAgfVxyXG4gICB9KTtcclxufSk7XHJcbmNvbnNvbGUubG9nKDEpO1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLSBIRUFERVJcclxuXHJcblxyXG5cclxubGV0IG5hdmJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdmJhcicpXHJcbmxldCBtZW51QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbWVudS1pdGVtX3NlbGVjdCcpO1xyXG5sZXQgY2l0eUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2xvY2F0aW9uJyk7XHJcbmxldCBkcm9wZG93bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaGVhZGVyX19kcm9wZG93bicpXHJcblxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICB3aW5kb3cucGFnZVlPZmZzZXQgPiAwID8gc2hvd05hdmJhckJnKCkgOiBoaWRlTmF2YmFyQmcoKTtcclxufSlcclxuXHJcbmZ1bmN0aW9uIHNob3dOYXZiYXJCZygpIHtcclxuICAgbmF2YmFyLmNsYXNzTGlzdC5hZGQoJ2hlYWRlcl9fbmF2YmFyX3doaXRlJylcclxufVxyXG5mdW5jdGlvbiBoaWRlTmF2YmFyQmcoKSB7XHJcbiAgIG5hdmJhci5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXJfX25hdmJhcl93aGl0ZScpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dEcm9wZG93bigpIHtcclxuXHJcbiAgIGxldCBlbGVtZW50ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZHJvcGRvd24nKTtcclxuICAgbGV0IGRyb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcclxuXHJcbiAgIGRyb3Bkb3duLmNsYXNzTGlzdC5hZGQoJ2hlYWRlcl9fZHJvcGRvd24tYWN0aXZlJyk7XHJcbiAgIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdoZWFkZXJfX2Ryb3Bkb3duLWFjdGl2ZScpXHJcbiAgIH0pXHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlRHJvcGRvd24oKSB7XHJcbiAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzaG93TmF2YmFyQmcoKTtcclxuICAgfSwgMCk7XHJcbiAgIGRyb3Bkb3ducy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlcl9fZHJvcGRvd24tYWN0aXZlJyk7XHJcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXJfX2Ryb3Bkb3duLWFjdGl2ZScpO1xyXG4gICAgICAgICBoaWRlTmF2YmFyQmcoKTtcclxuICAgICAgfSk7XHJcbiAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0KCkge1xyXG4gICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoID4gMTE4Mykge1xyXG4gICAgICBuYXZiYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc2hvd05hdmJhckJnKVxyXG4gICAgICBuYXZiYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0ID09PSAwID8gaGlkZU5hdmJhckJnKCkgOiAnJztcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBtZW51QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHNob3dEcm9wZG93bik7XHJcbiAgICAgIGNpdHlCdG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgc2hvd0Ryb3Bkb3duKTtcclxuICAgICAgbWVudUJ0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGlkZURyb3Bkb3duKTtcclxuICAgICAgY2l0eUJ0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGlkZURyb3Bkb3duKTtcclxuICAgfVxyXG4gICBlbHNlIHtcclxuICAgICAgbmF2YmFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNob3dOYXZiYXJCZylcclxuICAgICAgbWVudUJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBzaG93RHJvcGRvd24pO1xyXG4gICAgICBjaXR5QnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHNob3dEcm9wZG93bik7XHJcbiAgIH1cclxufVxyXG5cclxuaW5pdCgpO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICBpbml0KCk7XHJcbn0pXHJcblxyXG5cclxuXHJcbmxldCBwb2ludGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmljb24tcG9pbnRlcicpO1xyXG5sZXQgcG9pbnRlclNoaWZ0ID0gMDtcclxuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICBwb2ludGVyU2hpZnQgLT0gNzM7XHJcbiAgIHBvaW50ZXJTaGlmdCA8IC0yOTIgPyBwb2ludGVyU2hpZnQgPSAwIDogJyc7XHJcbiAgIHBvaW50ZXIuc3R5bGUubGVmdCA9IHBvaW50ZXJTaGlmdCArICdweCdcclxufSwgMTAwMCk7Il19
